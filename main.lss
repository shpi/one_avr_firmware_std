
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000020e  00800100  00001350  000013e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001350  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000032e  0080030e  0080030e  000015f2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000015f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019fa  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d09  00000000  00000000  00003066  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c56  00000000  00000000  00003d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  000049c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007bd  00000000  00000000  00004bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b38  00000000  00000000  00005381  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00005eb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
       4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      24:	0c 94 49 02 	jmp	0x492	; 0x492 <__vector_9>
      28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      40:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      48:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      4c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      50:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      54:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      5c:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__vector_23>
      60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      68:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      6c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      70:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      74:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      78:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      7c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      80:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      84:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      88:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      8c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      90:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__vector_36>
      94:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      98:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      9c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      a0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      a4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      a8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      ac:	c9 02       	muls	r28, r25
      ae:	ce 02       	muls	r28, r30
      b0:	d3 02       	muls	r29, r19
      b2:	d8 02       	muls	r29, r24
      b4:	dd 02       	muls	r29, r29
      b6:	e2 02       	muls	r30, r18
      b8:	e7 02       	muls	r30, r23
      ba:	0c 04       	cpc	r0, r12
      bc:	ec 02       	muls	r30, r28
      be:	f1 02       	muls	r31, r17
      c0:	f6 02       	muls	r31, r22
      c2:	fb 02       	muls	r31, r27
      c4:	0c 04       	cpc	r0, r12
      c6:	0c 04       	cpc	r0, r12
      c8:	0c 04       	cpc	r0, r12
      ca:	0c 04       	cpc	r0, r12
      cc:	0c 04       	cpc	r0, r12
      ce:	0c 04       	cpc	r0, r12
      d0:	0c 04       	cpc	r0, r12
      d2:	0c 04       	cpc	r0, r12
      d4:	0c 04       	cpc	r0, r12
      d6:	0c 04       	cpc	r0, r12
      d8:	0c 04       	cpc	r0, r12
      da:	fe 02       	muls	r31, r30
      dc:	90 06       	cpc	r9, r16
      de:	98 06       	cpc	r9, r24
      e0:	c6 06       	cpc	r12, r22
      e2:	a0 06       	cpc	r10, r16
      e4:	a8 06       	cpc	r10, r24
      e6:	c6 06       	cpc	r12, r22
      e8:	b0 06       	cpc	r11, r16
      ea:	b8 06       	cpc	r11, r24
      ec:	c6 06       	cpc	r12, r22
      ee:	bf 06       	cpc	r11, r31

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	da e0       	ldi	r29, 0x0A	; 10
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_copy_data>:
      fc:	13 e0       	ldi	r17, 0x03	; 3
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	e0 e5       	ldi	r30, 0x50	; 80
     104:	f3 e1       	ldi	r31, 0x13	; 19
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x10>
     108:	05 90       	lpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	ae 30       	cpi	r26, 0x0E	; 14
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0xc>

00000112 <__do_clear_bss>:
     112:	26 e0       	ldi	r18, 0x06	; 6
     114:	ae e0       	ldi	r26, 0x0E	; 14
     116:	b3 e0       	ldi	r27, 0x03	; 3
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	ac 33       	cpi	r26, 0x3C	; 60
     11e:	b2 07       	cpc	r27, r18
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>
     122:	0e 94 cd 05 	call	0xb9a	; 0xb9a <main>
     126:	0c 94 a6 09 	jmp	0x134c	; 0x134c <_exit>

0000012a <__bad_interrupt>:
     12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <_crc8_ccitt_update>:

static __inline__ uint8_t
_crc8_ccitt_update(uint8_t __crc, uint8_t __data)
{
    uint8_t __i, __pattern;
    __asm__ __volatile__ (
     12e:	86 27       	eor	r24, r22
     130:	98 e0       	ldi	r25, 0x08	; 8
     132:	67 e0       	ldi	r22, 0x07	; 7
     134:	88 0f       	add	r24, r24
     136:	08 f4       	brcc	.+2      	; 0x13a <_crc8_ccitt_update+0xc>
     138:	86 27       	eor	r24, r22
     13a:	9a 95       	dec	r25
     13c:	d9 f7       	brne	.-10     	; 0x134 <_crc8_ccitt_update+0x6>
        "2:  dec    %1" "\n\t"
        "    brne   1b" "\n\t"
        : "=r" (__crc), "=d" (__i), "=d" (__pattern)
        : "0" (__crc), "r" (__data));
    return __crc;
}
     13e:	08 95       	ret

00000140 <ws2812_sendarray_mask>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
     140:	2a b1       	in	r18, 0x0a	; 10
     142:	24 2b       	or	r18, r20
     144:	2a b9       	out	0x0a, r18	; 10
  
  masklo	=~maskhi&ws2812_PORTREG;
     146:	2b b1       	in	r18, 0x0b	; 11
     148:	34 2f       	mov	r19, r20
     14a:	30 95       	com	r19
     14c:	23 23       	and	r18, r19
  maskhi |=        ws2812_PORTREG;
     14e:	3b b1       	in	r19, 0x0b	; 11
     150:	43 2b       	or	r20, r19
  
  sreg_prev=SREG;
     152:	3f b7       	in	r19, 0x3f	; 63
  cli();  
     154:	f8 94       	cli
     156:	fc 01       	movw	r30, r24
     158:	68 0f       	add	r22, r24
     15a:	79 1f       	adc	r23, r25

  while (datlen--) {
     15c:	e6 17       	cp	r30, r22
     15e:	f7 07       	cpc	r31, r23
     160:	c1 f0       	breq	.+48     	; 0x192 <loop59+0x2c>
    curbyte=*data++;
     162:	81 91       	ld	r24, Z+
    
    asm volatile(
     164:	98 e0       	ldi	r25, 0x08	; 8

00000166 <loop59>:
     166:	4b b9       	out	0x0b, r20	; 11
     168:	00 00       	nop
     16a:	00 c0       	rjmp	.+0      	; 0x16c <loop59+0x6>
     16c:	87 ff       	sbrs	r24, 7
     16e:	2b b9       	out	0x0b, r18	; 11
     170:	88 0f       	add	r24, r24
     172:	00 00       	nop
     174:	00 c0       	rjmp	.+0      	; 0x176 <loop59+0x10>
     176:	00 c0       	rjmp	.+0      	; 0x178 <loop59+0x12>
     178:	00 c0       	rjmp	.+0      	; 0x17a <loop59+0x14>
     17a:	2b b9       	out	0x0b, r18	; 11
     17c:	00 c0       	rjmp	.+0      	; 0x17e <loop59+0x18>
     17e:	00 c0       	rjmp	.+0      	; 0x180 <loop59+0x1a>
     180:	00 c0       	rjmp	.+0      	; 0x182 <loop59+0x1c>
     182:	00 c0       	rjmp	.+0      	; 0x184 <loop59+0x1e>
     184:	00 c0       	rjmp	.+0      	; 0x186 <loop59+0x20>
     186:	00 c0       	rjmp	.+0      	; 0x188 <loop59+0x22>
     188:	00 c0       	rjmp	.+0      	; 0x18a <loop59+0x24>
     18a:	00 c0       	rjmp	.+0      	; 0x18c <loop59+0x26>
     18c:	9a 95       	dec	r25
     18e:	59 f7       	brne	.-42     	; 0x166 <loop59>
     190:	e5 cf       	rjmp	.-54     	; 0x15c <ws2812_sendarray_mask+0x1c>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
     192:	3f bf       	out	0x3f, r19	; 63
     194:	08 95       	ret

00000196 <ws2812_setleds_pin>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
     196:	9b 01       	movw	r18, r22
     198:	22 0f       	add	r18, r18
     19a:	33 1f       	adc	r19, r19
     19c:	62 0f       	add	r22, r18
     19e:	73 1f       	adc	r23, r19
     1a0:	0e 94 a0 00 	call	0x140	; 0x140 <ws2812_sendarray_mask>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a4:	8f ea       	ldi	r24, 0xAF	; 175
     1a6:	94 e0       	ldi	r25, 0x04	; 4
     1a8:	01 97       	sbiw	r24, 0x01	; 1
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <ws2812_setleds_pin+0x12>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <ws2812_setleds_pin+0x18>
     1ae:	00 00       	nop
     1b0:	08 95       	ret

000001b2 <ws2812_setleds>:
#include <util/delay.h>
 
// Setleds for standard RGB 
void inline ws2812_setleds(struct cRGB *ledarray, uint16_t leds)
{
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
     1b2:	40 e2       	ldi	r20, 0x20	; 32
     1b4:	0c 94 cb 00 	jmp	0x196	; 0x196 <ws2812_setleds_pin>

000001b8 <ws2812_sendarray>:



void ws2812_sendarray(uint8_t *data,uint16_t datlen)
{
  ws2812_sendarray_mask(data,datlen,_BV(ws2812_pin));
     1b8:	40 e2       	ldi	r20, 0x20	; 32
     1ba:	0c 94 a0 00 	jmp	0x140	; 0x140 <ws2812_sendarray_mask>

000001be <write_backlight>:
    0x017, 0x122, 0x002, 0x177, 0x026, 0x1b2, 0x0e1, 0x179,
    0x0ff, 0x1ff, 0x198, 0x106, 0x104, 0x100, 0x03a, 0x160,
    0x035, 0x100, 0x011, 0x100,    0xffff, 0x029, 0x013, 0x100,    0xffff};


void write_backlight(uint8_t data) { // set single wire brightness  AL3050 
     1be:	27 e0       	ldi	r18, 0x07	; 7
     1c0:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t count = 8;
  do {
    PORTD &= ~_BV(PD4);
    _delay_us(50);
    if (!(data & (1 << (count - 1)))) {
     1c2:	90 e0       	ldi	r25, 0x00	; 0


void write_backlight(uint8_t data) { // set single wire brightness  AL3050 
  uint8_t count = 8;
  do {
    PORTD &= ~_BV(PD4);
     1c4:	5c 98       	cbi	0x0b, 4	; 11
     1c6:	e7 ec       	ldi	r30, 0xC7	; 199
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	31 97       	sbiw	r30, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <write_backlight+0xc>
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <write_backlight+0x12>
     1d0:	00 00       	nop
    _delay_us(50);
    if (!(data & (1 << (count - 1)))) {
     1d2:	ac 01       	movw	r20, r24
     1d4:	02 2e       	mov	r0, r18
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <write_backlight+0x1e>
     1d8:	55 95       	asr	r21
     1da:	47 95       	ror	r20
     1dc:	0a 94       	dec	r0
     1de:	e2 f7       	brpl	.-8      	; 0x1d8 <write_backlight+0x1a>
     1e0:	ba 01       	movw	r22, r20
     1e2:	61 70       	andi	r22, 0x01	; 1
     1e4:	77 27       	eor	r23, r23
     1e6:	40 fd       	sbrc	r20, 0
     1e8:	06 c0       	rjmp	.+12     	; 0x1f6 <write_backlight+0x38>
     1ea:	e7 ec       	ldi	r30, 0xC7	; 199
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	31 97       	sbiw	r30, 0x01	; 1
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <write_backlight+0x30>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <write_backlight+0x36>
     1f4:	00 00       	nop
      _delay_us(50);
    }
    PORTD |= _BV(PD4);
     1f6:	5c 9a       	sbi	0x0b, 4	; 11
     1f8:	e7 ec       	ldi	r30, 0xC7	; 199
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	31 97       	sbiw	r30, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <write_backlight+0x3e>
     200:	00 c0       	rjmp	.+0      	; 0x202 <write_backlight+0x44>
     202:	00 00       	nop
    _delay_us(50);
    if ((data & (1 << (count - 1))) != 0) {
     204:	67 2b       	or	r22, r23
     206:	31 f0       	breq	.+12     	; 0x214 <write_backlight+0x56>
     208:	e7 ec       	ldi	r30, 0xC7	; 199
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	31 97       	sbiw	r30, 0x01	; 1
     20e:	f1 f7       	brne	.-4      	; 0x20c <write_backlight+0x4e>
     210:	00 c0       	rjmp	.+0      	; 0x212 <write_backlight+0x54>
     212:	00 00       	nop
     214:	21 50       	subi	r18, 0x01	; 1
     216:	31 09       	sbc	r19, r1
     218:	a8 f6       	brcc	.-86     	; 0x1c4 <write_backlight+0x6>
      _delay_us(50);
    }
    count--;
  } while (count);

  PORTD &= ~_BV(PD4);
     21a:	5c 98       	cbi	0x0b, 4	; 11
     21c:	87 ec       	ldi	r24, 0xC7	; 199
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	01 97       	sbiw	r24, 0x01	; 1
     222:	f1 f7       	brne	.-4      	; 0x220 <write_backlight+0x62>
     224:	00 c0       	rjmp	.+0      	; 0x226 <write_backlight+0x68>
     226:	00 00       	nop
  _delay_us(50);
  PORTD |= _BV(PD4);
     228:	5c 9a       	sbi	0x0b, 4	; 11
     22a:	e7 ec       	ldi	r30, 0xC7	; 199
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	31 97       	sbiw	r30, 0x01	; 1
     230:	f1 f7       	brne	.-4      	; 0x22e <write_backlight+0x70>
     232:	00 c0       	rjmp	.+0      	; 0x234 <write_backlight+0x76>
     234:	00 00       	nop
     236:	08 95       	ret

00000238 <init_backlight>:
  _delay_us(50);
}

void init_backlight(void) { // init AL3050 single wire dimming
  PORTD &= ~_BV(PD4);
     238:	5c 98       	cbi	0x0b, 4	; 11
     23a:	8f ed       	ldi	r24, 0xDF	; 223
     23c:	9e e2       	ldi	r25, 0x2E	; 46
     23e:	01 97       	sbiw	r24, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <init_backlight+0x6>
     242:	00 c0       	rjmp	.+0      	; 0x244 <init_backlight+0xc>
     244:	00 00       	nop
  _delay_us(3000);
  PORTD |= _BV(PD4);
     246:	5c 9a       	sbi	0x0b, 4	; 11
     248:	8f ed       	ldi	r24, 0xDF	; 223
     24a:	91 e0       	ldi	r25, 0x01	; 1
     24c:	01 97       	sbiw	r24, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <init_backlight+0x14>
     250:	00 c0       	rjmp	.+0      	; 0x252 <init_backlight+0x1a>
     252:	00 00       	nop
  _delay_us(120);
  PORTD &= ~_BV(PD4);
     254:	5c 98       	cbi	0x0b, 4	; 11
     256:	8f ec       	ldi	r24, 0xCF	; 207
     258:	97 e0       	ldi	r25, 0x07	; 7
     25a:	01 97       	sbiw	r24, 0x01	; 1
     25c:	f1 f7       	brne	.-4      	; 0x25a <init_backlight+0x22>
     25e:	00 c0       	rjmp	.+0      	; 0x260 <init_backlight+0x28>
     260:	00 00       	nop
  _delay_us(500);
  PORTD |= _BV(PD4);
     262:	5c 9a       	sbi	0x0b, 4	; 11
     264:	9a e1       	ldi	r25, 0x1A	; 26
     266:	9a 95       	dec	r25
     268:	f1 f7       	brne	.-4      	; 0x266 <init_backlight+0x2e>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <init_backlight+0x34>
  _delay_us(5);
  bllevel = 31;
     26c:	8f e1       	ldi	r24, 0x1F	; 31
     26e:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <bllevel>
  newbllevel = 31;
     272:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <newbllevel>
     276:	08 95       	ret

00000278 <write_lcd>:
}

void write_lcd(uint16_t data, uint8_t count) { //  write routine for LCD setup
     278:	ac 01       	movw	r20, r24
  PORTD &= ~_BV(PD4);
     27a:	5c 98       	cbi	0x0b, 4	; 11

  do {
    PORTB &= ~_BV(PB2);
    PORTB |= (((data & (1 << (count - 1))) != 0) << 2); // BITWISE AND -> PB2           
     27c:	e1 e0       	ldi	r30, 0x01	; 1
     27e:	f0 e0       	ldi	r31, 0x00	; 0

void write_lcd(uint16_t data, uint8_t count) { //  write routine for LCD setup
  PORTD &= ~_BV(PD4);

  do {
    PORTB &= ~_BV(PB2);
     280:	2a 98       	cbi	0x05, 2	; 5
    PORTB |= (((data & (1 << (count - 1))) != 0) << 2); // BITWISE AND -> PB2           
     282:	95 b1       	in	r25, 0x05	; 5
     284:	8f ef       	ldi	r24, 0xFF	; 255
     286:	86 0f       	add	r24, r22
     288:	9f 01       	movw	r18, r30
     28a:	02 c0       	rjmp	.+4      	; 0x290 <write_lcd+0x18>
     28c:	22 0f       	add	r18, r18
     28e:	33 1f       	adc	r19, r19
     290:	8a 95       	dec	r24
     292:	e2 f7       	brpl	.-8      	; 0x28c <write_lcd+0x14>
     294:	24 23       	and	r18, r20
     296:	35 23       	and	r19, r21
     298:	23 2b       	or	r18, r19
     29a:	11 f4       	brne	.+4      	; 0x2a0 <write_lcd+0x28>
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	01 c0       	rjmp	.+2      	; 0x2a2 <write_lcd+0x2a>
     2a0:	24 e0       	ldi	r18, 0x04	; 4
     2a2:	92 2b       	or	r25, r18
     2a4:	95 b9       	out	0x05, r25	; 5
    PORTB &= ~_BV(PB1);
     2a6:	29 98       	cbi	0x05, 1	; 5
     2a8:	85 e0       	ldi	r24, 0x05	; 5
     2aa:	8a 95       	dec	r24
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <write_lcd+0x32>
     2ae:	00 00       	nop
    _delay_us(LCD_WRITE_DELAY);
    PORTB |= _BV(PB1);
     2b0:	29 9a       	sbi	0x05, 1	; 5
     2b2:	85 e0       	ldi	r24, 0x05	; 5
     2b4:	8a 95       	dec	r24
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <write_lcd+0x3c>
     2b8:	00 00       	nop
    _delay_us(LCD_WRITE_DELAY);
    count--;
     2ba:	61 50       	subi	r22, 0x01	; 1
  } while (count);
     2bc:	09 f7       	brne	.-62     	; 0x280 <write_lcd+0x8>
  PORTB &= ~_BV(PB2);
     2be:	2a 98       	cbi	0x05, 2	; 5
  PORTD |= _BV(PD4);
     2c0:	5c 9a       	sbi	0x0b, 4	; 11
     2c2:	85 e0       	ldi	r24, 0x05	; 5
     2c4:	8a 95       	dec	r24
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <write_lcd+0x4c>
     2c8:	00 00       	nop
     2ca:	08 95       	ret

000002cc <setup_lcd>:
  _delay_us(LCD_WRITE_DELAY);
  
}

void setup_lcd(void){
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29

   PORTD |= _BV(PD4);
     2d0:	5c 9a       	sbi	0x0b, 4	; 11
     2d2:	2a e1       	ldi	r18, 0x1A	; 26
     2d4:	2a 95       	dec	r18
     2d6:	f1 f7       	brne	.-4      	; 0x2d4 <setup_lcd+0x8>
     2d8:	00 c0       	rjmp	.+0      	; 0x2da <setup_lcd+0xe>
     2da:	c0 e0       	ldi	r28, 0x00	; 0
     2dc:	d1 e0       	ldi	r29, 0x01	; 1
    _delay_us(5);


   for(int x=0; x < sizeof(data_lcd_shpi397)/sizeof(uint16_t); x++ )
     2de:	83 e0       	ldi	r24, 0x03	; 3
     2e0:	c2 30       	cpi	r28, 0x02	; 2
     2e2:	d8 07       	cpc	r29, r24
     2e4:	a1 f0       	breq	.+40     	; 0x30e <setup_lcd+0x42>
   {

   if (data_lcd_shpi397[x] == 0xffff) 
     2e6:	89 91       	ld	r24, Y+
     2e8:	99 91       	ld	r25, Y+
     2ea:	8f 3f       	cpi	r24, 0xFF	; 255
     2ec:	2f ef       	ldi	r18, 0xFF	; 255
     2ee:	92 07       	cpc	r25, r18
     2f0:	51 f4       	brne	.+20     	; 0x306 <setup_lcd+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f2:	8f ef       	ldi	r24, 0xFF	; 255
     2f4:	91 ee       	ldi	r25, 0xE1	; 225
     2f6:	24 e0       	ldi	r18, 0x04	; 4
     2f8:	81 50       	subi	r24, 0x01	; 1
     2fa:	90 40       	sbci	r25, 0x00	; 0
     2fc:	20 40       	sbci	r18, 0x00	; 0
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <setup_lcd+0x2c>
     300:	00 c0       	rjmp	.+0      	; 0x302 <setup_lcd+0x36>
     302:	00 00       	nop
     304:	ec cf       	rjmp	.-40     	; 0x2de <setup_lcd+0x12>
               {_delay_ms(LCD_WAIT);}
   else { write_lcd(data_lcd_shpi397[x],9);}
     306:	69 e0       	ldi	r22, 0x09	; 9
     308:	0e 94 3c 01 	call	0x278	; 0x278 <write_lcd>
     30c:	e8 cf       	rjmp	.-48     	; 0x2de <setup_lcd+0x12>

   }
   }
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <read_analog>:

uint16_t read_analog(uint8_t channel) {
  uint8_t low, high;
  ADCSRA |= _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
     314:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     318:	97 60       	ori	r25, 0x07	; 7
     31a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  ADCSRB = 0x40;
     31e:	90 e4       	ldi	r25, 0x40	; 64
     320:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  ADMUX = ((0 << REFS1) | (1 << REFS0) | (0 << ADLAR));
     324:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

  if (channel >= 8) //
     328:	88 30       	cpi	r24, 0x08	; 8
     32a:	28 f0       	brcs	.+10     	; 0x336 <read_analog+0x22>
  {
    channel -= 0x08; //ch - 8           
     32c:	88 50       	subi	r24, 0x08	; 8
    ADCSRB |= (1 << MUX5); // set MUX5 on ADCSRB to read upper bit ADC8-ADC13
     32e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     332:	90 62       	ori	r25, 0x20	; 32
     334:	03 c0       	rjmp	.+6      	; 0x33c <read_analog+0x28>
  } else {
    ADCSRB &= ~(1 << MUX5); // clear MUX 5 
     336:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     33a:	9f 7d       	andi	r25, 0xDF	; 223
     33c:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  }
  channel &= 0x07;
  ADMUX |= channel; // selecting channel
     340:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     344:	87 70       	andi	r24, 0x07	; 7
     346:	89 2b       	or	r24, r25
     348:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

  ADCSRA |= _BV(ADEN);
     34c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     350:	80 68       	ori	r24, 0x80	; 128
     352:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     356:	8f e3       	ldi	r24, 0x3F	; 63
     358:	9f e1       	ldi	r25, 0x1F	; 31
     35a:	01 97       	sbiw	r24, 0x01	; 1
     35c:	f1 f7       	brne	.-4      	; 0x35a <read_analog+0x46>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <read_analog+0x4c>
     360:	00 00       	nop
  _delay_ms(2);
  ADCSRA |= (1 << ADSC);
     362:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     366:	80 64       	ori	r24, 0x40	; 64
     368:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

  while ((ADCSRA & _BV(ADSC))); // measuring 
     36c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     370:	86 fd       	sbrc	r24, 6
     372:	fc cf       	rjmp	.-8      	; 0x36c <read_analog+0x58>
  low = ADCL;
     374:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  high = ADCH;
     378:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  return (high << 8) | low;
     37c:	90 e0       	ldi	r25, 0x00	; 0

}
     37e:	92 2b       	or	r25, r18
     380:	08 95       	ret

00000382 <readVcc>:

uint16_t readVcc(void) {
  ADMUX = _BV(REFS0) | _BV(MUX4) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
     382:	8e e5       	ldi	r24, 0x5E	; 94
     384:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  ADCSRA |= _BV(ADEN);
     388:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     38c:	80 68       	ori	r24, 0x80	; 128
     38e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  ADCSRB &= ~_BV(MUX5);
     392:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     396:	8f 7d       	andi	r24, 0xDF	; 223
     398:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     39c:	8f e3       	ldi	r24, 0x3F	; 63
     39e:	9f e1       	ldi	r25, 0x1F	; 31
     3a0:	01 97       	sbiw	r24, 0x01	; 1
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <readVcc+0x1e>
     3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <readVcc+0x24>
     3a6:	00 00       	nop
  _delay_ms(2);
  ADCSRA |= 1 << ADSC;
     3a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     3ac:	80 64       	ori	r24, 0x40	; 64
     3ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  while ((ADCSRA & _BV(ADSC))); // measuring
     3b2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     3b6:	86 fd       	sbrc	r24, 6
     3b8:	fc cf       	rjmp	.-8      	; 0x3b2 <readVcc+0x30>
  ADCSRA |= 1 << ADSC;
     3ba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     3be:	80 64       	ori	r24, 0x40	; 64
     3c0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  while ((ADCSRA & _BV(ADSC)));
     3c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     3c8:	86 fd       	sbrc	r24, 6
     3ca:	fc cf       	rjmp	.-8      	; 0x3c4 <readVcc+0x42>
  return 1125300L / (ADCL | (ADCH<<8));
     3cc:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     3d0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	38 2b       	or	r19, r24
     3d8:	03 2e       	mov	r0, r19
     3da:	00 0c       	add	r0, r0
     3dc:	44 0b       	sbc	r20, r20
     3de:	55 0b       	sbc	r21, r21
     3e0:	64 eb       	ldi	r22, 0xB4	; 180
     3e2:	7b e2       	ldi	r23, 0x2B	; 43
     3e4:	81 e1       	ldi	r24, 0x11	; 17
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 3e 08 	call	0x107c	; 0x107c <__divmodsi4>
}
     3ec:	c9 01       	movw	r24, r18
     3ee:	08 95       	ret

000003f0 <GetTemp>:

uint16_t GetTemp(void) {

  ADMUX = _BV(REFS1) | _BV(REFS0) | 7; // Set internal V reference, temperature reading
     3f0:	87 ec       	ldi	r24, 0xC7	; 199
     3f2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  ADCSRB = 0x20; // ref  24.6
     3f6:	80 e2       	ldi	r24, 0x20	; 32
     3f8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  ADCSRA &= ~(_BV(ADATE) | _BV(ADIE)); // Clear auto trigger and interrupt enable
     3fc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     400:	87 7d       	andi	r24, 0xD7	; 215
     402:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  ADCSRA |= _BV(ADEN); // enable the ADC
     406:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     40a:	80 68       	ori	r24, 0x80	; 128
     40c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     410:	8f e3       	ldi	r24, 0x3F	; 63
     412:	9f e1       	ldi	r25, 0x1F	; 31
     414:	01 97       	sbiw	r24, 0x01	; 1
     416:	f1 f7       	brne	.-4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	00 00       	nop
  _delay_ms(2); // delay for voltages to become stable.

  ADCSRA |= _BV(ADSC); // measuring
     41c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     420:	80 64       	ori	r24, 0x40	; 64
     422:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  while ((ADCSRA & _BV(ADSC)));
     426:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     42a:	86 fd       	sbrc	r24, 6
     42c:	fc cf       	rjmp	.-8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>

  ADCSRA |= _BV(ADSC);
     42e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     432:	80 64       	ori	r24, 0x40	; 64
     434:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  while ((ADCSRA & _BV(ADSC)));
     438:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     43c:	86 fd       	sbrc	r24, 6
     43e:	fc cf       	rjmp	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>

  return (ADCL | (ADCH << 8));
     440:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     444:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     448:	90 e0       	ldi	r25, 0x00	; 0
}
     44a:	92 2b       	or	r25, r18
     44c:	08 95       	ret

0000044e <freeRam>:

uint16_t freeRam(void) {
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	00 d0       	rcall	.+0      	; 0x454 <freeRam+0x6>
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
  extern char __heap_start, * __brkval;
  int v;
  return (uint16_t) & v - (__brkval == 0 ? (int) & __heap_start : (int) __brkval);
     458:	20 91 38 06 	lds	r18, 0x0638	; 0x800638 <__brkval>
     45c:	30 91 39 06 	lds	r19, 0x0639	; 0x800639 <__brkval+0x1>
     460:	21 15       	cp	r18, r1
     462:	31 05       	cpc	r19, r1
     464:	11 f4       	brne	.+4      	; 0x46a <freeRam+0x1c>
     466:	2c e3       	ldi	r18, 0x3C	; 60
     468:	36 e0       	ldi	r19, 0x06	; 6
}
     46a:	ce 01       	movw	r24, r28
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	82 1b       	sub	r24, r18
     470:	93 0b       	sbc	r25, r19
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <I2C_init>:

void I2C_init(uint8_t address) // setup ATmega as I2C slave
{
  cli();
     47c:	f8 94       	cli

  TWAR = (address << 1);
     47e:	88 0f       	add	r24, r24
     480:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
  TWCR = (1 << TWEN) | // TWI Interface enabled.
     484:	85 ec       	ldi	r24, 0xC5	; 197
     486:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    (1 << TWIE) | (1 << TWINT) | // Enable TWI Interupt and clear the flag.
    (1 << TWEA) | (0 << TWSTA) | (0 << TWSTO) | // Prepare to ACK next time the Slave is addressed.
    (0 << TWWC);

  buffer_address = 0xFF;
     48a:	8f ef       	ldi	r24, 0xFF	; 255
     48c:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <buffer_address>
     490:	08 95       	ret

00000492 <__vector_9>:

}

ISR(PCINT0_vect) {
     492:	1f 92       	push	r1
     494:	0f 92       	push	r0
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	0f 92       	push	r0
     49a:	11 24       	eor	r1, r1
     49c:	8f 93       	push	r24
     49e:	9f 93       	push	r25
  sei();
     4a0:	78 94       	sei
  if (bit_is_clear(PINB, PB4)) fanspin++;
     4a2:	1c 99       	sbic	0x03, 4	; 3
     4a4:	09 c0       	rjmp	.+18     	; 0x4b8 <__vector_9+0x26>
     4a6:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <fanspin>
     4aa:	90 91 21 06 	lds	r25, 0x0621	; 0x800621 <fanspin+0x1>
     4ae:	01 96       	adiw	r24, 0x01	; 1
     4b0:	90 93 21 06 	sts	0x0621, r25	; 0x800621 <fanspin+0x1>
     4b4:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <fanspin>
} // counting VENT_RPM
     4b8:	9f 91       	pop	r25
     4ba:	8f 91       	pop	r24
     4bc:	0f 90       	pop	r0
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	0f 90       	pop	r0
     4c2:	1f 90       	pop	r1
     4c4:	18 95       	reti

000004c6 <__vector_23>:

ISR(TIMER0_OVF_vect) {
     4c6:	1f 92       	push	r1
     4c8:	0f 92       	push	r0
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	0f 92       	push	r0
     4ce:	11 24       	eor	r1, r1
     4d0:	8f 93       	push	r24
     4d2:	9f 93       	push	r25
  isrtimer++;
     4d4:	80 91 32 06 	lds	r24, 0x0632	; 0x800632 <isrtimer>
     4d8:	90 91 33 06 	lds	r25, 0x0633	; 0x800633 <isrtimer+0x1>
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	90 93 33 06 	sts	0x0633, r25	; 0x800633 <isrtimer+0x1>
     4e2:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <isrtimer>
} // reuse timer0 for counting VENT_RPM
     4e6:	9f 91       	pop	r25
     4e8:	8f 91       	pop	r24
     4ea:	0f 90       	pop	r0
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	0f 90       	pop	r0
     4f0:	1f 90       	pop	r1
     4f2:	18 95       	reti

000004f4 <__vector_36>:

ISR(TWI_vect) {
     4f4:	1f 92       	push	r1
     4f6:	0f 92       	push	r0
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	0f 92       	push	r0
     4fc:	11 24       	eor	r1, r1
     4fe:	2f 93       	push	r18
     500:	3f 93       	push	r19
     502:	4f 93       	push	r20
     504:	5f 93       	push	r21
     506:	6f 93       	push	r22
     508:	7f 93       	push	r23
     50a:	8f 93       	push	r24
     50c:	9f 93       	push	r25
     50e:	af 93       	push	r26
     510:	bf 93       	push	r27
     512:	cf 93       	push	r28
     514:	ef 93       	push	r30
     516:	ff 93       	push	r31

  switch (TW_STATUS) {
     518:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     51c:	88 7f       	andi	r24, 0xF8	; 248
     51e:	80 38       	cpi	r24, 0x80	; 128
     520:	a9 f0       	breq	.+42     	; 0x54c <__vector_36+0x58>
     522:	68 f4       	brcc	.+26     	; 0x53e <__vector_36+0x4a>
     524:	88 23       	and	r24, r24
     526:	09 f4       	brne	.+2      	; 0x52a <__vector_36+0x36>
     528:	c8 c2       	rjmp	.+1424   	; 0xaba <__vector_36+0x5c6>
     52a:	80 36       	cpi	r24, 0x60	; 96
     52c:	09 f0       	breq	.+2      	; 0x530 <__vector_36+0x3c>
     52e:	c7 c2       	rjmp	.+1422   	; 0xabe <__vector_36+0x5ca>

  case TW_SR_SLA_ACK:

    TWCR = (1 << TWIE) | (1 << TWINT) | (1 << TWEA) | (1 << TWEN);
     530:	85 ec       	ldi	r24, 0xC5	; 197
     532:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    buffer_address = 0xFF; // set buffer pos undefined
     536:	8f ef       	ldi	r24, 0xFF	; 255
     538:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <buffer_address>
    break;
     53c:	c3 c2       	rjmp	.+1414   	; 0xac4 <__vector_36+0x5d0>
  isrtimer++;
} // reuse timer0 for counting VENT_RPM

ISR(TWI_vect) {

  switch (TW_STATUS) {
     53e:	88 3a       	cpi	r24, 0xA8	; 168
     540:	09 f4       	brne	.+2      	; 0x544 <__vector_36+0x50>
     542:	7d c1       	rjmp	.+762    	; 0x83e <__vector_36+0x34a>
     544:	88 3b       	cpi	r24, 0xB8	; 184
     546:	09 f4       	brne	.+2      	; 0x54a <__vector_36+0x56>
     548:	7a c1       	rjmp	.+756    	; 0x83e <__vector_36+0x34a>
     54a:	b9 c2       	rjmp	.+1394   	; 0xabe <__vector_36+0x5ca>
    buffer_address = 0xFF; // set buffer pos undefined
    break;
   
  case TW_SR_DATA_ACK: // received data from master
    
    if (buffer_address == 0xFF) {
     54c:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <buffer_address>
     550:	8f 3f       	cpi	r24, 0xFF	; 255
     552:	09 f0       	breq	.+2      	; 0x556 <__vector_36+0x62>
     554:	5c c0       	rjmp	.+184    	; 0x60e <__vector_36+0x11a>

      commandbyte = TWDR;
     556:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     55a:	60 93 05 03 	sts	0x0305, r22	; 0x800305 <commandbyte>
      if (crc_active)   crc = _crc8_ccitt_update(0, commandbyte);
     55e:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <crc_active>
     562:	88 23       	and	r24, r24
     564:	29 f0       	breq	.+10     	; 0x570 <__vector_36+0x7c>
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	0e 94 97 00 	call	0x12e	; 0x12e <_crc8_ccitt_update>
     56c:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <crc>
      buffer_address = 0;
     570:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <buffer_address>
      i2cerror = 0;
     574:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <i2cerror>


      switch (commandbyte) {		 
     578:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <commandbyte>
     57c:	8e 2f       	mov	r24, r30
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	88 31       	cpi	r24, 0x18	; 24
     582:	91 05       	cpc	r25, r1
     584:	08 f0       	brcs	.+2      	; 0x588 <__vector_36+0x94>
     586:	48 c1       	rjmp	.+656    	; 0x818 <__vector_36+0x324>
     588:	fc 01       	movw	r30, r24
     58a:	ea 5a       	subi	r30, 0xAA	; 170
     58c:	ff 4f       	sbci	r31, 0xFF	; 255
     58e:	0c 94 5d 08 	jmp	0x10ba	; 0x10ba <__tablejump2__>

		  case 0x00: i2cbuffer = a0; break;
     592:	80 91 34 06 	lds	r24, 0x0634	; 0x800634 <a0>
     596:	90 91 35 06 	lds	r25, 0x0635	; 0x800635 <a0+0x1>
     59a:	34 c0       	rjmp	.+104    	; 0x604 <__vector_36+0x110>
		  case 0x01: i2cbuffer = a1; break;
     59c:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <a1>
     5a0:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <a1+0x1>
     5a4:	2f c0       	rjmp	.+94     	; 0x604 <__vector_36+0x110>
		  case 0x02: i2cbuffer = a2; break;
     5a6:	80 91 2f 06 	lds	r24, 0x062F	; 0x80062f <a2>
     5aa:	90 91 30 06 	lds	r25, 0x0630	; 0x800630 <a2+0x1>
     5ae:	2a c0       	rjmp	.+84     	; 0x604 <__vector_36+0x110>
		  case 0x03: i2cbuffer = a3; break;
     5b0:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <a3>
     5b4:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <a3+0x1>
     5b8:	25 c0       	rjmp	.+74     	; 0x604 <__vector_36+0x110>
		  case 0x04: i2cbuffer = a4; break;
     5ba:	80 91 36 06 	lds	r24, 0x0636	; 0x800636 <a4>
     5be:	90 91 37 06 	lds	r25, 0x0637	; 0x800637 <a4+0x1>
     5c2:	20 c0       	rjmp	.+64     	; 0x604 <__vector_36+0x110>
		  case 0x05: i2cbuffer = a5; break;
     5c4:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <a5>
     5c8:	90 91 2c 06 	lds	r25, 0x062C	; 0x80062c <a5+0x1>
     5cc:	1b c0       	rjmp	.+54     	; 0x604 <__vector_36+0x110>
		  case 0x06: i2cbuffer = a7; break;
     5ce:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <a7>
     5d2:	90 91 26 06 	lds	r25, 0x0626	; 0x800626 <a7+0x1>
     5d6:	16 c0       	rjmp	.+44     	; 0x604 <__vector_36+0x110>
		  case 0x08: i2cbuffer = rpm;break;
     5d8:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <rpm>
     5dc:	90 91 24 06 	lds	r25, 0x0624	; 0x800624 <rpm+0x1>
     5e0:	11 c0       	rjmp	.+34     	; 0x604 <__vector_36+0x110>
		  case 0x09: i2cbuffer = vcc; break;
     5e2:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <vcc>
     5e6:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <vcc+0x1>
     5ea:	0c c0       	rjmp	.+24     	; 0x604 <__vector_36+0x110>
		  case 0x0A: i2cbuffer = temp;break;
     5ec:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <temp>
     5f0:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <temp+0x1>
     5f4:	07 c0       	rjmp	.+14     	; 0x604 <__vector_36+0x110>
		  case 0x0B: i2cbuffer = freeRam(); break;
     5f6:	0e 94 27 02 	call	0x44e	; 0x44e <freeRam>
     5fa:	04 c0       	rjmp	.+8      	; 0x604 <__vector_36+0x110>
		  case 0x17: i2cbuffer = a7avg; break;
     5fc:	80 91 27 06 	lds	r24, 0x0627	; 0x800627 <a7avg>
     600:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <a7avg+0x1>
     604:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <i2cbuffer+0x1>
     608:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <i2cbuffer>
     60c:	05 c1       	rjmp	.+522    	; 0x818 <__vector_36+0x324>

	    }
      } 
      else { 

      if (buffer_address == 0) {
     60e:	81 11       	cpse	r24, r1
     610:	12 c0       	rjmp	.+36     	; 0x636 <__vector_36+0x142>
					      twdrbuffer = TWDR;
     612:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     616:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <twdrbuffer>
      					      if (commandbyte == 0xFE) crc_active = twdrbuffer;
     61a:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <commandbyte>
     61e:	9e 3f       	cpi	r25, 0xFE	; 254
     620:	11 f4       	brne	.+4      	; 0x626 <__vector_36+0x132>
     622:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <crc_active>
       					      crc = _crc8_ccitt_update(crc,TWDR);
     626:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     62a:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <crc>
     62e:	0e 94 97 00 	call	0x12e	; 0x12e <_crc8_ccitt_update>
     632:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <crc>

      }
 

      if ((crc_active && (buffer_address == 1) && (TWDR == crc)) ||   (!crc_active && buffer_address == 0) ) { 
     636:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <crc_active>
     63a:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <buffer_address>
     63e:	99 23       	and	r25, r25
     640:	51 f0       	breq	.+20     	; 0x656 <__vector_36+0x162>
     642:	81 30       	cpi	r24, 0x01	; 1
     644:	09 f0       	breq	.+2      	; 0x648 <__vector_36+0x154>
     646:	de c0       	rjmp	.+444    	; 0x804 <__vector_36+0x310>
     648:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     64c:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <crc>
     650:	98 13       	cpse	r25, r24
     652:	d8 c0       	rjmp	.+432    	; 0x804 <__vector_36+0x310>
     654:	02 c0       	rjmp	.+4      	; 0x65a <__vector_36+0x166>
     656:	81 11       	cpse	r24, r1
     658:	d5 c0       	rjmp	.+426    	; 0x804 <__vector_36+0x310>


           if (commandbyte == 0x87 ) {newbllevel = twdrbuffer;}
     65a:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <commandbyte>
     65e:	87 38       	cpi	r24, 0x87	; 135
     660:	29 f4       	brne	.+10     	; 0x66c <__vector_36+0x178>
     662:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <twdrbuffer>
     666:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <newbllevel>
     66a:	d1 c0       	rjmp	.+418    	; 0x80e <__vector_36+0x31a>
      else if (commandbyte == 0x98 ) {displaychange = 1; if (twdrbuffer == 0xFF) {write_lcd(0x029,9);write_lcd(0x013,9); display = 0xFF;} else {write_lcd(0x028,9); display = 0x00;}}  // switch display controller on off
     66c:	88 39       	cpi	r24, 0x98	; 152
     66e:	d9 f4       	brne	.+54     	; 0x6a6 <__vector_36+0x1b2>
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <displaychange>
     676:	c0 91 22 06 	lds	r28, 0x0622	; 0x800622 <twdrbuffer>
     67a:	69 e0       	ldi	r22, 0x09	; 9
     67c:	cf 3f       	cpi	r28, 0xFF	; 255
     67e:	61 f4       	brne	.+24     	; 0x698 <__vector_36+0x1a4>
     680:	89 e2       	ldi	r24, 0x29	; 41
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 3c 01 	call	0x278	; 0x278 <write_lcd>
     688:	69 e0       	ldi	r22, 0x09	; 9
     68a:	83 e1       	ldi	r24, 0x13	; 19
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 3c 01 	call	0x278	; 0x278 <write_lcd>
     692:	c0 93 07 03 	sts	0x0307, r28	; 0x800307 <display>
     696:	bb c0       	rjmp	.+374    	; 0x80e <__vector_36+0x31a>
     698:	88 e2       	ldi	r24, 0x28	; 40
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 3c 01 	call	0x278	; 0x278 <write_lcd>
     6a0:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <display>
     6a4:	b4 c0       	rjmp	.+360    	; 0x80e <__vector_36+0x31a>
      else if (commandbyte == 0x99 ) {displaychange = 1; if (twdrbuffer == 0xFF) {write_lcd(0x023,9);} else {write_lcd(0x022,9); }}  // display white / black
     6a6:	89 39       	cpi	r24, 0x99	; 153
     6a8:	81 f4       	brne	.+32     	; 0x6ca <__vector_36+0x1d6>
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <displaychange>
     6b0:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <twdrbuffer>
     6b4:	69 e0       	ldi	r22, 0x09	; 9
     6b6:	8f 3f       	cpi	r24, 0xFF	; 255
     6b8:	19 f4       	brne	.+6      	; 0x6c0 <__vector_36+0x1cc>
     6ba:	83 e2       	ldi	r24, 0x23	; 35
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <__vector_36+0x1d0>
     6c0:	82 e2       	ldi	r24, 0x22	; 34
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	0e 94 3c 01 	call	0x278	; 0x278 <write_lcd>
     6c8:	a2 c0       	rjmp	.+324    	; 0x80e <__vector_36+0x31a>
      else if (commandbyte == 0x8D ) {if (twdrbuffer == 0xFF) {PORTC |= _BV(PC6);} else {PORTC &= ~_BV(PC6); }}  //set Relais 1
     6ca:	8d 38       	cpi	r24, 0x8D	; 141
     6cc:	41 f4       	brne	.+16     	; 0x6de <__vector_36+0x1ea>
     6ce:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <twdrbuffer>
     6d2:	8f 3f       	cpi	r24, 0xFF	; 255
     6d4:	11 f4       	brne	.+4      	; 0x6da <__vector_36+0x1e6>
     6d6:	46 9a       	sbi	0x08, 6	; 8
     6d8:	9a c0       	rjmp	.+308    	; 0x80e <__vector_36+0x31a>
     6da:	46 98       	cbi	0x08, 6	; 8
     6dc:	98 c0       	rjmp	.+304    	; 0x80e <__vector_36+0x31a>
      else if (commandbyte == 0x8E ) {if (twdrbuffer == 0xFF) {PORTD |= _BV(PD7);} else {PORTD &= ~_BV(PD7); }}  //set Relais 2
     6de:	8e 38       	cpi	r24, 0x8E	; 142
     6e0:	41 f4       	brne	.+16     	; 0x6f2 <__vector_36+0x1fe>
     6e2:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <twdrbuffer>
     6e6:	8f 3f       	cpi	r24, 0xFF	; 255
     6e8:	11 f4       	brne	.+4      	; 0x6ee <__vector_36+0x1fa>
     6ea:	5f 9a       	sbi	0x0b, 7	; 11
     6ec:	90 c0       	rjmp	.+288    	; 0x80e <__vector_36+0x31a>
     6ee:	5f 98       	cbi	0x0b, 7	; 11
     6f0:	8e c0       	rjmp	.+284    	; 0x80e <__vector_36+0x31a>
      else if (commandbyte == 0x8F ) {if (twdrbuffer == 0xFF) {PORTB |= _BV(PB6);} else {PORTB &= ~_BV(PB6); }} //set Relais 3
     6f2:	8f 38       	cpi	r24, 0x8F	; 143
     6f4:	41 f4       	brne	.+16     	; 0x706 <__vector_36+0x212>
     6f6:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <twdrbuffer>
     6fa:	8f 3f       	cpi	r24, 0xFF	; 255
     6fc:	11 f4       	brne	.+4      	; 0x702 <__vector_36+0x20e>
     6fe:	2e 9a       	sbi	0x05, 6	; 5
     700:	86 c0       	rjmp	.+268    	; 0x80e <__vector_36+0x31a>
     702:	2e 98       	cbi	0x05, 6	; 5
     704:	84 c0       	rjmp	.+264    	; 0x80e <__vector_36+0x31a>
      else if (commandbyte == 0x90 ) {if (twdrbuffer == 0xFF) {PORTC |= _BV(PC7);} else {PORTC &= ~_BV(PC7); }} //set D13
     706:	80 39       	cpi	r24, 0x90	; 144
     708:	41 f4       	brne	.+16     	; 0x71a <__vector_36+0x226>
     70a:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <twdrbuffer>
     70e:	8f 3f       	cpi	r24, 0xFF	; 255
     710:	11 f4       	brne	.+4      	; 0x716 <__vector_36+0x222>
     712:	47 9a       	sbi	0x08, 7	; 8
     714:	7c c0       	rjmp	.+248    	; 0x80e <__vector_36+0x31a>
     716:	47 98       	cbi	0x08, 7	; 8
     718:	7a c0       	rjmp	.+244    	; 0x80e <__vector_36+0x31a>
      else if (commandbyte == 0x91 ) {if (twdrbuffer == 0xFF) {PORTE |=  (1<<2);}  else {PORTE &= ~(1<<2);   }}     //set HWB ->Gasheater      (D13 on prototypes)
     71a:	81 39       	cpi	r24, 0x91	; 145
     71c:	41 f4       	brne	.+16     	; 0x72e <__vector_36+0x23a>
     71e:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <twdrbuffer>
     722:	8f 3f       	cpi	r24, 0xFF	; 255
     724:	11 f4       	brne	.+4      	; 0x72a <__vector_36+0x236>
     726:	72 9a       	sbi	0x0e, 2	; 14
     728:	72 c0       	rjmp	.+228    	; 0x80e <__vector_36+0x31a>
     72a:	72 98       	cbi	0x0e, 2	; 14
     72c:	70 c0       	rjmp	.+224    	; 0x80e <__vector_36+0x31a>
      else if (commandbyte == 0x92 ) {if (twdrbuffer == 0xFF) {PORTB |= _BV(PB5);} else if (twdrbuffer == 0x01) {PORTB |= _BV(PB5); twdrbuffer = 0x02;} else {PORTB &= ~_BV(PB5);twdrbuffer = 0x00;}}   //set Buzzer
     72e:	82 39       	cpi	r24, 0x92	; 146
     730:	89 f4       	brne	.+34     	; 0x754 <__vector_36+0x260>
     732:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <twdrbuffer>
     736:	8f 3f       	cpi	r24, 0xFF	; 255
     738:	11 f4       	brne	.+4      	; 0x73e <__vector_36+0x24a>
     73a:	2d 9a       	sbi	0x05, 5	; 5
     73c:	68 c0       	rjmp	.+208    	; 0x80e <__vector_36+0x31a>
     73e:	81 30       	cpi	r24, 0x01	; 1
     740:	29 f4       	brne	.+10     	; 0x74c <__vector_36+0x258>
     742:	2d 9a       	sbi	0x05, 5	; 5
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <twdrbuffer>
     74a:	61 c0       	rjmp	.+194    	; 0x80e <__vector_36+0x31a>
     74c:	2d 98       	cbi	0x05, 5	; 5
     74e:	10 92 22 06 	sts	0x0622, r1	; 0x800622 <twdrbuffer>
     752:	5d c0       	rjmp	.+186    	; 0x80e <__vector_36+0x31a>
      else if (commandbyte == 0x93 ) {OCR0A = twdrbuffer;fanlevel = twdrbuffer;}  //set Vent
     754:	83 39       	cpi	r24, 0x93	; 147
     756:	41 f4       	brne	.+16     	; 0x768 <__vector_36+0x274>
     758:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <twdrbuffer>
     75c:	87 bd       	out	0x27, r24	; 39
     75e:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <twdrbuffer>
     762:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <fanlevel>
     766:	53 c0       	rjmp	.+166    	; 0x80e <__vector_36+0x31a>
      else if (commandbyte == 0x94 ) {led[led_position].r = twdrbuffer;changeled = 1;}  //set r color
     768:	84 39       	cpi	r24, 0x94	; 148
     76a:	79 f4       	brne	.+30     	; 0x78a <__vector_36+0x296>
     76c:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <led_position>
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	fc 01       	movw	r30, r24
     774:	ee 0f       	add	r30, r30
     776:	ff 1f       	adc	r31, r31
     778:	8e 0f       	add	r24, r30
     77a:	9f 1f       	adc	r25, r31
     77c:	fc 01       	movw	r30, r24
     77e:	ed 5d       	subi	r30, 0xDD	; 221
     780:	fc 4f       	sbci	r31, 0xFC	; 252
     782:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <twdrbuffer>
     786:	81 83       	std	Z+1, r24	; 0x01
     788:	21 c0       	rjmp	.+66     	; 0x7cc <__vector_36+0x2d8>
      else if (commandbyte == 0x95 ) {led[led_position].g = twdrbuffer;changeled = 1;}  //set g color
     78a:	85 39       	cpi	r24, 0x95	; 149
     78c:	79 f4       	brne	.+30     	; 0x7ac <__vector_36+0x2b8>
     78e:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <led_position>
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	fc 01       	movw	r30, r24
     796:	ee 0f       	add	r30, r30
     798:	ff 1f       	adc	r31, r31
     79a:	8e 0f       	add	r24, r30
     79c:	9f 1f       	adc	r25, r31
     79e:	fc 01       	movw	r30, r24
     7a0:	ed 5d       	subi	r30, 0xDD	; 221
     7a2:	fc 4f       	sbci	r31, 0xFC	; 252
     7a4:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <twdrbuffer>
     7a8:	80 83       	st	Z, r24
     7aa:	10 c0       	rjmp	.+32     	; 0x7cc <__vector_36+0x2d8>
      else if (commandbyte == 0x96 ) {led[led_position].b = twdrbuffer;changeled = 1;}  //set b color
     7ac:	86 39       	cpi	r24, 0x96	; 150
     7ae:	91 f4       	brne	.+36     	; 0x7d4 <__vector_36+0x2e0>
     7b0:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <led_position>
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	fc 01       	movw	r30, r24
     7b8:	ee 0f       	add	r30, r30
     7ba:	ff 1f       	adc	r31, r31
     7bc:	8e 0f       	add	r24, r30
     7be:	9f 1f       	adc	r25, r31
     7c0:	fc 01       	movw	r30, r24
     7c2:	ed 5d       	subi	r30, 0xDD	; 221
     7c4:	fc 4f       	sbci	r31, 0xFC	; 252
     7c6:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <twdrbuffer>
     7ca:	82 83       	std	Z+2, r24	; 0x02
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <changeled>
     7d2:	1d c0       	rjmp	.+58     	; 0x80e <__vector_36+0x31a>
      else if (commandbyte == 0xFD ) {if (twdrbuffer == 0xFF) jumptobootloader = 1; } //jump to bootloader
     7d4:	8d 3f       	cpi	r24, 0xFD	; 253
     7d6:	41 f4       	brne	.+16     	; 0x7e8 <__vector_36+0x2f4>
     7d8:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <twdrbuffer>
     7dc:	8f 3f       	cpi	r24, 0xFF	; 255
     7de:	b9 f4       	brne	.+46     	; 0x80e <__vector_36+0x31a>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <jumptobootloader>
     7e6:	13 c0       	rjmp	.+38     	; 0x80e <__vector_36+0x31a>
      else if (commandbyte == 0xA1 ) {led_position = twdrbuffer;}
     7e8:	81 3a       	cpi	r24, 0xA1	; 161
     7ea:	29 f4       	brne	.+10     	; 0x7f6 <__vector_36+0x302>
     7ec:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <twdrbuffer>
     7f0:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <led_position>
     7f4:	0c c0       	rjmp	.+24     	; 0x80e <__vector_36+0x31a>
      else if (commandbyte == 0xA0 ) {watchdog = twdrbuffer;}
     7f6:	80 3a       	cpi	r24, 0xA0	; 160
     7f8:	29 f4       	brne	.+10     	; 0x804 <__vector_36+0x310>
     7fa:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <twdrbuffer>
     7fe:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <watchdog>
     802:	05 c0       	rjmp	.+10     	; 0x80e <__vector_36+0x31a>
      else {i2cerror++;} 
     804:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <i2cerror>
     808:	8f 5f       	subi	r24, 0xFF	; 255
     80a:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <i2cerror>


      } 
      else {i2cerror++;}

      buffer_address++;
     80e:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <buffer_address>
     812:	8f 5f       	subi	r24, 0xFF	; 255
     814:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <buffer_address>

      }
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     818:	85 ec       	ldi	r24, 0xC5	; 197
     81a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      if ((commandbyte == 0x92) & (twdrbuffer == 0x02)) {_delay_us(25); PORTB &= ~_BV(PB5);}
     81e:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <commandbyte>
     822:	82 39       	cpi	r24, 0x92	; 146
     824:	09 f0       	breq	.+2      	; 0x828 <__vector_36+0x334>
     826:	4e c1       	rjmp	.+668    	; 0xac4 <__vector_36+0x5d0>
     828:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <twdrbuffer>
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	09 f0       	breq	.+2      	; 0x832 <__vector_36+0x33e>
     830:	49 c1       	rjmp	.+658    	; 0xac4 <__vector_36+0x5d0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     832:	85 e8       	ldi	r24, 0x85	; 133
     834:	8a 95       	dec	r24
     836:	f1 f7       	brne	.-4      	; 0x834 <__vector_36+0x340>
     838:	00 00       	nop
     83a:	2d 98       	cbi	0x05, 5	; 5
     83c:	43 c1       	rjmp	.+646    	; 0xac4 <__vector_36+0x5d0>
     83e:	00 c0       	rjmp	.+0      	; 0x840 <__vector_36+0x34c>
     840:	00 c0       	rjmp	.+0      	; 0x842 <__vector_36+0x34e>
     842:	00 00       	nop
    case TW_ST_SLA_ACK: //  slave adressed
    case TW_ST_DATA_ACK:
      
      _delay_us(0.3); 

	     switch(commandbyte)  {		 
     844:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <commandbyte>
     848:	83 31       	cpi	r24, 0x13	; 19
     84a:	09 f4       	brne	.+2      	; 0x84e <__vector_36+0x35a>
     84c:	06 c1       	rjmp	.+524    	; 0xa5a <__vector_36+0x566>
     84e:	d8 f4       	brcc	.+54     	; 0x886 <__vector_36+0x392>
     850:	8c 30       	cpi	r24, 0x0C	; 12
     852:	09 f4       	brne	.+2      	; 0x856 <__vector_36+0x362>
     854:	8e c0       	rjmp	.+284    	; 0x972 <__vector_36+0x47e>
     856:	20 f4       	brcc	.+8      	; 0x860 <__vector_36+0x36c>
     858:	87 30       	cpi	r24, 0x07	; 7
     85a:	09 f4       	brne	.+2      	; 0x85e <__vector_36+0x36a>
     85c:	5f c0       	rjmp	.+190    	; 0x91c <__vector_36+0x428>
     85e:	74 c0       	rjmp	.+232    	; 0x948 <__vector_36+0x454>
     860:	8f 30       	cpi	r24, 0x0F	; 15
     862:	09 f4       	brne	.+2      	; 0x866 <__vector_36+0x372>
     864:	cc c0       	rjmp	.+408    	; 0x9fe <__vector_36+0x50a>
     866:	38 f4       	brcc	.+14     	; 0x876 <__vector_36+0x382>
     868:	8d 30       	cpi	r24, 0x0D	; 13
     86a:	09 f4       	brne	.+2      	; 0x86e <__vector_36+0x37a>
     86c:	ba c0       	rjmp	.+372    	; 0x9e2 <__vector_36+0x4ee>
     86e:	8e 30       	cpi	r24, 0x0E	; 14
     870:	09 f4       	brne	.+2      	; 0x874 <__vector_36+0x380>
     872:	be c0       	rjmp	.+380    	; 0x9f0 <__vector_36+0x4fc>
     874:	19 c1       	rjmp	.+562    	; 0xaa8 <__vector_36+0x5b4>
     876:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <buffer_address>
     87a:	81 31       	cpi	r24, 0x11	; 17
     87c:	09 f4       	brne	.+2      	; 0x880 <__vector_36+0x38c>
     87e:	cb c0       	rjmp	.+406    	; 0xa16 <__vector_36+0x522>
     880:	08 f4       	brcc	.+2      	; 0x884 <__vector_36+0x390>
     882:	c4 c0       	rjmp	.+392    	; 0xa0c <__vector_36+0x518>
     884:	da c0       	rjmp	.+436    	; 0xa3a <__vector_36+0x546>
     886:	80 32       	cpi	r24, 0x20	; 32
     888:	89 f1       	breq	.+98     	; 0x8ec <__vector_36+0x3f8>
     88a:	88 f4       	brcc	.+34     	; 0x8ae <__vector_36+0x3ba>
     88c:	86 31       	cpi	r24, 0x16	; 22
     88e:	09 f4       	brne	.+2      	; 0x892 <__vector_36+0x39e>
     890:	56 c0       	rjmp	.+172    	; 0x93e <__vector_36+0x44a>
     892:	38 f4       	brcc	.+14     	; 0x8a2 <__vector_36+0x3ae>
     894:	84 31       	cpi	r24, 0x14	; 20
     896:	09 f4       	brne	.+2      	; 0x89a <__vector_36+0x3a6>
     898:	48 c0       	rjmp	.+144    	; 0x92a <__vector_36+0x436>
     89a:	85 31       	cpi	r24, 0x15	; 21
     89c:	09 f4       	brne	.+2      	; 0x8a0 <__vector_36+0x3ac>
     89e:	4a c0       	rjmp	.+148    	; 0x934 <__vector_36+0x440>
     8a0:	03 c1       	rjmp	.+518    	; 0xaa8 <__vector_36+0x5b4>
     8a2:	87 31       	cpi	r24, 0x17	; 23
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <__vector_36+0x3b4>
     8a6:	50 c0       	rjmp	.+160    	; 0x948 <__vector_36+0x454>
     8a8:	88 31       	cpi	r24, 0x18	; 24
     8aa:	c9 f0       	breq	.+50     	; 0x8de <__vector_36+0x3ea>
     8ac:	fd c0       	rjmp	.+506    	; 0xaa8 <__vector_36+0x5b4>
     8ae:	8f 37       	cpi	r24, 0x7F	; 127
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <__vector_36+0x3c0>
     8b2:	e2 c0       	rjmp	.+452    	; 0xa78 <__vector_36+0x584>
     8b4:	30 f4       	brcc	.+12     	; 0x8c2 <__vector_36+0x3ce>
     8b6:	81 32       	cpi	r24, 0x21	; 33
     8b8:	51 f1       	breq	.+84     	; 0x90e <__vector_36+0x41a>
     8ba:	8e 37       	cpi	r24, 0x7E	; 126
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <__vector_36+0x3cc>
     8be:	d3 c0       	rjmp	.+422    	; 0xa66 <__vector_36+0x572>
     8c0:	f3 c0       	rjmp	.+486    	; 0xaa8 <__vector_36+0x5b4>
     8c2:	87 38       	cpi	r24, 0x87	; 135
     8c4:	31 f0       	breq	.+12     	; 0x8d2 <__vector_36+0x3de>
     8c6:	08 f4       	brcc	.+2      	; 0x8ca <__vector_36+0x3d6>
     8c8:	ef c0       	rjmp	.+478    	; 0xaa8 <__vector_36+0x5b4>
     8ca:	8d 58       	subi	r24, 0x8D	; 141
     8cc:	8a 30       	cpi	r24, 0x0A	; 10
     8ce:	08 f0       	brcs	.+2      	; 0x8d2 <__vector_36+0x3de>
     8d0:	eb c0       	rjmp	.+470    	; 0xaa8 <__vector_36+0x5b4>
                 case 0x91:
                 case 0x92:
                 case 0x93:
                 case 0x94:
                 case 0x95:
                 case 0x96:  { TWDR = crc;  crc = 0xFF;} break;
     8d2:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <crc>
     8d6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	15 c0       	rjmp	.+42     	; 0x908 <__vector_36+0x414>

                 case 0x18:  
                          if (buffer_address == 0)  {TWDR = display; crc = _crc8_ccitt_update(crc,TWDR);}
     8de:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <buffer_address>
     8e2:	81 11       	cpse	r24, r1
     8e4:	cf c0       	rjmp	.+414    	; 0xa84 <__vector_36+0x590>
     8e6:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <display>
     8ea:	06 c0       	rjmp	.+12     	; 0x8f8 <__vector_36+0x404>
                            break;



                 case 0x20:  
                           if (buffer_address == 0)  {TWDR = watchdog; crc = _crc8_ccitt_update(crc,TWDR);}
     8ec:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <buffer_address>
     8f0:	81 11       	cpse	r24, r1
     8f2:	c8 c0       	rjmp	.+400    	; 0xa84 <__vector_36+0x590>
     8f4:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <watchdog>
     8f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     8fc:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     900:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <crc>
     904:	0e 94 97 00 	call	0x12e	; 0x12e <_crc8_ccitt_update>
     908:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <crc>
     90c:	d0 c0       	rjmp	.+416    	; 0xaae <__vector_36+0x5ba>

                            break;


                 case 0x21:  
                           if (buffer_address == 0)  {TWDR = led_position; crc = _crc8_ccitt_update(crc,TWDR);}
     90e:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <buffer_address>
     912:	81 11       	cpse	r24, r1
     914:	b7 c0       	rjmp	.+366    	; 0xa84 <__vector_36+0x590>
     916:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <led_position>
     91a:	ee cf       	rjmp	.-36     	; 0x8f8 <__vector_36+0x404>
                      else     {TWDR = 0xFF; i2cerror++;}

                            break;

                 case 0x07:  
                           if (buffer_address == 0)  {TWDR = bllevel; crc = _crc8_ccitt_update(crc,TWDR);}
     91c:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <buffer_address>
     920:	81 11       	cpse	r24, r1
     922:	b0 c0       	rjmp	.+352    	; 0xa84 <__vector_36+0x590>
     924:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <bllevel>
     928:	e7 cf       	rjmp	.-50     	; 0x8f8 <__vector_36+0x404>
                      else     {TWDR = 0xFF; i2cerror++;}

                            break;

                 case 0x14:
                                if (buffer_address == 0)  {TWDR = led[led_position].r; crc = _crc8_ccitt_update(crc,TWDR);}  
     92a:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <buffer_address>
     92e:	81 11       	cpse	r24, r1
     930:	a9 c0       	rjmp	.+338    	; 0xa84 <__vector_36+0x590>
     932:	23 c0       	rjmp	.+70     	; 0x97a <__vector_36+0x486>
                           else if (crc_active && buffer_address == 1)  {TWDR = crc;}
                           else                           {TWDR = 0xFF;  i2cerror++;}
                           break; 
                 case 0x15:
                                if (buffer_address == 0)  {TWDR = led[led_position].g; crc = _crc8_ccitt_update(crc,TWDR);}  
     934:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <buffer_address>
     938:	81 11       	cpse	r24, r1
     93a:	a4 c0       	rjmp	.+328    	; 0xa84 <__vector_36+0x590>
     93c:	2d c0       	rjmp	.+90     	; 0x998 <__vector_36+0x4a4>
                           else if (crc_active && buffer_address == 1)  {TWDR = crc;}
                           else                           {TWDR = 0xFF;  i2cerror++;}
                           break; 

                 case 0x16: 
                                if (buffer_address == 0)  {TWDR = led[led_position].b; crc = _crc8_ccitt_update(crc,TWDR);}  
     93e:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <buffer_address>
     942:	81 11       	cpse	r24, r1
     944:	9f c0       	rjmp	.+318    	; 0xa84 <__vector_36+0x590>
     946:	37 c0       	rjmp	.+110    	; 0x9b6 <__vector_36+0x4c2>
                 case 0x08: 
                 case 0x09: 
                 case 0x0A: 
                 case 0x0B: 
                 case 0x17:      
                                 if (buffer_address == 0) {TWDR = i2cbuffer & 0xFF; crc = _crc8_ccitt_update(crc,TWDR);}
     948:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <buffer_address>
     94c:	81 11       	cpse	r24, r1
     94e:	03 c0       	rjmp	.+6      	; 0x956 <__vector_36+0x462>
     950:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <i2cbuffer>
     954:	d1 cf       	rjmp	.-94     	; 0x8f8 <__vector_36+0x404>
                            else if (buffer_address == 1) {TWDR = i2cbuffer >> 8;   crc = _crc8_ccitt_update(crc,TWDR);}
     956:	81 30       	cpi	r24, 0x01	; 1
     958:	19 f4       	brne	.+6      	; 0x960 <__vector_36+0x46c>
     95a:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <i2cbuffer+0x1>
     95e:	cc cf       	rjmp	.-104    	; 0x8f8 <__vector_36+0x404>
                            else if (crc_active && buffer_address == 2) {TWDR = crc;}
     960:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <crc_active>
     964:	99 23       	and	r25, r25
     966:	09 f4       	brne	.+2      	; 0x96a <__vector_36+0x476>
     968:	96 c0       	rjmp	.+300    	; 0xa96 <__vector_36+0x5a2>
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	09 f0       	breq	.+2      	; 0x970 <__vector_36+0x47c>
     96e:	93 c0       	rjmp	.+294    	; 0xa96 <__vector_36+0x5a2>
     970:	8f c0       	rjmp	.+286    	; 0xa90 <__vector_36+0x59c>
                            else                          {TWDR = 0xFF; i2cerror++;}
                            break; 
                           
                 case 0x0C:     
                                if (buffer_address == 0)  {TWDR = led[led_position].r; crc = _crc8_ccitt_update(crc,TWDR);}  
     972:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <buffer_address>
     976:	81 11       	cpse	r24, r1
     978:	0d c0       	rjmp	.+26     	; 0x994 <__vector_36+0x4a0>
     97a:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <led_position>
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	fc 01       	movw	r30, r24
     982:	ee 0f       	add	r30, r30
     984:	ff 1f       	adc	r31, r31
     986:	8e 0f       	add	r24, r30
     988:	9f 1f       	adc	r25, r31
     98a:	fc 01       	movw	r30, r24
     98c:	ed 5d       	subi	r30, 0xDD	; 221
     98e:	fc 4f       	sbci	r31, 0xFC	; 252
     990:	81 81       	ldd	r24, Z+1	; 0x01
     992:	b2 cf       	rjmp	.-156    	; 0x8f8 <__vector_36+0x404>
                           else if (buffer_address == 1)  {TWDR = led[led_position].g; crc = _crc8_ccitt_update(crc,TWDR);}
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	69 f4       	brne	.+26     	; 0x9b2 <__vector_36+0x4be>
     998:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <led_position>
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	fc 01       	movw	r30, r24
     9a0:	ee 0f       	add	r30, r30
     9a2:	ff 1f       	adc	r31, r31
     9a4:	8e 0f       	add	r24, r30
     9a6:	9f 1f       	adc	r25, r31
     9a8:	fc 01       	movw	r30, r24
     9aa:	ed 5d       	subi	r30, 0xDD	; 221
     9ac:	fc 4f       	sbci	r31, 0xFC	; 252
     9ae:	80 81       	ld	r24, Z
     9b0:	a3 cf       	rjmp	.-186    	; 0x8f8 <__vector_36+0x404>
                           else if (buffer_address == 2)  {TWDR = led[led_position].b; crc = _crc8_ccitt_update(crc,TWDR);}
     9b2:	82 30       	cpi	r24, 0x02	; 2
     9b4:	69 f4       	brne	.+26     	; 0x9d0 <__vector_36+0x4dc>
     9b6:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <led_position>
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	fc 01       	movw	r30, r24
     9be:	ee 0f       	add	r30, r30
     9c0:	ff 1f       	adc	r31, r31
     9c2:	8e 0f       	add	r24, r30
     9c4:	9f 1f       	adc	r25, r31
     9c6:	fc 01       	movw	r30, r24
     9c8:	ed 5d       	subi	r30, 0xDD	; 221
     9ca:	fc 4f       	sbci	r31, 0xFC	; 252
     9cc:	82 81       	ldd	r24, Z+2	; 0x02
     9ce:	94 cf       	rjmp	.-216    	; 0x8f8 <__vector_36+0x404>
                           else if (crc_active && buffer_address == 3)  {TWDR = crc;}
     9d0:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <crc_active>
     9d4:	99 23       	and	r25, r25
     9d6:	09 f4       	brne	.+2      	; 0x9da <__vector_36+0x4e6>
     9d8:	5e c0       	rjmp	.+188    	; 0xa96 <__vector_36+0x5a2>
     9da:	83 30       	cpi	r24, 0x03	; 3
     9dc:	09 f0       	breq	.+2      	; 0x9e0 <__vector_36+0x4ec>
     9de:	5b c0       	rjmp	.+182    	; 0xa96 <__vector_36+0x5a2>
     9e0:	57 c0       	rjmp	.+174    	; 0xa90 <__vector_36+0x59c>
                           break; 



                 case 0x0D:      
                                 if (buffer_address == 0) {if (bit_is_set(PINC,PC6)) {TWDR = 0xFF;} else {TWDR = 0x00;} crc = _crc8_ccitt_update(crc,TWDR);}
     9e2:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <buffer_address>
     9e6:	81 11       	cpse	r24, r1
     9e8:	4d c0       	rjmp	.+154    	; 0xa84 <__vector_36+0x590>
     9ea:	36 9b       	sbis	0x06, 6	; 6
     9ec:	2c c0       	rjmp	.+88     	; 0xa46 <__vector_36+0x552>
     9ee:	29 c0       	rjmp	.+82     	; 0xa42 <__vector_36+0x54e>
                            else if (crc_active && buffer_address == 1) {TWDR = crc;}
                            else {TWDR = 0xFF; i2cerror++;}
                            break;

                 case 0x0E:     
                                 if (buffer_address == 0) {if (bit_is_set(PIND,PD7)) {TWDR = 0xFF;} else {TWDR = 0x00;} crc = _crc8_ccitt_update(crc,TWDR);}
     9f0:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <buffer_address>
     9f4:	81 11       	cpse	r24, r1
     9f6:	46 c0       	rjmp	.+140    	; 0xa84 <__vector_36+0x590>
     9f8:	4f 9b       	sbis	0x09, 7	; 9
     9fa:	25 c0       	rjmp	.+74     	; 0xa46 <__vector_36+0x552>
     9fc:	22 c0       	rjmp	.+68     	; 0xa42 <__vector_36+0x54e>
                            else                          {TWDR = 0xFF; i2cerror++;}
                            break;


                 case 0x0F:     
                                 if (buffer_address == 0) {if (bit_is_set(PINB,PB6)) {TWDR = 0xFF;} else {TWDR = 0x00;} crc = _crc8_ccitt_update(crc,TWDR);}
     9fe:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <buffer_address>
     a02:	81 11       	cpse	r24, r1
     a04:	3f c0       	rjmp	.+126    	; 0xa84 <__vector_36+0x590>
     a06:	1e 9b       	sbis	0x03, 6	; 3
     a08:	1e c0       	rjmp	.+60     	; 0xa46 <__vector_36+0x552>
     a0a:	1b c0       	rjmp	.+54     	; 0xa42 <__vector_36+0x54e>
                            else if (crc_active && buffer_address == 1) { TWDR = crc;}
                            else                          {TWDR = 0xFF; i2cerror++;}
                            break;

                 case 0x10:  
                                 if (buffer_address == 0) {if (bit_is_set(PINC,PC7)) {TWDR = 0xFF;} else {TWDR = 0x00;} crc = _crc8_ccitt_update(crc,TWDR);}
     a0c:	91 11       	cpse	r25, r1
     a0e:	1e c0       	rjmp	.+60     	; 0xa4c <__vector_36+0x558>
     a10:	37 9b       	sbis	0x06, 7	; 6
     a12:	19 c0       	rjmp	.+50     	; 0xa46 <__vector_36+0x552>
     a14:	16 c0       	rjmp	.+44     	; 0xa42 <__vector_36+0x54e>
                            else                          {TWDR = 0xFF; i2cerror++;}
                            break;


                 case 0x11:  
                                 if (buffer_address == 0) {if (bit_is_set(PINE,PE2)) {TWDR = 0xFF;} else {TWDR = 0x00;} crc = _crc8_ccitt_update(crc,TWDR);}
     a16:	91 11       	cpse	r25, r1
     a18:	03 c0       	rjmp	.+6      	; 0xa20 <__vector_36+0x52c>
     a1a:	62 9b       	sbis	0x0c, 2	; 12
     a1c:	14 c0       	rjmp	.+40     	; 0xa46 <__vector_36+0x552>
     a1e:	11 c0       	rjmp	.+34     	; 0xa42 <__vector_36+0x54e>
                            else if (crc_active && buffer_address == 1) {TWDR = crc;}
     a20:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <crc_active>
     a24:	88 23       	and	r24, r24
     a26:	11 f0       	breq	.+4      	; 0xa2c <__vector_36+0x538>
     a28:	91 30       	cpi	r25, 0x01	; 1
     a2a:	91 f1       	breq	.+100    	; 0xa90 <__vector_36+0x59c>
                            else                          {TWDR = 0xFF; buffer_address = 0xFE; i2cerror++;}
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     a32:	8e ef       	ldi	r24, 0xFE	; 254
     a34:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <buffer_address>
     a38:	31 c0       	rjmp	.+98     	; 0xa9c <__vector_36+0x5a8>
                            break;


                 case 0x12:  
                                 if (buffer_address == 0)  {if (bit_is_set(PINB,PB5)) {TWDR = 0xFF;} else {TWDR = 0x00;} crc = _crc8_ccitt_update(crc,TWDR);}
     a3a:	91 11       	cpse	r25, r1
     a3c:	07 c0       	rjmp	.+14     	; 0xa4c <__vector_36+0x558>
     a3e:	1d 9b       	sbis	0x03, 5	; 3
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <__vector_36+0x552>
     a42:	8f ef       	ldi	r24, 0xFF	; 255
     a44:	59 cf       	rjmp	.-334    	; 0x8f8 <__vector_36+0x404>
     a46:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     a4a:	58 cf       	rjmp	.-336    	; 0x8fc <__vector_36+0x408>
                            else if (crc_active && buffer_address == 1) {TWDR = crc;}
     a4c:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <crc_active>
     a50:	88 23       	and	r24, r24
     a52:	09 f1       	breq	.+66     	; 0xa96 <__vector_36+0x5a2>
     a54:	91 30       	cpi	r25, 0x01	; 1
     a56:	f9 f4       	brne	.+62     	; 0xa96 <__vector_36+0x5a2>
     a58:	1b c0       	rjmp	.+54     	; 0xa90 <__vector_36+0x59c>
                            else                          {TWDR = 0xFF; i2cerror++;}
                            break;


                 case 0x13:  
                                 if (buffer_address == 0) {TWDR = OCR0A; crc = _crc8_ccitt_update(crc,TWDR);}
     a5a:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <buffer_address>
     a5e:	81 11       	cpse	r24, r1
     a60:	11 c0       	rjmp	.+34     	; 0xa84 <__vector_36+0x590>
     a62:	87 b5       	in	r24, 0x27	; 39
     a64:	49 cf       	rjmp	.-366    	; 0x8f8 <__vector_36+0x404>
                            break;



                 case 0x7E:  
                                 if (buffer_address == 0) {TWDR = crc_active; crc = _crc8_ccitt_update(crc,TWDR);}
     a66:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <buffer_address>
     a6a:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <crc_active>
     a6e:	81 11       	cpse	r24, r1
     a70:	0b c0       	rjmp	.+22     	; 0xa88 <__vector_36+0x594>
     a72:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     a76:	42 cf       	rjmp	.-380    	; 0x8fc <__vector_36+0x408>
                            else                          {TWDR = 0xFF; i2cerror++;}
                            break;


                 case 0x7F:  
                                 if (buffer_address == 0) {TWDR = FW_VERSION; crc = _crc8_ccitt_update(crc,TWDR);}
     a78:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <buffer_address>
     a7c:	81 11       	cpse	r24, r1
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <__vector_36+0x590>
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	3a cf       	rjmp	.-396    	; 0x8f8 <__vector_36+0x404>
                            else if (crc_active && buffer_address == 1) {TWDR = crc;}
     a84:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <crc_active>
     a88:	99 23       	and	r25, r25
     a8a:	29 f0       	breq	.+10     	; 0xa96 <__vector_36+0x5a2>
     a8c:	81 30       	cpi	r24, 0x01	; 1
     a8e:	19 f4       	brne	.+6      	; 0xa96 <__vector_36+0x5a2>
     a90:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <crc>
     a94:	0a c0       	rjmp	.+20     	; 0xaaa <__vector_36+0x5b6>
                            else                          {TWDR = 0xFF; i2cerror++;}
     a96:	8f ef       	ldi	r24, 0xFF	; 255
     a98:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     a9c:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <i2cerror>
     aa0:	8f 5f       	subi	r24, 0xFF	; 255
     aa2:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <i2cerror>
     aa6:	03 c0       	rjmp	.+6      	; 0xaae <__vector_36+0x5ba>





                 default: TWDR = 0xFF; 
     aa8:	8f ef       	ldi	r24, 0xFF	; 255
     aaa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		 }	 



      
      buffer_address++;
     aae:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <buffer_address>
     ab2:	8f 5f       	subi	r24, 0xFF	; 255
     ab4:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <buffer_address>
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <__vector_36+0x5ca>
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);        
      break;                                 
   
    case TW_BUS_ERROR:   
     TWCR =   (1<<TWSTO)|(1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     aba:	85 ed       	ldi	r24, 0xD5	; 213
     abc:	01 c0       	rjmp	.+2      	; 0xac0 <__vector_36+0x5cc>


    //case TW_SR_STOP:  TWCR |= (1<<TWINT)|(1<<TWEA)|(1<<TWEN);  break;

    default:         
      TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)| (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|  (0<<TWWC);   
     abe:	85 ec       	ldi	r24, 0xC5	; 197
     ac0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      
  }



}
     ac4:	ff 91       	pop	r31
     ac6:	ef 91       	pop	r30
     ac8:	cf 91       	pop	r28
     aca:	bf 91       	pop	r27
     acc:	af 91       	pop	r26
     ace:	9f 91       	pop	r25
     ad0:	8f 91       	pop	r24
     ad2:	7f 91       	pop	r23
     ad4:	6f 91       	pop	r22
     ad6:	5f 91       	pop	r21
     ad8:	4f 91       	pop	r20
     ada:	3f 91       	pop	r19
     adc:	2f 91       	pop	r18
     ade:	0f 90       	pop	r0
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	0f 90       	pop	r0
     ae4:	1f 90       	pop	r1
     ae6:	18 95       	reti

00000ae8 <setup>:


void setup(void)
{
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
   DDRF = 0b00000000;
     aec:	10 ba       	out	0x10, r1	; 16
   DDRD = 0b10111000;
     aee:	88 eb       	ldi	r24, 0xB8	; 184
     af0:	8a b9       	out	0x0a, r24	; 10
   PORTD= 0b00000000;
     af2:	1b b8       	out	0x0b, r1	; 11
   DDRE = 0b00000000; 
     af4:	1d b8       	out	0x0d, r1	; 13
   DDRE |= (1<<2);   // be carefull with hwb, check if its connected to GND via 10k (prototypes!)
     af6:	6a 9a       	sbi	0x0d, 2	; 13
   DDRB = 0b11100110;
     af8:	86 ee       	ldi	r24, 0xE6	; 230
     afa:	84 b9       	out	0x04, r24	; 4
   DDRC = 0b11000000;
     afc:	80 ec       	ldi	r24, 0xC0	; 192
     afe:	87 b9       	out	0x07, r24	; 7
   OCR0A = 0;           //    start value for FAN  0 / 255  (-> p-channel so inverted)       0x00 is ON  0xFF is OFF
     b00:	17 bc       	out	0x27, r1	; 39
   TCCR0B  =  0b00000001;
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	85 bd       	out	0x25, r24	; 37
   TCCR0A  =  0b10000011;            // 8bit  62khz
     b06:	83 e8       	ldi	r24, 0x83	; 131
     b08:	84 bd       	out	0x24, r24	; 36
   TIMSK0 |= (1 << TOIE0);            // init interrupt for timer0 overflow
     b0a:	ee e6       	ldi	r30, 0x6E	; 110
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	80 81       	ld	r24, Z
     b10:	81 60       	ori	r24, 0x01	; 1
     b12:	80 83       	st	Z, r24
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	80 e8       	ldi	r24, 0x80	; 128
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     b20:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     b24:	0f be       	out	0x3f, r0	; 63
   clock_prescale_set(clock_div_1);
   I2C_init(I2C_ADDR);
     b26:	8a e2       	ldi	r24, 0x2A	; 42
     b28:	0e 94 3e 02 	call	0x47c	; 0x47c <I2C_init>
   PCICR |= _BV(PCIE0);              // enable pin change interrupt for PB0 (rpm)
     b2c:	e8 e6       	ldi	r30, 0x68	; 104
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	80 81       	ld	r24, Z
     b32:	81 60       	ori	r24, 0x01	; 1
     b34:	80 83       	st	Z, r24
   PCMSK0 |= (1 << PCINT4);
     b36:	eb e6       	ldi	r30, 0x6B	; 107
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 81       	ld	r24, Z
     b3c:	80 61       	ori	r24, 0x10	; 16
     b3e:	80 83       	st	Z, r24
   sei();
     b40:	78 94       	sei

   led[0].r = 255;
     b42:	c3 e2       	ldi	r28, 0x23	; 35
     b44:	d3 e0       	ldi	r29, 0x03	; 3
     b46:	8f ef       	ldi	r24, 0xFF	; 255
     b48:	89 83       	std	Y+1, r24	; 0x01
   led[0].g = 255;
     b4a:	88 83       	st	Y, r24
   led[0].b = 255;
     b4c:	8a 83       	std	Y+2, r24	; 0x02
 
   led[1].r = 255;
     b4e:	8c 83       	std	Y+4, r24	; 0x04
   led[1].g = 255;
     b50:	8b 83       	std	Y+3, r24	; 0x03
   led[1].b = 255;
     b52:	8d 83       	std	Y+5, r24	; 0x05

   ws2812_setleds(led,2);
     b54:	62 e0       	ldi	r22, 0x02	; 2
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	ce 01       	movw	r24, r28
     b5a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ws2812_setleds>

   setup_lcd();
     b5e:	0e 94 66 01 	call	0x2cc	; 0x2cc <setup_lcd>

   init_backlight();
     b62:	0e 94 1c 01 	call	0x238	; 0x238 <init_backlight>


   led[0].r = 0;
     b66:	19 82       	std	Y+1, r1	; 0x01
   led[0].g = 0;
     b68:	18 82       	st	Y, r1
   led[0].b = 0;
     b6a:	1a 82       	std	Y+2, r1	; 0x02

 
   led[1].r = 0;
     b6c:	1c 82       	std	Y+4, r1	; 0x04
   led[1].g = 0;
     b6e:	1b 82       	std	Y+3, r1	; 0x03
   led[1].b = 0;
     b70:	1d 82       	std	Y+5, r1	; 0x05

   ws2812_setleds(led,2);
     b72:	62 e0       	ldi	r22, 0x02	; 2
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	ce 01       	movw	r24, r28
     b78:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ws2812_setleds>


   OCR0A = 210;
     b7c:	82 ed       	ldi	r24, 0xD2	; 210
     b7e:	87 bd       	out	0x27, r24	; 39
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     b80:	99 e2       	ldi	r25, 0x29	; 41
     b82:	88 e1       	ldi	r24, 0x18	; 24
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	a8 95       	wdr
     b8a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   wdt_enable(WDTO_8S);
   
}
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	08 95       	ret

00000b9a <main>:


int main(void)
{
  uint8_t adcselect = 0;
  setup();
     b9a:	0e 94 74 05 	call	0xae8	; 0xae8 <setup>
}


int main(void)
{
  uint8_t adcselect = 0;
     b9e:	10 e0       	ldi	r17, 0x00	; 0

  while(1) {  


  if (jumptobootloader > 0) {
   TWCR =   (1<<TWSTO)|(1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (0<<TWEN);
     ba0:	01 ed       	ldi	r16, 0xD1	; 209

  if (watchdog == 0x01) {

  if (SCL_LINE) {watchi2c++;} else {watchi2c = 0;}

  if (watchi2c > 1000) {led[0].r=255; led[0].g=255;led[0].b=0; ws2812_setleds(led,1);}
     ba2:	ff 24       	eor	r15, r15
     ba4:	fa 94       	dec	r15
  sei();
  }                    

  wdt_reset();	
  if (isrtimer > 31250)   // routine for calculate fan speed - timer is 64khz
  {rpm = fanspin * 30;    // 2 signals each turn        
     ba6:	3e e1       	ldi	r19, 0x1E	; 30
     ba8:	e3 2e       	mov	r14, r19
 
   default: {a7 = read_analog(9);  //read A7 more frequently 
           if (a7 > a7max) a7max = a7;
           if (a7 < a7min) a7min = a7;
           a7count++;
           if (a7count > 60) {a7avg = (a7max - ((a7max +  a7min)/ 2)) * 0.707 ; a7min = 1024; a7max = 0; a7count = 0;} 
     baa:	c0 e0       	ldi	r28, 0x00	; 0
     bac:	d4 e0       	ldi	r29, 0x04	; 4
  setup();

  while(1) {  


  if (jumptobootloader > 0) {
     bae:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <jumptobootloader>
     bb2:	88 23       	and	r24, r24
     bb4:	21 f0       	breq	.+8      	; 0xbbe <main+0x24>
   TWCR =   (1<<TWSTO)|(1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (0<<TWEN);
     bb6:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
   asm volatile("jmp 0x7C00");
     bba:	0c 94 00 3e 	jmp	0x7c00	; 0x7c00 <__data_load_end+0x66a2>
  }

 

  if (watchdog == 0x01) {
     bbe:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <watchdog>
     bc2:	81 30       	cpi	r24, 0x01	; 1
     bc4:	19 f5       	brne	.+70     	; 0xc0c <main+0x72>

  if (SCL_LINE) {watchi2c++;} else {watchi2c = 0;}
     bc6:	48 9b       	sbis	0x09, 0	; 9
     bc8:	0a c0       	rjmp	.+20     	; 0xbde <main+0x44>
     bca:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <__data_end>
     bce:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <__data_end+0x1>
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <__data_end+0x1>
     bd8:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <__data_end>
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <main+0x4c>
     bde:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <__data_end+0x1>
     be2:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <__data_end>

  if (watchi2c > 1000) {led[0].r=255; led[0].g=255;led[0].b=0; ws2812_setleds(led,1);}
     be6:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <__data_end>
     bea:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <__data_end+0x1>
     bee:	89 3e       	cpi	r24, 0xE9	; 233
     bf0:	93 40       	sbci	r25, 0x03	; 3
     bf2:	60 f0       	brcs	.+24     	; 0xc0c <main+0x72>
     bf4:	f0 92 24 03 	sts	0x0324, r15	; 0x800324 <led+0x1>
     bf8:	f0 92 23 03 	sts	0x0323, r15	; 0x800323 <led>
     bfc:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <led+0x2>
     c00:	61 e0       	ldi	r22, 0x01	; 1
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	83 e2       	ldi	r24, 0x23	; 35
     c06:	93 e0       	ldi	r25, 0x03	; 3
     c08:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ws2812_setleds>
  }

  if (!SDA_LINE) {i2cerror++;}
     c0c:	49 99       	sbic	0x09, 1	; 9
     c0e:	05 c0       	rjmp	.+10     	; 0xc1a <main+0x80>
     c10:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <i2cerror>
     c14:	8f 5f       	subi	r24, 0xFF	; 255
     c16:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <i2cerror>
  
  if (i2cerror > 200) {
     c1a:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <i2cerror>
     c1e:	89 3c       	cpi	r24, 0xC9	; 201
     c20:	40 f0       	brcs	.+16     	; 0xc32 <main+0x98>
  TWCR =   (1<<TWSTO)|(1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (0<<TWEN); 
     c22:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  I2C_init(I2C_ADDR); 
     c26:	8a e2       	ldi	r24, 0x2A	; 42
     c28:	0e 94 3e 02 	call	0x47c	; 0x47c <I2C_init>
  i2cerror = 0;
     c2c:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <i2cerror>
  sei();
     c30:	78 94       	sei
  }                    

  wdt_reset();	
     c32:	a8 95       	wdr
  if (isrtimer > 31250)   // routine for calculate fan speed - timer is 64khz
     c34:	80 91 32 06 	lds	r24, 0x0632	; 0x800632 <isrtimer>
     c38:	90 91 33 06 	lds	r25, 0x0633	; 0x800633 <isrtimer+0x1>
     c3c:	83 31       	cpi	r24, 0x13	; 19
     c3e:	9a 47       	sbci	r25, 0x7A	; 122
     c40:	48 f1       	brcs	.+82     	; 0xc94 <main+0xfa>
  {rpm = fanspin * 30;    // 2 signals each turn        
     c42:	20 91 20 06 	lds	r18, 0x0620	; 0x800620 <fanspin>
     c46:	30 91 21 06 	lds	r19, 0x0621	; 0x800621 <fanspin+0x1>
     c4a:	e2 9e       	mul	r14, r18
     c4c:	c0 01       	movw	r24, r0
     c4e:	e3 9e       	mul	r14, r19
     c50:	90 0d       	add	r25, r0
     c52:	11 24       	eor	r1, r1
     c54:	90 93 24 06 	sts	0x0624, r25	; 0x800624 <rpm+0x1>
     c58:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <rpm>
  fanspin = 0;
     c5c:	10 92 21 06 	sts	0x0621, r1	; 0x800621 <fanspin+0x1>
     c60:	10 92 20 06 	sts	0x0620, r1	; 0x800620 <fanspin>
  isrtimer = 0;
     c64:	10 92 33 06 	sts	0x0633, r1	; 0x800633 <isrtimer+0x1>
     c68:	10 92 32 06 	sts	0x0632, r1	; 0x800632 <isrtimer>
  if (fanlevel == 254) { //fan minimal auto
     c6c:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <fanlevel>
     c70:	2e 3f       	cpi	r18, 0xFE	; 254
     c72:	81 f4       	brne	.+32     	; 0xc94 <main+0xfa>
  if (rpm > 1950) {OCR0A++;}
     c74:	8f 39       	cpi	r24, 0x9F	; 159
     c76:	97 40       	sbci	r25, 0x07	; 7
     c78:	18 f0       	brcs	.+6      	; 0xc80 <main+0xe6>
     c7a:	87 b5       	in	r24, 0x27	; 39
     c7c:	8f 5f       	subi	r24, 0xFF	; 255
     c7e:	87 bd       	out	0x27, r24	; 39
  if (rpm < 1800) {OCR0A--;}
     c80:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <rpm>
     c84:	90 91 24 06 	lds	r25, 0x0624	; 0x800624 <rpm+0x1>
     c88:	88 30       	cpi	r24, 0x08	; 8
     c8a:	97 40       	sbci	r25, 0x07	; 7
     c8c:	18 f4       	brcc	.+6      	; 0xc94 <main+0xfa>
     c8e:	87 b5       	in	r24, 0x27	; 39
     c90:	81 50       	subi	r24, 0x01	; 1
     c92:	87 bd       	out	0x27, r24	; 39
  }
  }
  if (displaychange) {init_backlight(); displaychange = 0;}
     c94:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <displaychange>
     c98:	88 23       	and	r24, r24
     c9a:	21 f0       	breq	.+8      	; 0xca4 <main+0x10a>
     c9c:	0e 94 1c 01 	call	0x238	; 0x238 <init_backlight>
     ca0:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <displaychange>

  if (changeled)  {
     ca4:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <changeled>
     ca8:	88 23       	and	r24, r24
     caa:	59 f0       	breq	.+22     	; 0xcc2 <main+0x128>
      ws2812_setleds(led,led_position+1);
     cac:	60 91 14 03 	lds	r22, 0x0314	; 0x800314 <led_position>
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	6f 5f       	subi	r22, 0xFF	; 255
     cb4:	7f 4f       	sbci	r23, 0xFF	; 255
     cb6:	83 e2       	ldi	r24, 0x23	; 35
     cb8:	93 e0       	ldi	r25, 0x03	; 3
     cba:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ws2812_setleds>
      changeled = 0;
     cbe:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <changeled>
                     }

  if (newbllevel != bllevel  && 0 <= newbllevel && newbllevel < 32) {
     cc2:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <newbllevel>
     cc6:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <bllevel>
     cca:	98 17       	cp	r25, r24
     ccc:	89 f0       	breq	.+34     	; 0xcf0 <main+0x156>
     cce:	90 32       	cpi	r25, 0x20	; 32
     cd0:	78 f4       	brcc	.+30     	; 0xcf0 <main+0x156>

  if (newbllevel < bllevel) {bllevel--;}   else {bllevel++;}
     cd2:	98 17       	cp	r25, r24
     cd4:	10 f4       	brcc	.+4      	; 0xcda <main+0x140>
     cd6:	81 50       	subi	r24, 0x01	; 1
     cd8:	01 c0       	rjmp	.+2      	; 0xcdc <main+0x142>
     cda:	8f 5f       	subi	r24, 0xFF	; 255
     cdc:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <bllevel>

  write_backlight(0b01011000);
     ce0:	88 e5       	ldi	r24, 0x58	; 88
     ce2:	0e 94 df 00 	call	0x1be	; 0x1be <write_backlight>
  write_backlight(0b00011111 & bllevel);
     ce6:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <bllevel>
     cea:	8f 71       	andi	r24, 0x1F	; 31
     cec:	0e 94 df 00 	call	0x1be	; 0x1be <write_backlight>
  }
  



  if (adcselect < 10) {adcselect++;} else {adcselect = 0;}
     cf0:	1a 30       	cpi	r17, 0x0A	; 10
     cf2:	68 f4       	brcc	.+26     	; 0xd0e <main+0x174>
     cf4:	1f 5f       	subi	r17, 0xFF	; 255
  
  switch(adcselect)
     cf6:	81 2f       	mov	r24, r17
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	fc 01       	movw	r30, r24
     cfc:	31 97       	sbiw	r30, 0x01	; 1
     cfe:	ea 30       	cpi	r30, 0x0A	; 10
     d00:	f1 05       	cpc	r31, r1
     d02:	08 f0       	brcs	.+2      	; 0xd06 <main+0x16c>
     d04:	43 c0       	rjmp	.+134    	; 0xd8c <main+0x1f2>
     d06:	e2 59       	subi	r30, 0x92	; 146
     d08:	ff 4f       	sbci	r31, 0xFF	; 255
     d0a:	0c 94 5d 08 	jmp	0x10ba	; 0x10ba <__tablejump2__>
  {
   case 0: a0 = read_analog(7);  break;
     d0e:	87 e0       	ldi	r24, 0x07	; 7
     d10:	0e 94 8a 01 	call	0x314	; 0x314 <read_analog>
     d14:	90 93 35 06 	sts	0x0635, r25	; 0x800635 <a0+0x1>
     d18:	80 93 34 06 	sts	0x0634, r24	; 0x800634 <a0>
     d1c:	10 e0       	ldi	r17, 0x00	; 0
     d1e:	47 cf       	rjmp	.-370    	; 0xbae <main+0x14>
   case 1: a1 = read_analog(6);  break;
     d20:	86 e0       	ldi	r24, 0x06	; 6
     d22:	0e 94 8a 01 	call	0x314	; 0x314 <read_analog>
     d26:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <a1+0x1>
     d2a:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <a1>
     d2e:	3f cf       	rjmp	.-386    	; 0xbae <main+0x14>
   case 2: a2 = read_analog(5);  break;
     d30:	85 e0       	ldi	r24, 0x05	; 5
     d32:	0e 94 8a 01 	call	0x314	; 0x314 <read_analog>
     d36:	90 93 30 06 	sts	0x0630, r25	; 0x800630 <a2+0x1>
     d3a:	80 93 2f 06 	sts	0x062F, r24	; 0x80062f <a2>
     d3e:	37 cf       	rjmp	.-402    	; 0xbae <main+0x14>
   case 4: a3 = read_analog(4);  break; 
     d40:	84 e0       	ldi	r24, 0x04	; 4
     d42:	0e 94 8a 01 	call	0x314	; 0x314 <read_analog>
     d46:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <a3+0x1>
     d4a:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <a3>
     d4e:	2f cf       	rjmp	.-418    	; 0xbae <main+0x14>
   case 5: a4 = read_analog(1);  break; 
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	0e 94 8a 01 	call	0x314	; 0x314 <read_analog>
     d56:	90 93 37 06 	sts	0x0637, r25	; 0x800637 <a4+0x1>
     d5a:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <a4>
     d5e:	27 cf       	rjmp	.-434    	; 0xbae <main+0x14>
   case 7: a5 = read_analog(0);  break;
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	0e 94 8a 01 	call	0x314	; 0x314 <read_analog>
     d66:	90 93 2c 06 	sts	0x062C, r25	; 0x80062c <a5+0x1>
     d6a:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <a5>
     d6e:	1f cf       	rjmp	.-450    	; 0xbae <main+0x14>
   case 8: vcc = readVcc();  break;
     d70:	0e 94 c1 01 	call	0x382	; 0x382 <readVcc>
     d74:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <vcc+0x1>
     d78:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <vcc>
     d7c:	18 cf       	rjmp	.-464    	; 0xbae <main+0x14>
   case 10: temp = GetTemp();   break;
     d7e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <GetTemp>
     d82:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <temp+0x1>
     d86:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <temp>
     d8a:	11 cf       	rjmp	.-478    	; 0xbae <main+0x14>

 
   default: {a7 = read_analog(9);  //read A7 more frequently 
     d8c:	89 e0       	ldi	r24, 0x09	; 9
     d8e:	0e 94 8a 01 	call	0x314	; 0x314 <read_analog>
     d92:	90 93 26 06 	sts	0x0626, r25	; 0x800626 <a7+0x1>
     d96:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <a7>
           if (a7 > a7max) a7max = a7;
     d9a:	20 91 29 06 	lds	r18, 0x0629	; 0x800629 <a7max>
     d9e:	30 91 2a 06 	lds	r19, 0x062A	; 0x80062a <a7max+0x1>
     da2:	28 17       	cp	r18, r24
     da4:	39 07       	cpc	r19, r25
     da6:	20 f4       	brcc	.+8      	; 0xdb0 <main+0x216>
     da8:	90 93 2a 06 	sts	0x062A, r25	; 0x80062a <a7max+0x1>
     dac:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <a7max>
           if (a7 < a7min) a7min = a7;
     db0:	20 91 2d 06 	lds	r18, 0x062D	; 0x80062d <a7min>
     db4:	30 91 2e 06 	lds	r19, 0x062E	; 0x80062e <a7min+0x1>
     db8:	82 17       	cp	r24, r18
     dba:	93 07       	cpc	r25, r19
     dbc:	20 f4       	brcc	.+8      	; 0xdc6 <main+0x22c>
     dbe:	90 93 2e 06 	sts	0x062E, r25	; 0x80062e <a7min+0x1>
     dc2:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <a7min>
           a7count++;
     dc6:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <a7count>
     dca:	8f 5f       	subi	r24, 0xFF	; 255
     dcc:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <a7count>
           if (a7count > 60) {a7avg = (a7max - ((a7max +  a7min)/ 2)) * 0.707 ; a7min = 1024; a7max = 0; a7count = 0;} 
     dd0:	8d 33       	cpi	r24, 0x3D	; 61
     dd2:	08 f4       	brcc	.+2      	; 0xdd6 <main+0x23c>
     dd4:	ec ce       	rjmp	.-552    	; 0xbae <main+0x14>
     dd6:	60 91 29 06 	lds	r22, 0x0629	; 0x800629 <a7max>
     dda:	70 91 2a 06 	lds	r23, 0x062A	; 0x80062a <a7max+0x1>
     dde:	80 91 2d 06 	lds	r24, 0x062D	; 0x80062d <a7min>
     de2:	90 91 2e 06 	lds	r25, 0x062E	; 0x80062e <a7min+0x1>
     de6:	86 0f       	add	r24, r22
     de8:	97 1f       	adc	r25, r23
     dea:	96 95       	lsr	r25
     dec:	87 95       	ror	r24
     dee:	68 1b       	sub	r22, r24
     df0:	79 0b       	sbc	r23, r25
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 43 07 	call	0xe86	; 0xe86 <__floatunsisf>
     dfa:	24 ef       	ldi	r18, 0xF4	; 244
     dfc:	3d ef       	ldi	r19, 0xFD	; 253
     dfe:	44 e3       	ldi	r20, 0x34	; 52
     e00:	5f e3       	ldi	r21, 0x3F	; 63
     e02:	0e 94 a9 07 	call	0xf52	; 0xf52 <__mulsf3>
     e06:	0e 94 14 07 	call	0xe28	; 0xe28 <__fixunssfsi>
     e0a:	70 93 28 06 	sts	0x0628, r23	; 0x800628 <a7avg+0x1>
     e0e:	60 93 27 06 	sts	0x0627, r22	; 0x800627 <a7avg>
     e12:	d0 93 2e 06 	sts	0x062E, r29	; 0x80062e <a7min+0x1>
     e16:	c0 93 2d 06 	sts	0x062D, r28	; 0x80062d <a7min>
     e1a:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <a7max+0x1>
     e1e:	10 92 29 06 	sts	0x0629, r1	; 0x800629 <a7max>
     e22:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <a7count>
     e26:	c3 ce       	rjmp	.-634    	; 0xbae <main+0x14>

00000e28 <__fixunssfsi>:
     e28:	0e 94 88 07 	call	0xf10	; 0xf10 <__fp_splitA>
     e2c:	88 f0       	brcs	.+34     	; 0xe50 <__fixunssfsi+0x28>
     e2e:	9f 57       	subi	r25, 0x7F	; 127
     e30:	98 f0       	brcs	.+38     	; 0xe58 <__fixunssfsi+0x30>
     e32:	b9 2f       	mov	r27, r25
     e34:	99 27       	eor	r25, r25
     e36:	b7 51       	subi	r27, 0x17	; 23
     e38:	b0 f0       	brcs	.+44     	; 0xe66 <__fixunssfsi+0x3e>
     e3a:	e1 f0       	breq	.+56     	; 0xe74 <__fixunssfsi+0x4c>
     e3c:	66 0f       	add	r22, r22
     e3e:	77 1f       	adc	r23, r23
     e40:	88 1f       	adc	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	1a f0       	brmi	.+6      	; 0xe4c <__fixunssfsi+0x24>
     e46:	ba 95       	dec	r27
     e48:	c9 f7       	brne	.-14     	; 0xe3c <__fixunssfsi+0x14>
     e4a:	14 c0       	rjmp	.+40     	; 0xe74 <__fixunssfsi+0x4c>
     e4c:	b1 30       	cpi	r27, 0x01	; 1
     e4e:	91 f0       	breq	.+36     	; 0xe74 <__fixunssfsi+0x4c>
     e50:	0e 94 a2 07 	call	0xf44	; 0xf44 <__fp_zero>
     e54:	b1 e0       	ldi	r27, 0x01	; 1
     e56:	08 95       	ret
     e58:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_zero>
     e5c:	67 2f       	mov	r22, r23
     e5e:	78 2f       	mov	r23, r24
     e60:	88 27       	eor	r24, r24
     e62:	b8 5f       	subi	r27, 0xF8	; 248
     e64:	39 f0       	breq	.+14     	; 0xe74 <__fixunssfsi+0x4c>
     e66:	b9 3f       	cpi	r27, 0xF9	; 249
     e68:	cc f3       	brlt	.-14     	; 0xe5c <__fixunssfsi+0x34>
     e6a:	86 95       	lsr	r24
     e6c:	77 95       	ror	r23
     e6e:	67 95       	ror	r22
     e70:	b3 95       	inc	r27
     e72:	d9 f7       	brne	.-10     	; 0xe6a <__fixunssfsi+0x42>
     e74:	3e f4       	brtc	.+14     	; 0xe84 <__fixunssfsi+0x5c>
     e76:	90 95       	com	r25
     e78:	80 95       	com	r24
     e7a:	70 95       	com	r23
     e7c:	61 95       	neg	r22
     e7e:	7f 4f       	sbci	r23, 0xFF	; 255
     e80:	8f 4f       	sbci	r24, 0xFF	; 255
     e82:	9f 4f       	sbci	r25, 0xFF	; 255
     e84:	08 95       	ret

00000e86 <__floatunsisf>:
     e86:	e8 94       	clt
     e88:	09 c0       	rjmp	.+18     	; 0xe9c <__floatsisf+0x12>

00000e8a <__floatsisf>:
     e8a:	97 fb       	bst	r25, 7
     e8c:	3e f4       	brtc	.+14     	; 0xe9c <__floatsisf+0x12>
     e8e:	90 95       	com	r25
     e90:	80 95       	com	r24
     e92:	70 95       	com	r23
     e94:	61 95       	neg	r22
     e96:	7f 4f       	sbci	r23, 0xFF	; 255
     e98:	8f 4f       	sbci	r24, 0xFF	; 255
     e9a:	9f 4f       	sbci	r25, 0xFF	; 255
     e9c:	99 23       	and	r25, r25
     e9e:	a9 f0       	breq	.+42     	; 0xeca <__floatsisf+0x40>
     ea0:	f9 2f       	mov	r31, r25
     ea2:	96 e9       	ldi	r25, 0x96	; 150
     ea4:	bb 27       	eor	r27, r27
     ea6:	93 95       	inc	r25
     ea8:	f6 95       	lsr	r31
     eaa:	87 95       	ror	r24
     eac:	77 95       	ror	r23
     eae:	67 95       	ror	r22
     eb0:	b7 95       	ror	r27
     eb2:	f1 11       	cpse	r31, r1
     eb4:	f8 cf       	rjmp	.-16     	; 0xea6 <__floatsisf+0x1c>
     eb6:	fa f4       	brpl	.+62     	; 0xef6 <__floatsisf+0x6c>
     eb8:	bb 0f       	add	r27, r27
     eba:	11 f4       	brne	.+4      	; 0xec0 <__floatsisf+0x36>
     ebc:	60 ff       	sbrs	r22, 0
     ebe:	1b c0       	rjmp	.+54     	; 0xef6 <__floatsisf+0x6c>
     ec0:	6f 5f       	subi	r22, 0xFF	; 255
     ec2:	7f 4f       	sbci	r23, 0xFF	; 255
     ec4:	8f 4f       	sbci	r24, 0xFF	; 255
     ec6:	9f 4f       	sbci	r25, 0xFF	; 255
     ec8:	16 c0       	rjmp	.+44     	; 0xef6 <__floatsisf+0x6c>
     eca:	88 23       	and	r24, r24
     ecc:	11 f0       	breq	.+4      	; 0xed2 <__floatsisf+0x48>
     ece:	96 e9       	ldi	r25, 0x96	; 150
     ed0:	11 c0       	rjmp	.+34     	; 0xef4 <__floatsisf+0x6a>
     ed2:	77 23       	and	r23, r23
     ed4:	21 f0       	breq	.+8      	; 0xede <__floatsisf+0x54>
     ed6:	9e e8       	ldi	r25, 0x8E	; 142
     ed8:	87 2f       	mov	r24, r23
     eda:	76 2f       	mov	r23, r22
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <__floatsisf+0x5e>
     ede:	66 23       	and	r22, r22
     ee0:	71 f0       	breq	.+28     	; 0xefe <__floatsisf+0x74>
     ee2:	96 e8       	ldi	r25, 0x86	; 134
     ee4:	86 2f       	mov	r24, r22
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	2a f0       	brmi	.+10     	; 0xef6 <__floatsisf+0x6c>
     eec:	9a 95       	dec	r25
     eee:	66 0f       	add	r22, r22
     ef0:	77 1f       	adc	r23, r23
     ef2:	88 1f       	adc	r24, r24
     ef4:	da f7       	brpl	.-10     	; 0xeec <__floatsisf+0x62>
     ef6:	88 0f       	add	r24, r24
     ef8:	96 95       	lsr	r25
     efa:	87 95       	ror	r24
     efc:	97 f9       	bld	r25, 7
     efe:	08 95       	ret

00000f00 <__fp_split3>:
     f00:	57 fd       	sbrc	r21, 7
     f02:	90 58       	subi	r25, 0x80	; 128
     f04:	44 0f       	add	r20, r20
     f06:	55 1f       	adc	r21, r21
     f08:	59 f0       	breq	.+22     	; 0xf20 <__fp_splitA+0x10>
     f0a:	5f 3f       	cpi	r21, 0xFF	; 255
     f0c:	71 f0       	breq	.+28     	; 0xf2a <__fp_splitA+0x1a>
     f0e:	47 95       	ror	r20

00000f10 <__fp_splitA>:
     f10:	88 0f       	add	r24, r24
     f12:	97 fb       	bst	r25, 7
     f14:	99 1f       	adc	r25, r25
     f16:	61 f0       	breq	.+24     	; 0xf30 <__fp_splitA+0x20>
     f18:	9f 3f       	cpi	r25, 0xFF	; 255
     f1a:	79 f0       	breq	.+30     	; 0xf3a <__fp_splitA+0x2a>
     f1c:	87 95       	ror	r24
     f1e:	08 95       	ret
     f20:	12 16       	cp	r1, r18
     f22:	13 06       	cpc	r1, r19
     f24:	14 06       	cpc	r1, r20
     f26:	55 1f       	adc	r21, r21
     f28:	f2 cf       	rjmp	.-28     	; 0xf0e <__fp_split3+0xe>
     f2a:	46 95       	lsr	r20
     f2c:	f1 df       	rcall	.-30     	; 0xf10 <__fp_splitA>
     f2e:	08 c0       	rjmp	.+16     	; 0xf40 <__fp_splitA+0x30>
     f30:	16 16       	cp	r1, r22
     f32:	17 06       	cpc	r1, r23
     f34:	18 06       	cpc	r1, r24
     f36:	99 1f       	adc	r25, r25
     f38:	f1 cf       	rjmp	.-30     	; 0xf1c <__fp_splitA+0xc>
     f3a:	86 95       	lsr	r24
     f3c:	71 05       	cpc	r23, r1
     f3e:	61 05       	cpc	r22, r1
     f40:	08 94       	sec
     f42:	08 95       	ret

00000f44 <__fp_zero>:
     f44:	e8 94       	clt

00000f46 <__fp_szero>:
     f46:	bb 27       	eor	r27, r27
     f48:	66 27       	eor	r22, r22
     f4a:	77 27       	eor	r23, r23
     f4c:	cb 01       	movw	r24, r22
     f4e:	97 f9       	bld	r25, 7
     f50:	08 95       	ret

00000f52 <__mulsf3>:
     f52:	0e 94 bc 07 	call	0xf78	; 0xf78 <__mulsf3x>
     f56:	0c 94 2d 08 	jmp	0x105a	; 0x105a <__fp_round>
     f5a:	0e 94 1f 08 	call	0x103e	; 0x103e <__fp_pscA>
     f5e:	38 f0       	brcs	.+14     	; 0xf6e <__mulsf3+0x1c>
     f60:	0e 94 26 08 	call	0x104c	; 0x104c <__fp_pscB>
     f64:	20 f0       	brcs	.+8      	; 0xf6e <__mulsf3+0x1c>
     f66:	95 23       	and	r25, r21
     f68:	11 f0       	breq	.+4      	; 0xf6e <__mulsf3+0x1c>
     f6a:	0c 94 16 08 	jmp	0x102c	; 0x102c <__fp_inf>
     f6e:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_nan>
     f72:	11 24       	eor	r1, r1
     f74:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__fp_szero>

00000f78 <__mulsf3x>:
     f78:	0e 94 80 07 	call	0xf00	; 0xf00 <__fp_split3>
     f7c:	70 f3       	brcs	.-36     	; 0xf5a <__mulsf3+0x8>

00000f7e <__mulsf3_pse>:
     f7e:	95 9f       	mul	r25, r21
     f80:	c1 f3       	breq	.-16     	; 0xf72 <__mulsf3+0x20>
     f82:	95 0f       	add	r25, r21
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	55 1f       	adc	r21, r21
     f88:	62 9f       	mul	r22, r18
     f8a:	f0 01       	movw	r30, r0
     f8c:	72 9f       	mul	r23, r18
     f8e:	bb 27       	eor	r27, r27
     f90:	f0 0d       	add	r31, r0
     f92:	b1 1d       	adc	r27, r1
     f94:	63 9f       	mul	r22, r19
     f96:	aa 27       	eor	r26, r26
     f98:	f0 0d       	add	r31, r0
     f9a:	b1 1d       	adc	r27, r1
     f9c:	aa 1f       	adc	r26, r26
     f9e:	64 9f       	mul	r22, r20
     fa0:	66 27       	eor	r22, r22
     fa2:	b0 0d       	add	r27, r0
     fa4:	a1 1d       	adc	r26, r1
     fa6:	66 1f       	adc	r22, r22
     fa8:	82 9f       	mul	r24, r18
     faa:	22 27       	eor	r18, r18
     fac:	b0 0d       	add	r27, r0
     fae:	a1 1d       	adc	r26, r1
     fb0:	62 1f       	adc	r22, r18
     fb2:	73 9f       	mul	r23, r19
     fb4:	b0 0d       	add	r27, r0
     fb6:	a1 1d       	adc	r26, r1
     fb8:	62 1f       	adc	r22, r18
     fba:	83 9f       	mul	r24, r19
     fbc:	a0 0d       	add	r26, r0
     fbe:	61 1d       	adc	r22, r1
     fc0:	22 1f       	adc	r18, r18
     fc2:	74 9f       	mul	r23, r20
     fc4:	33 27       	eor	r19, r19
     fc6:	a0 0d       	add	r26, r0
     fc8:	61 1d       	adc	r22, r1
     fca:	23 1f       	adc	r18, r19
     fcc:	84 9f       	mul	r24, r20
     fce:	60 0d       	add	r22, r0
     fd0:	21 1d       	adc	r18, r1
     fd2:	82 2f       	mov	r24, r18
     fd4:	76 2f       	mov	r23, r22
     fd6:	6a 2f       	mov	r22, r26
     fd8:	11 24       	eor	r1, r1
     fda:	9f 57       	subi	r25, 0x7F	; 127
     fdc:	50 40       	sbci	r21, 0x00	; 0
     fde:	9a f0       	brmi	.+38     	; 0x1006 <__mulsf3_pse+0x88>
     fe0:	f1 f0       	breq	.+60     	; 0x101e <__mulsf3_pse+0xa0>
     fe2:	88 23       	and	r24, r24
     fe4:	4a f0       	brmi	.+18     	; 0xff8 <__mulsf3_pse+0x7a>
     fe6:	ee 0f       	add	r30, r30
     fe8:	ff 1f       	adc	r31, r31
     fea:	bb 1f       	adc	r27, r27
     fec:	66 1f       	adc	r22, r22
     fee:	77 1f       	adc	r23, r23
     ff0:	88 1f       	adc	r24, r24
     ff2:	91 50       	subi	r25, 0x01	; 1
     ff4:	50 40       	sbci	r21, 0x00	; 0
     ff6:	a9 f7       	brne	.-22     	; 0xfe2 <__mulsf3_pse+0x64>
     ff8:	9e 3f       	cpi	r25, 0xFE	; 254
     ffa:	51 05       	cpc	r21, r1
     ffc:	80 f0       	brcs	.+32     	; 0x101e <__mulsf3_pse+0xa0>
     ffe:	0c 94 16 08 	jmp	0x102c	; 0x102c <__fp_inf>
    1002:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__fp_szero>
    1006:	5f 3f       	cpi	r21, 0xFF	; 255
    1008:	e4 f3       	brlt	.-8      	; 0x1002 <__mulsf3_pse+0x84>
    100a:	98 3e       	cpi	r25, 0xE8	; 232
    100c:	d4 f3       	brlt	.-12     	; 0x1002 <__mulsf3_pse+0x84>
    100e:	86 95       	lsr	r24
    1010:	77 95       	ror	r23
    1012:	67 95       	ror	r22
    1014:	b7 95       	ror	r27
    1016:	f7 95       	ror	r31
    1018:	e7 95       	ror	r30
    101a:	9f 5f       	subi	r25, 0xFF	; 255
    101c:	c1 f7       	brne	.-16     	; 0x100e <__mulsf3_pse+0x90>
    101e:	fe 2b       	or	r31, r30
    1020:	88 0f       	add	r24, r24
    1022:	91 1d       	adc	r25, r1
    1024:	96 95       	lsr	r25
    1026:	87 95       	ror	r24
    1028:	97 f9       	bld	r25, 7
    102a:	08 95       	ret

0000102c <__fp_inf>:
    102c:	97 f9       	bld	r25, 7
    102e:	9f 67       	ori	r25, 0x7F	; 127
    1030:	80 e8       	ldi	r24, 0x80	; 128
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	08 95       	ret

00001038 <__fp_nan>:
    1038:	9f ef       	ldi	r25, 0xFF	; 255
    103a:	80 ec       	ldi	r24, 0xC0	; 192
    103c:	08 95       	ret

0000103e <__fp_pscA>:
    103e:	00 24       	eor	r0, r0
    1040:	0a 94       	dec	r0
    1042:	16 16       	cp	r1, r22
    1044:	17 06       	cpc	r1, r23
    1046:	18 06       	cpc	r1, r24
    1048:	09 06       	cpc	r0, r25
    104a:	08 95       	ret

0000104c <__fp_pscB>:
    104c:	00 24       	eor	r0, r0
    104e:	0a 94       	dec	r0
    1050:	12 16       	cp	r1, r18
    1052:	13 06       	cpc	r1, r19
    1054:	14 06       	cpc	r1, r20
    1056:	05 06       	cpc	r0, r21
    1058:	08 95       	ret

0000105a <__fp_round>:
    105a:	09 2e       	mov	r0, r25
    105c:	03 94       	inc	r0
    105e:	00 0c       	add	r0, r0
    1060:	11 f4       	brne	.+4      	; 0x1066 <__fp_round+0xc>
    1062:	88 23       	and	r24, r24
    1064:	52 f0       	brmi	.+20     	; 0x107a <__fp_round+0x20>
    1066:	bb 0f       	add	r27, r27
    1068:	40 f4       	brcc	.+16     	; 0x107a <__fp_round+0x20>
    106a:	bf 2b       	or	r27, r31
    106c:	11 f4       	brne	.+4      	; 0x1072 <__fp_round+0x18>
    106e:	60 ff       	sbrs	r22, 0
    1070:	04 c0       	rjmp	.+8      	; 0x107a <__fp_round+0x20>
    1072:	6f 5f       	subi	r22, 0xFF	; 255
    1074:	7f 4f       	sbci	r23, 0xFF	; 255
    1076:	8f 4f       	sbci	r24, 0xFF	; 255
    1078:	9f 4f       	sbci	r25, 0xFF	; 255
    107a:	08 95       	ret

0000107c <__divmodsi4>:
    107c:	05 2e       	mov	r0, r21
    107e:	97 fb       	bst	r25, 7
    1080:	1e f4       	brtc	.+6      	; 0x1088 <__divmodsi4+0xc>
    1082:	00 94       	com	r0
    1084:	0e 94 55 08 	call	0x10aa	; 0x10aa <__negsi2>
    1088:	57 fd       	sbrc	r21, 7
    108a:	07 d0       	rcall	.+14     	; 0x109a <__divmodsi4_neg2>
    108c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__udivmodsi4>
    1090:	07 fc       	sbrc	r0, 7
    1092:	03 d0       	rcall	.+6      	; 0x109a <__divmodsi4_neg2>
    1094:	4e f4       	brtc	.+18     	; 0x10a8 <__divmodsi4_exit>
    1096:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__negsi2>

0000109a <__divmodsi4_neg2>:
    109a:	50 95       	com	r21
    109c:	40 95       	com	r20
    109e:	30 95       	com	r19
    10a0:	21 95       	neg	r18
    10a2:	3f 4f       	sbci	r19, 0xFF	; 255
    10a4:	4f 4f       	sbci	r20, 0xFF	; 255
    10a6:	5f 4f       	sbci	r21, 0xFF	; 255

000010a8 <__divmodsi4_exit>:
    10a8:	08 95       	ret

000010aa <__negsi2>:
    10aa:	90 95       	com	r25
    10ac:	80 95       	com	r24
    10ae:	70 95       	com	r23
    10b0:	61 95       	neg	r22
    10b2:	7f 4f       	sbci	r23, 0xFF	; 255
    10b4:	8f 4f       	sbci	r24, 0xFF	; 255
    10b6:	9f 4f       	sbci	r25, 0xFF	; 255
    10b8:	08 95       	ret

000010ba <__tablejump2__>:
    10ba:	ee 0f       	add	r30, r30
    10bc:	ff 1f       	adc	r31, r31
    10be:	05 90       	lpm	r0, Z+
    10c0:	f4 91       	lpm	r31, Z
    10c2:	e0 2d       	mov	r30, r0
    10c4:	09 94       	ijmp

000010c6 <__udivmodsi4>:
    10c6:	a1 e2       	ldi	r26, 0x21	; 33
    10c8:	1a 2e       	mov	r1, r26
    10ca:	aa 1b       	sub	r26, r26
    10cc:	bb 1b       	sub	r27, r27
    10ce:	fd 01       	movw	r30, r26
    10d0:	0d c0       	rjmp	.+26     	; 0x10ec <__udivmodsi4_ep>

000010d2 <__udivmodsi4_loop>:
    10d2:	aa 1f       	adc	r26, r26
    10d4:	bb 1f       	adc	r27, r27
    10d6:	ee 1f       	adc	r30, r30
    10d8:	ff 1f       	adc	r31, r31
    10da:	a2 17       	cp	r26, r18
    10dc:	b3 07       	cpc	r27, r19
    10de:	e4 07       	cpc	r30, r20
    10e0:	f5 07       	cpc	r31, r21
    10e2:	20 f0       	brcs	.+8      	; 0x10ec <__udivmodsi4_ep>
    10e4:	a2 1b       	sub	r26, r18
    10e6:	b3 0b       	sbc	r27, r19
    10e8:	e4 0b       	sbc	r30, r20
    10ea:	f5 0b       	sbc	r31, r21

000010ec <__udivmodsi4_ep>:
    10ec:	66 1f       	adc	r22, r22
    10ee:	77 1f       	adc	r23, r23
    10f0:	88 1f       	adc	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	1a 94       	dec	r1
    10f6:	69 f7       	brne	.-38     	; 0x10d2 <__udivmodsi4_loop>
    10f8:	60 95       	com	r22
    10fa:	70 95       	com	r23
    10fc:	80 95       	com	r24
    10fe:	90 95       	com	r25
    1100:	9b 01       	movw	r18, r22
    1102:	ac 01       	movw	r20, r24
    1104:	bd 01       	movw	r22, r26
    1106:	cf 01       	movw	r24, r30
    1108:	08 95       	ret

0000110a <malloc>:
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	82 30       	cpi	r24, 0x02	; 2
    1114:	91 05       	cpc	r25, r1
    1116:	10 f4       	brcc	.+4      	; 0x111c <malloc+0x12>
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	e0 91 3a 06 	lds	r30, 0x063A	; 0x80063a <__flp>
    1120:	f0 91 3b 06 	lds	r31, 0x063B	; 0x80063b <__flp+0x1>
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	a0 e0       	ldi	r26, 0x00	; 0
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	30 97       	sbiw	r30, 0x00	; 0
    112e:	19 f1       	breq	.+70     	; 0x1176 <malloc+0x6c>
    1130:	40 81       	ld	r20, Z
    1132:	51 81       	ldd	r21, Z+1	; 0x01
    1134:	02 81       	ldd	r16, Z+2	; 0x02
    1136:	13 81       	ldd	r17, Z+3	; 0x03
    1138:	48 17       	cp	r20, r24
    113a:	59 07       	cpc	r21, r25
    113c:	c8 f0       	brcs	.+50     	; 0x1170 <malloc+0x66>
    113e:	84 17       	cp	r24, r20
    1140:	95 07       	cpc	r25, r21
    1142:	69 f4       	brne	.+26     	; 0x115e <malloc+0x54>
    1144:	10 97       	sbiw	r26, 0x00	; 0
    1146:	31 f0       	breq	.+12     	; 0x1154 <malloc+0x4a>
    1148:	12 96       	adiw	r26, 0x02	; 2
    114a:	0c 93       	st	X, r16
    114c:	12 97       	sbiw	r26, 0x02	; 2
    114e:	13 96       	adiw	r26, 0x03	; 3
    1150:	1c 93       	st	X, r17
    1152:	27 c0       	rjmp	.+78     	; 0x11a2 <malloc+0x98>
    1154:	00 93 3a 06 	sts	0x063A, r16	; 0x80063a <__flp>
    1158:	10 93 3b 06 	sts	0x063B, r17	; 0x80063b <__flp+0x1>
    115c:	22 c0       	rjmp	.+68     	; 0x11a2 <malloc+0x98>
    115e:	21 15       	cp	r18, r1
    1160:	31 05       	cpc	r19, r1
    1162:	19 f0       	breq	.+6      	; 0x116a <malloc+0x60>
    1164:	42 17       	cp	r20, r18
    1166:	53 07       	cpc	r21, r19
    1168:	18 f4       	brcc	.+6      	; 0x1170 <malloc+0x66>
    116a:	9a 01       	movw	r18, r20
    116c:	bd 01       	movw	r22, r26
    116e:	ef 01       	movw	r28, r30
    1170:	df 01       	movw	r26, r30
    1172:	f8 01       	movw	r30, r16
    1174:	db cf       	rjmp	.-74     	; 0x112c <malloc+0x22>
    1176:	21 15       	cp	r18, r1
    1178:	31 05       	cpc	r19, r1
    117a:	f9 f0       	breq	.+62     	; 0x11ba <malloc+0xb0>
    117c:	28 1b       	sub	r18, r24
    117e:	39 0b       	sbc	r19, r25
    1180:	24 30       	cpi	r18, 0x04	; 4
    1182:	31 05       	cpc	r19, r1
    1184:	80 f4       	brcc	.+32     	; 0x11a6 <malloc+0x9c>
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	9b 81       	ldd	r25, Y+3	; 0x03
    118a:	61 15       	cp	r22, r1
    118c:	71 05       	cpc	r23, r1
    118e:	21 f0       	breq	.+8      	; 0x1198 <malloc+0x8e>
    1190:	fb 01       	movw	r30, r22
    1192:	93 83       	std	Z+3, r25	; 0x03
    1194:	82 83       	std	Z+2, r24	; 0x02
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <malloc+0x96>
    1198:	90 93 3b 06 	sts	0x063B, r25	; 0x80063b <__flp+0x1>
    119c:	80 93 3a 06 	sts	0x063A, r24	; 0x80063a <__flp>
    11a0:	fe 01       	movw	r30, r28
    11a2:	32 96       	adiw	r30, 0x02	; 2
    11a4:	44 c0       	rjmp	.+136    	; 0x122e <malloc+0x124>
    11a6:	fe 01       	movw	r30, r28
    11a8:	e2 0f       	add	r30, r18
    11aa:	f3 1f       	adc	r31, r19
    11ac:	81 93       	st	Z+, r24
    11ae:	91 93       	st	Z+, r25
    11b0:	22 50       	subi	r18, 0x02	; 2
    11b2:	31 09       	sbc	r19, r1
    11b4:	39 83       	std	Y+1, r19	; 0x01
    11b6:	28 83       	st	Y, r18
    11b8:	3a c0       	rjmp	.+116    	; 0x122e <malloc+0x124>
    11ba:	20 91 38 06 	lds	r18, 0x0638	; 0x800638 <__brkval>
    11be:	30 91 39 06 	lds	r19, 0x0639	; 0x800639 <__brkval+0x1>
    11c2:	23 2b       	or	r18, r19
    11c4:	41 f4       	brne	.+16     	; 0x11d6 <malloc+0xcc>
    11c6:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <__malloc_heap_start>
    11ca:	30 91 0b 03 	lds	r19, 0x030B	; 0x80030b <__malloc_heap_start+0x1>
    11ce:	30 93 39 06 	sts	0x0639, r19	; 0x800639 <__brkval+0x1>
    11d2:	20 93 38 06 	sts	0x0638, r18	; 0x800638 <__brkval>
    11d6:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <__malloc_heap_end>
    11da:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <__malloc_heap_end+0x1>
    11de:	21 15       	cp	r18, r1
    11e0:	31 05       	cpc	r19, r1
    11e2:	41 f4       	brne	.+16     	; 0x11f4 <malloc+0xea>
    11e4:	2d b7       	in	r18, 0x3d	; 61
    11e6:	3e b7       	in	r19, 0x3e	; 62
    11e8:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <__malloc_margin>
    11ec:	50 91 0d 03 	lds	r21, 0x030D	; 0x80030d <__malloc_margin+0x1>
    11f0:	24 1b       	sub	r18, r20
    11f2:	35 0b       	sbc	r19, r21
    11f4:	e0 91 38 06 	lds	r30, 0x0638	; 0x800638 <__brkval>
    11f8:	f0 91 39 06 	lds	r31, 0x0639	; 0x800639 <__brkval+0x1>
    11fc:	e2 17       	cp	r30, r18
    11fe:	f3 07       	cpc	r31, r19
    1200:	a0 f4       	brcc	.+40     	; 0x122a <malloc+0x120>
    1202:	2e 1b       	sub	r18, r30
    1204:	3f 0b       	sbc	r19, r31
    1206:	28 17       	cp	r18, r24
    1208:	39 07       	cpc	r19, r25
    120a:	78 f0       	brcs	.+30     	; 0x122a <malloc+0x120>
    120c:	ac 01       	movw	r20, r24
    120e:	4e 5f       	subi	r20, 0xFE	; 254
    1210:	5f 4f       	sbci	r21, 0xFF	; 255
    1212:	24 17       	cp	r18, r20
    1214:	35 07       	cpc	r19, r21
    1216:	48 f0       	brcs	.+18     	; 0x122a <malloc+0x120>
    1218:	4e 0f       	add	r20, r30
    121a:	5f 1f       	adc	r21, r31
    121c:	50 93 39 06 	sts	0x0639, r21	; 0x800639 <__brkval+0x1>
    1220:	40 93 38 06 	sts	0x0638, r20	; 0x800638 <__brkval>
    1224:	81 93       	st	Z+, r24
    1226:	91 93       	st	Z+, r25
    1228:	02 c0       	rjmp	.+4      	; 0x122e <malloc+0x124>
    122a:	e0 e0       	ldi	r30, 0x00	; 0
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	cf 01       	movw	r24, r30
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	08 95       	ret

0000123a <free>:
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	00 97       	sbiw	r24, 0x00	; 0
    1240:	09 f4       	brne	.+2      	; 0x1244 <free+0xa>
    1242:	81 c0       	rjmp	.+258    	; 0x1346 <free+0x10c>
    1244:	fc 01       	movw	r30, r24
    1246:	32 97       	sbiw	r30, 0x02	; 2
    1248:	13 82       	std	Z+3, r1	; 0x03
    124a:	12 82       	std	Z+2, r1	; 0x02
    124c:	a0 91 3a 06 	lds	r26, 0x063A	; 0x80063a <__flp>
    1250:	b0 91 3b 06 	lds	r27, 0x063B	; 0x80063b <__flp+0x1>
    1254:	10 97       	sbiw	r26, 0x00	; 0
    1256:	81 f4       	brne	.+32     	; 0x1278 <free+0x3e>
    1258:	20 81       	ld	r18, Z
    125a:	31 81       	ldd	r19, Z+1	; 0x01
    125c:	82 0f       	add	r24, r18
    125e:	93 1f       	adc	r25, r19
    1260:	20 91 38 06 	lds	r18, 0x0638	; 0x800638 <__brkval>
    1264:	30 91 39 06 	lds	r19, 0x0639	; 0x800639 <__brkval+0x1>
    1268:	28 17       	cp	r18, r24
    126a:	39 07       	cpc	r19, r25
    126c:	51 f5       	brne	.+84     	; 0x12c2 <free+0x88>
    126e:	f0 93 39 06 	sts	0x0639, r31	; 0x800639 <__brkval+0x1>
    1272:	e0 93 38 06 	sts	0x0638, r30	; 0x800638 <__brkval>
    1276:	67 c0       	rjmp	.+206    	; 0x1346 <free+0x10c>
    1278:	ed 01       	movw	r28, r26
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	ce 17       	cp	r28, r30
    1280:	df 07       	cpc	r29, r31
    1282:	40 f4       	brcc	.+16     	; 0x1294 <free+0x5a>
    1284:	4a 81       	ldd	r20, Y+2	; 0x02
    1286:	5b 81       	ldd	r21, Y+3	; 0x03
    1288:	9e 01       	movw	r18, r28
    128a:	41 15       	cp	r20, r1
    128c:	51 05       	cpc	r21, r1
    128e:	f1 f0       	breq	.+60     	; 0x12cc <free+0x92>
    1290:	ea 01       	movw	r28, r20
    1292:	f5 cf       	rjmp	.-22     	; 0x127e <free+0x44>
    1294:	d3 83       	std	Z+3, r29	; 0x03
    1296:	c2 83       	std	Z+2, r28	; 0x02
    1298:	40 81       	ld	r20, Z
    129a:	51 81       	ldd	r21, Z+1	; 0x01
    129c:	84 0f       	add	r24, r20
    129e:	95 1f       	adc	r25, r21
    12a0:	c8 17       	cp	r28, r24
    12a2:	d9 07       	cpc	r29, r25
    12a4:	59 f4       	brne	.+22     	; 0x12bc <free+0x82>
    12a6:	88 81       	ld	r24, Y
    12a8:	99 81       	ldd	r25, Y+1	; 0x01
    12aa:	84 0f       	add	r24, r20
    12ac:	95 1f       	adc	r25, r21
    12ae:	02 96       	adiw	r24, 0x02	; 2
    12b0:	91 83       	std	Z+1, r25	; 0x01
    12b2:	80 83       	st	Z, r24
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	9b 81       	ldd	r25, Y+3	; 0x03
    12b8:	93 83       	std	Z+3, r25	; 0x03
    12ba:	82 83       	std	Z+2, r24	; 0x02
    12bc:	21 15       	cp	r18, r1
    12be:	31 05       	cpc	r19, r1
    12c0:	29 f4       	brne	.+10     	; 0x12cc <free+0x92>
    12c2:	f0 93 3b 06 	sts	0x063B, r31	; 0x80063b <__flp+0x1>
    12c6:	e0 93 3a 06 	sts	0x063A, r30	; 0x80063a <__flp>
    12ca:	3d c0       	rjmp	.+122    	; 0x1346 <free+0x10c>
    12cc:	e9 01       	movw	r28, r18
    12ce:	fb 83       	std	Y+3, r31	; 0x03
    12d0:	ea 83       	std	Y+2, r30	; 0x02
    12d2:	49 91       	ld	r20, Y+
    12d4:	59 91       	ld	r21, Y+
    12d6:	c4 0f       	add	r28, r20
    12d8:	d5 1f       	adc	r29, r21
    12da:	ec 17       	cp	r30, r28
    12dc:	fd 07       	cpc	r31, r29
    12de:	61 f4       	brne	.+24     	; 0x12f8 <free+0xbe>
    12e0:	80 81       	ld	r24, Z
    12e2:	91 81       	ldd	r25, Z+1	; 0x01
    12e4:	84 0f       	add	r24, r20
    12e6:	95 1f       	adc	r25, r21
    12e8:	02 96       	adiw	r24, 0x02	; 2
    12ea:	e9 01       	movw	r28, r18
    12ec:	99 83       	std	Y+1, r25	; 0x01
    12ee:	88 83       	st	Y, r24
    12f0:	82 81       	ldd	r24, Z+2	; 0x02
    12f2:	93 81       	ldd	r25, Z+3	; 0x03
    12f4:	9b 83       	std	Y+3, r25	; 0x03
    12f6:	8a 83       	std	Y+2, r24	; 0x02
    12f8:	e0 e0       	ldi	r30, 0x00	; 0
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	12 96       	adiw	r26, 0x02	; 2
    12fe:	8d 91       	ld	r24, X+
    1300:	9c 91       	ld	r25, X
    1302:	13 97       	sbiw	r26, 0x03	; 3
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	19 f0       	breq	.+6      	; 0x130e <free+0xd4>
    1308:	fd 01       	movw	r30, r26
    130a:	dc 01       	movw	r26, r24
    130c:	f7 cf       	rjmp	.-18     	; 0x12fc <free+0xc2>
    130e:	8d 91       	ld	r24, X+
    1310:	9c 91       	ld	r25, X
    1312:	11 97       	sbiw	r26, 0x01	; 1
    1314:	9d 01       	movw	r18, r26
    1316:	2e 5f       	subi	r18, 0xFE	; 254
    1318:	3f 4f       	sbci	r19, 0xFF	; 255
    131a:	82 0f       	add	r24, r18
    131c:	93 1f       	adc	r25, r19
    131e:	20 91 38 06 	lds	r18, 0x0638	; 0x800638 <__brkval>
    1322:	30 91 39 06 	lds	r19, 0x0639	; 0x800639 <__brkval+0x1>
    1326:	28 17       	cp	r18, r24
    1328:	39 07       	cpc	r19, r25
    132a:	69 f4       	brne	.+26     	; 0x1346 <free+0x10c>
    132c:	30 97       	sbiw	r30, 0x00	; 0
    132e:	29 f4       	brne	.+10     	; 0x133a <free+0x100>
    1330:	10 92 3b 06 	sts	0x063B, r1	; 0x80063b <__flp+0x1>
    1334:	10 92 3a 06 	sts	0x063A, r1	; 0x80063a <__flp>
    1338:	02 c0       	rjmp	.+4      	; 0x133e <free+0x104>
    133a:	13 82       	std	Z+3, r1	; 0x03
    133c:	12 82       	std	Z+2, r1	; 0x02
    133e:	b0 93 39 06 	sts	0x0639, r27	; 0x800639 <__brkval+0x1>
    1342:	a0 93 38 06 	sts	0x0638, r26	; 0x800638 <__brkval>
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	08 95       	ret

0000134c <_exit>:
    134c:	f8 94       	cli

0000134e <__stop_program>:
    134e:	ff cf       	rjmp	.-2      	; 0x134e <__stop_program>
