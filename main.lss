
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000212  00800100  00001420  000014b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001420  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000032e  00800312  00800312  000016c6  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000016c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001adc  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf9  00000000  00000000  0000321c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf6  00000000  00000000  00003f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00004b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d6  00000000  00000000  00004d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bc9  00000000  00000000  000054de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000060a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
       4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      24:	0c 94 49 02 	jmp	0x492	; 0x492 <__vector_9>
      28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      40:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      48:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      4c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      50:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      54:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      5c:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__vector_23>
      60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      68:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      6c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      70:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      74:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      78:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      7c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      80:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      84:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      88:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      8c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      90:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__vector_36>
      94:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      98:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      9c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      a0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      a4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      a8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      ac:	c9 02       	muls	r28, r25
      ae:	ce 02       	muls	r28, r30
      b0:	d3 02       	muls	r29, r19
      b2:	d8 02       	muls	r29, r24
      b4:	dd 02       	muls	r29, r29
      b6:	e2 02       	muls	r30, r18
      b8:	e7 02       	muls	r30, r23
      ba:	11 04       	cpc	r1, r1
      bc:	ec 02       	muls	r30, r28
      be:	f1 02       	muls	r31, r17
      c0:	f6 02       	muls	r31, r22
      c2:	fb 02       	muls	r31, r27
      c4:	11 04       	cpc	r1, r1
      c6:	11 04       	cpc	r1, r1
      c8:	11 04       	cpc	r1, r1
      ca:	11 04       	cpc	r1, r1
      cc:	11 04       	cpc	r1, r1
      ce:	11 04       	cpc	r1, r1
      d0:	11 04       	cpc	r1, r1
      d2:	11 04       	cpc	r1, r1
      d4:	11 04       	cpc	r1, r1
      d6:	11 04       	cpc	r1, r1
      d8:	11 04       	cpc	r1, r1
      da:	fe 02       	muls	r31, r30
      dc:	f8 06       	cpc	r15, r24
      de:	00 07       	cpc	r16, r16
      e0:	2e 07       	cpc	r18, r30
      e2:	08 07       	cpc	r16, r24
      e4:	10 07       	cpc	r17, r16
      e6:	2e 07       	cpc	r18, r30
      e8:	18 07       	cpc	r17, r24
      ea:	20 07       	cpc	r18, r16
      ec:	2e 07       	cpc	r18, r30
      ee:	27 07       	cpc	r18, r23

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	da e0       	ldi	r29, 0x0A	; 10
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_copy_data>:
      fc:	13 e0       	ldi	r17, 0x03	; 3
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	e0 e2       	ldi	r30, 0x20	; 32
     104:	f4 e1       	ldi	r31, 0x14	; 20
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x10>
     108:	05 90       	lpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	a2 31       	cpi	r26, 0x12	; 18
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0xc>

00000112 <__do_clear_bss>:
     112:	26 e0       	ldi	r18, 0x06	; 6
     114:	a2 e1       	ldi	r26, 0x12	; 18
     116:	b3 e0       	ldi	r27, 0x03	; 3
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	a0 34       	cpi	r26, 0x40	; 64
     11e:	b2 07       	cpc	r27, r18
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>
     122:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <main>
     126:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <_exit>

0000012a <__bad_interrupt>:
     12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <_crc8_ccitt_update>:

static __inline__ uint8_t
_crc8_ccitt_update(uint8_t __crc, uint8_t __data)
{
    uint8_t __i, __pattern;
    __asm__ __volatile__ (
     12e:	86 27       	eor	r24, r22
     130:	98 e0       	ldi	r25, 0x08	; 8
     132:	67 e0       	ldi	r22, 0x07	; 7
     134:	88 0f       	add	r24, r24
     136:	08 f4       	brcc	.+2      	; 0x13a <_crc8_ccitt_update+0xc>
     138:	86 27       	eor	r24, r22
     13a:	9a 95       	dec	r25
     13c:	d9 f7       	brne	.-10     	; 0x134 <_crc8_ccitt_update+0x6>
        "2:  dec    %1" "\n\t"
        "    brne   1b" "\n\t"
        : "=r" (__crc), "=d" (__i), "=d" (__pattern)
        : "0" (__crc), "r" (__data));
    return __crc;
}
     13e:	08 95       	ret

00000140 <ws2812_sendarray_mask>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
     140:	2a b1       	in	r18, 0x0a	; 10
     142:	24 2b       	or	r18, r20
     144:	2a b9       	out	0x0a, r18	; 10
  
  masklo	=~maskhi&ws2812_PORTREG;
     146:	2b b1       	in	r18, 0x0b	; 11
     148:	34 2f       	mov	r19, r20
     14a:	30 95       	com	r19
     14c:	23 23       	and	r18, r19
  maskhi |=        ws2812_PORTREG;
     14e:	3b b1       	in	r19, 0x0b	; 11
     150:	43 2b       	or	r20, r19
  
  sreg_prev=SREG;
     152:	3f b7       	in	r19, 0x3f	; 63
  cli();  
     154:	f8 94       	cli
     156:	fc 01       	movw	r30, r24
     158:	68 0f       	add	r22, r24
     15a:	79 1f       	adc	r23, r25

  while (datlen--) {
     15c:	e6 17       	cp	r30, r22
     15e:	f7 07       	cpc	r31, r23
     160:	c1 f0       	breq	.+48     	; 0x192 <loop59+0x2c>
    curbyte=*data++;
     162:	81 91       	ld	r24, Z+
    
    asm volatile(
     164:	98 e0       	ldi	r25, 0x08	; 8

00000166 <loop59>:
     166:	4b b9       	out	0x0b, r20	; 11
     168:	00 00       	nop
     16a:	00 c0       	rjmp	.+0      	; 0x16c <loop59+0x6>
     16c:	87 ff       	sbrs	r24, 7
     16e:	2b b9       	out	0x0b, r18	; 11
     170:	88 0f       	add	r24, r24
     172:	00 00       	nop
     174:	00 c0       	rjmp	.+0      	; 0x176 <loop59+0x10>
     176:	00 c0       	rjmp	.+0      	; 0x178 <loop59+0x12>
     178:	00 c0       	rjmp	.+0      	; 0x17a <loop59+0x14>
     17a:	2b b9       	out	0x0b, r18	; 11
     17c:	00 c0       	rjmp	.+0      	; 0x17e <loop59+0x18>
     17e:	00 c0       	rjmp	.+0      	; 0x180 <loop59+0x1a>
     180:	00 c0       	rjmp	.+0      	; 0x182 <loop59+0x1c>
     182:	00 c0       	rjmp	.+0      	; 0x184 <loop59+0x1e>
     184:	00 c0       	rjmp	.+0      	; 0x186 <loop59+0x20>
     186:	00 c0       	rjmp	.+0      	; 0x188 <loop59+0x22>
     188:	00 c0       	rjmp	.+0      	; 0x18a <loop59+0x24>
     18a:	00 c0       	rjmp	.+0      	; 0x18c <loop59+0x26>
     18c:	9a 95       	dec	r25
     18e:	59 f7       	brne	.-42     	; 0x166 <loop59>
     190:	e5 cf       	rjmp	.-54     	; 0x15c <ws2812_sendarray_mask+0x1c>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
     192:	3f bf       	out	0x3f, r19	; 63
     194:	08 95       	ret

00000196 <ws2812_setleds_pin>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
     196:	9b 01       	movw	r18, r22
     198:	22 0f       	add	r18, r18
     19a:	33 1f       	adc	r19, r19
     19c:	62 0f       	add	r22, r18
     19e:	73 1f       	adc	r23, r19
     1a0:	0e 94 a0 00 	call	0x140	; 0x140 <ws2812_sendarray_mask>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a4:	8f ea       	ldi	r24, 0xAF	; 175
     1a6:	94 e0       	ldi	r25, 0x04	; 4
     1a8:	01 97       	sbiw	r24, 0x01	; 1
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <ws2812_setleds_pin+0x12>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <ws2812_setleds_pin+0x18>
     1ae:	00 00       	nop
     1b0:	08 95       	ret

000001b2 <ws2812_setleds>:
#include <util/delay.h>
 
// Setleds for standard RGB 
void inline ws2812_setleds(struct cRGB *ledarray, uint16_t leds)
{
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
     1b2:	40 e2       	ldi	r20, 0x20	; 32
     1b4:	0c 94 cb 00 	jmp	0x196	; 0x196 <ws2812_setleds_pin>

000001b8 <ws2812_sendarray>:



void ws2812_sendarray(uint8_t *data,uint16_t datlen)
{
  ws2812_sendarray_mask(data,datlen,_BV(ws2812_pin));
     1b8:	40 e2       	ldi	r20, 0x20	; 32
     1ba:	0c 94 a0 00 	jmp	0x140	; 0x140 <ws2812_sendarray_mask>

000001be <write_backlight>:



								 // set single wire brightness  AL3050
void write_backlight(uint8_t data)
{
     1be:	27 e0       	ldi	r18, 0x07	; 7
     1c0:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t count = 8;
	do
	{
		PORTD &= ~_BV(PD4);
		_delay_us(50);
		if (!(data & (1 << (count - 1))))
     1c2:	90 e0       	ldi	r25, 0x00	; 0
void write_backlight(uint8_t data)
{
	uint8_t count = 8;
	do
	{
		PORTD &= ~_BV(PD4);
     1c4:	5c 98       	cbi	0x0b, 4	; 11
     1c6:	e7 ec       	ldi	r30, 0xC7	; 199
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	31 97       	sbiw	r30, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <write_backlight+0xc>
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <write_backlight+0x12>
     1d0:	00 00       	nop
		_delay_us(50);
		if (!(data & (1 << (count - 1))))
     1d2:	ac 01       	movw	r20, r24
     1d4:	02 2e       	mov	r0, r18
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <write_backlight+0x1e>
     1d8:	55 95       	asr	r21
     1da:	47 95       	ror	r20
     1dc:	0a 94       	dec	r0
     1de:	e2 f7       	brpl	.-8      	; 0x1d8 <write_backlight+0x1a>
     1e0:	ba 01       	movw	r22, r20
     1e2:	61 70       	andi	r22, 0x01	; 1
     1e4:	77 27       	eor	r23, r23
     1e6:	40 fd       	sbrc	r20, 0
     1e8:	06 c0       	rjmp	.+12     	; 0x1f6 <write_backlight+0x38>
     1ea:	e7 ec       	ldi	r30, 0xC7	; 199
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	31 97       	sbiw	r30, 0x01	; 1
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <write_backlight+0x30>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <write_backlight+0x36>
     1f4:	00 00       	nop
		{
			_delay_us(50);
		}
		PORTD |= _BV(PD4);
     1f6:	5c 9a       	sbi	0x0b, 4	; 11
     1f8:	e7 ec       	ldi	r30, 0xC7	; 199
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	31 97       	sbiw	r30, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <write_backlight+0x3e>
     200:	00 c0       	rjmp	.+0      	; 0x202 <write_backlight+0x44>
     202:	00 00       	nop
		_delay_us(50);
		if ((data & (1 << (count - 1))) != 0)
     204:	67 2b       	or	r22, r23
     206:	31 f0       	breq	.+12     	; 0x214 <write_backlight+0x56>
     208:	e7 ec       	ldi	r30, 0xC7	; 199
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	31 97       	sbiw	r30, 0x01	; 1
     20e:	f1 f7       	brne	.-4      	; 0x20c <write_backlight+0x4e>
     210:	00 c0       	rjmp	.+0      	; 0x212 <write_backlight+0x54>
     212:	00 00       	nop
     214:	21 50       	subi	r18, 0x01	; 1
     216:	31 09       	sbc	r19, r1
     218:	a8 f6       	brcc	.-86     	; 0x1c4 <write_backlight+0x6>
			_delay_us(50);
		}
		count--;
	} while (count);

	PORTD &= ~_BV(PD4);
     21a:	5c 98       	cbi	0x0b, 4	; 11
     21c:	87 ec       	ldi	r24, 0xC7	; 199
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	01 97       	sbiw	r24, 0x01	; 1
     222:	f1 f7       	brne	.-4      	; 0x220 <write_backlight+0x62>
     224:	00 c0       	rjmp	.+0      	; 0x226 <write_backlight+0x68>
     226:	00 00       	nop
	_delay_us(50);
	PORTD |= _BV(PD4);
     228:	5c 9a       	sbi	0x0b, 4	; 11
     22a:	e7 ec       	ldi	r30, 0xC7	; 199
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	31 97       	sbiw	r30, 0x01	; 1
     230:	f1 f7       	brne	.-4      	; 0x22e <write_backlight+0x70>
     232:	00 c0       	rjmp	.+0      	; 0x234 <write_backlight+0x76>
     234:	00 00       	nop
     236:	08 95       	ret

00000238 <init_backlight>:
}


void init_backlight(void)		 // init AL3050 single wire dimming
{
	PORTD &= ~_BV(PD4);
     238:	5c 98       	cbi	0x0b, 4	; 11
     23a:	8f ed       	ldi	r24, 0xDF	; 223
     23c:	9e e2       	ldi	r25, 0x2E	; 46
     23e:	01 97       	sbiw	r24, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <init_backlight+0x6>
     242:	00 c0       	rjmp	.+0      	; 0x244 <init_backlight+0xc>
     244:	00 00       	nop
	_delay_us(3000);
	PORTD |= _BV(PD4);
     246:	5c 9a       	sbi	0x0b, 4	; 11
     248:	8f ed       	ldi	r24, 0xDF	; 223
     24a:	91 e0       	ldi	r25, 0x01	; 1
     24c:	01 97       	sbiw	r24, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <init_backlight+0x14>
     250:	00 c0       	rjmp	.+0      	; 0x252 <init_backlight+0x1a>
     252:	00 00       	nop
	_delay_us(120);
	PORTD &= ~_BV(PD4);
     254:	5c 98       	cbi	0x0b, 4	; 11
     256:	8f ec       	ldi	r24, 0xCF	; 207
     258:	97 e0       	ldi	r25, 0x07	; 7
     25a:	01 97       	sbiw	r24, 0x01	; 1
     25c:	f1 f7       	brne	.-4      	; 0x25a <init_backlight+0x22>
     25e:	00 c0       	rjmp	.+0      	; 0x260 <init_backlight+0x28>
     260:	00 00       	nop
	_delay_us(500);
	PORTD |= _BV(PD4);
     262:	5c 9a       	sbi	0x0b, 4	; 11
     264:	9a e1       	ldi	r25, 0x1A	; 26
     266:	9a 95       	dec	r25
     268:	f1 f7       	brne	.-4      	; 0x266 <init_backlight+0x2e>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <init_backlight+0x34>
	_delay_us(5);
	bllevel = 31;
     26c:	8f e1       	ldi	r24, 0x1F	; 31
     26e:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <bllevel>
	newbllevel = 31;
     272:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <newbllevel>
     276:	08 95       	ret

00000278 <write_lcd>:



								 //  write routine for LCD setup
void write_lcd(uint16_t data, uint8_t count)
{
     278:	ac 01       	movw	r20, r24
	PORTD &= ~_BV(PD4);
     27a:	5c 98       	cbi	0x0b, 4	; 11

	do
	{
		PORTB &= ~_BV(PB2);
								 // BITWISE AND -> PB2
		PORTB |= (((data & (1 << (count - 1))) != 0) << 2);
     27c:	e1 e0       	ldi	r30, 0x01	; 1
     27e:	f0 e0       	ldi	r31, 0x00	; 0
{
	PORTD &= ~_BV(PD4);

	do
	{
		PORTB &= ~_BV(PB2);
     280:	2a 98       	cbi	0x05, 2	; 5
								 // BITWISE AND -> PB2
		PORTB |= (((data & (1 << (count - 1))) != 0) << 2);
     282:	95 b1       	in	r25, 0x05	; 5
     284:	8f ef       	ldi	r24, 0xFF	; 255
     286:	86 0f       	add	r24, r22
     288:	9f 01       	movw	r18, r30
     28a:	02 c0       	rjmp	.+4      	; 0x290 <write_lcd+0x18>
     28c:	22 0f       	add	r18, r18
     28e:	33 1f       	adc	r19, r19
     290:	8a 95       	dec	r24
     292:	e2 f7       	brpl	.-8      	; 0x28c <write_lcd+0x14>
     294:	24 23       	and	r18, r20
     296:	35 23       	and	r19, r21
     298:	23 2b       	or	r18, r19
     29a:	11 f4       	brne	.+4      	; 0x2a0 <write_lcd+0x28>
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	01 c0       	rjmp	.+2      	; 0x2a2 <write_lcd+0x2a>
     2a0:	24 e0       	ldi	r18, 0x04	; 4
     2a2:	92 2b       	or	r25, r18
     2a4:	95 b9       	out	0x05, r25	; 5
		PORTB &= ~_BV(PB1);
     2a6:	29 98       	cbi	0x05, 1	; 5
     2a8:	82 e0       	ldi	r24, 0x02	; 2
     2aa:	8a 95       	dec	r24
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <write_lcd+0x32>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <write_lcd+0x38>
		_delay_us(LCD_WRITE_DELAY);
		PORTB |= _BV(PB1);
     2b0:	29 9a       	sbi	0x05, 1	; 5
     2b2:	82 e0       	ldi	r24, 0x02	; 2
     2b4:	8a 95       	dec	r24
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <write_lcd+0x3c>
     2b8:	00 c0       	rjmp	.+0      	; 0x2ba <write_lcd+0x42>
		_delay_us(LCD_WRITE_DELAY);
		count--;
     2ba:	61 50       	subi	r22, 0x01	; 1
	} while (count);
     2bc:	09 f7       	brne	.-62     	; 0x280 <write_lcd+0x8>
	PORTB &= ~_BV(PB2);
     2be:	2a 98       	cbi	0x05, 2	; 5
	PORTD |= _BV(PD4);
     2c0:	5c 9a       	sbi	0x0b, 4	; 11
     2c2:	82 e0       	ldi	r24, 0x02	; 2
     2c4:	8a 95       	dec	r24
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <write_lcd+0x4c>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <write_lcd+0x52>
     2ca:	08 95       	ret

000002cc <setup_lcd>:

}


void setup_lcd(void)
{
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29

	PORTD |= _BV(PD4);
     2d0:	5c 9a       	sbi	0x0b, 4	; 11
     2d2:	2a e1       	ldi	r18, 0x1A	; 26
     2d4:	2a 95       	dec	r18
     2d6:	f1 f7       	brne	.-4      	; 0x2d4 <setup_lcd+0x8>
     2d8:	00 c0       	rjmp	.+0      	; 0x2da <setup_lcd+0xe>
     2da:	c0 e0       	ldi	r28, 0x00	; 0
     2dc:	d1 e0       	ldi	r29, 0x01	; 1
	_delay_us(5);

	for(int x=0; x < sizeof(data_lcd_shpi397)/sizeof(uint16_t); x++ )
     2de:	83 e0       	ldi	r24, 0x03	; 3
     2e0:	c6 30       	cpi	r28, 0x06	; 6
     2e2:	d8 07       	cpc	r29, r24
     2e4:	a1 f0       	breq	.+40     	; 0x30e <setup_lcd+0x42>
	{

		if (data_lcd_shpi397[x] == 0xffff)
     2e6:	89 91       	ld	r24, Y+
     2e8:	99 91       	ld	r25, Y+
     2ea:	8f 3f       	cpi	r24, 0xFF	; 255
     2ec:	2f ef       	ldi	r18, 0xFF	; 255
     2ee:	92 07       	cpc	r25, r18
     2f0:	51 f4       	brne	.+20     	; 0x306 <setup_lcd+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f2:	8f ef       	ldi	r24, 0xFF	; 255
     2f4:	91 ee       	ldi	r25, 0xE1	; 225
     2f6:	24 e0       	ldi	r18, 0x04	; 4
     2f8:	81 50       	subi	r24, 0x01	; 1
     2fa:	90 40       	sbci	r25, 0x00	; 0
     2fc:	20 40       	sbci	r18, 0x00	; 0
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <setup_lcd+0x2c>
     300:	00 c0       	rjmp	.+0      	; 0x302 <setup_lcd+0x36>
     302:	00 00       	nop
     304:	ec cf       	rjmp	.-40     	; 0x2de <setup_lcd+0x12>
			{_delay_ms(LCD_WAIT);}
			else { write_lcd(data_lcd_shpi397[x],9);}
     306:	69 e0       	ldi	r22, 0x09	; 9
     308:	0e 94 3c 01 	call	0x278	; 0x278 <write_lcd>
     30c:	e8 cf       	rjmp	.-48     	; 0x2de <setup_lcd+0x12>

	}
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <read_analog>:


uint16_t read_analog(uint8_t channel)
{
	uint8_t low, high;
	ADCSRA |= _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
     314:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     318:	97 60       	ori	r25, 0x07	; 7
     31a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0x40;
     31e:	90 e4       	ldi	r25, 0x40	; 64
     320:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX = ((0 << REFS1) | (1 << REFS0) | (0 << ADLAR));
     324:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	if (channel >= 8)			 //
     328:	88 30       	cpi	r24, 0x08	; 8
     32a:	28 f0       	brcs	.+10     	; 0x336 <read_analog+0x22>
	{
		channel -= 0x08;		 //ch - 8
     32c:	88 50       	subi	r24, 0x08	; 8
		ADCSRB |= (1 << MUX5);	 // set MUX5 on ADCSRB to read upper bit ADC8-ADC13
     32e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     332:	90 62       	ori	r25, 0x20	; 32
     334:	03 c0       	rjmp	.+6      	; 0x33c <read_analog+0x28>
	}
	else
	{
		ADCSRB &= ~(1 << MUX5);	 // clear MUX 5
     336:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     33a:	9f 7d       	andi	r25, 0xDF	; 223
     33c:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	}
	channel &= 0x07;
	ADMUX |= channel;			 // selecting channel
     340:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     344:	87 70       	andi	r24, 0x07	; 7
     346:	89 2b       	or	r24, r25
     348:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	ADCSRA |= _BV(ADEN);
     34c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     350:	80 68       	ori	r24, 0x80	; 128
     352:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     356:	8f e3       	ldi	r24, 0x3F	; 63
     358:	9f e1       	ldi	r25, 0x1F	; 31
     35a:	01 97       	sbiw	r24, 0x01	; 1
     35c:	f1 f7       	brne	.-4      	; 0x35a <read_analog+0x46>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <read_analog+0x4c>
     360:	00 00       	nop
	_delay_ms(2);
	ADCSRA |= (1 << ADSC);
     362:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     366:	80 64       	ori	r24, 0x40	; 64
     368:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	while ((ADCSRA & _BV(ADSC)));// measuring
     36c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     370:	86 fd       	sbrc	r24, 6
     372:	fc cf       	rjmp	.-8      	; 0x36c <read_analog+0x58>
	low = ADCL;
     374:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	high = ADCH;
     378:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	return (high << 8) | low;
     37c:	90 e0       	ldi	r25, 0x00	; 0

}
     37e:	92 2b       	or	r25, r18
     380:	08 95       	ret

00000382 <readVcc>:


uint16_t readVcc(void)
{
	ADMUX = _BV(REFS0) | _BV(MUX4) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
     382:	8e e5       	ldi	r24, 0x5E	; 94
     384:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA |= _BV(ADEN);
     388:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     38c:	80 68       	ori	r24, 0x80	; 128
     38e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB &= ~_BV(MUX5);
     392:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     396:	8f 7d       	andi	r24, 0xDF	; 223
     398:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     39c:	8f e3       	ldi	r24, 0x3F	; 63
     39e:	9f e1       	ldi	r25, 0x1F	; 31
     3a0:	01 97       	sbiw	r24, 0x01	; 1
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <readVcc+0x1e>
     3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <readVcc+0x24>
     3a6:	00 00       	nop
	_delay_ms(2);
	ADCSRA |= 1 << ADSC;
     3a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3ac:	80 64       	ori	r24, 0x40	; 64
     3ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	while ((ADCSRA & _BV(ADSC)));// measuring
     3b2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3b6:	86 fd       	sbrc	r24, 6
     3b8:	fc cf       	rjmp	.-8      	; 0x3b2 <readVcc+0x30>
	ADCSRA |= 1 << ADSC;
     3ba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3be:	80 64       	ori	r24, 0x40	; 64
     3c0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	while ((ADCSRA & _BV(ADSC)));
     3c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3c8:	86 fd       	sbrc	r24, 6
     3ca:	fc cf       	rjmp	.-8      	; 0x3c4 <readVcc+0x42>
	return 1125300L / (ADCL | (ADCH<<8));
     3cc:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     3d0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	38 2b       	or	r19, r24
     3d8:	03 2e       	mov	r0, r19
     3da:	00 0c       	add	r0, r0
     3dc:	44 0b       	sbc	r20, r20
     3de:	55 0b       	sbc	r21, r21
     3e0:	64 eb       	ldi	r22, 0xB4	; 180
     3e2:	7b e2       	ldi	r23, 0x2B	; 43
     3e4:	81 e1       	ldi	r24, 0x11	; 17
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 a6 08 	call	0x114c	; 0x114c <__divmodsi4>
}
     3ec:	c9 01       	movw	r24, r18
     3ee:	08 95       	ret

000003f0 <GetTemp>:

uint16_t GetTemp(void)
{

								 // Set internal V reference, temperature reading
	ADMUX = _BV(REFS1) | _BV(REFS0) | 7;
     3f0:	87 ec       	ldi	r24, 0xC7	; 199
     3f2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRB = 0x20;				 // ref  24.6
     3f6:	80 e2       	ldi	r24, 0x20	; 32
     3f8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
								 // Clear auto trigger and interrupt enable
	ADCSRA &= ~(_BV(ADATE) | _BV(ADIE));
     3fc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     400:	87 7d       	andi	r24, 0xD7	; 215
     402:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRA |= _BV(ADEN);		 // enable the ADC
     406:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     40a:	80 68       	ori	r24, 0x80	; 128
     40c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     410:	8f e3       	ldi	r24, 0x3F	; 63
     412:	9f e1       	ldi	r25, 0x1F	; 31
     414:	01 97       	sbiw	r24, 0x01	; 1
     416:	f1 f7       	brne	.-4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     418:	00 c0       	rjmp	.+0      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     41a:	00 00       	nop
	_delay_ms(2);				 // delay for voltages to become stable.

	ADCSRA |= _BV(ADSC);		 // measuring
     41c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     420:	80 64       	ori	r24, 0x40	; 64
     422:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	while ((ADCSRA & _BV(ADSC)));
     426:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     42a:	86 fd       	sbrc	r24, 6
     42c:	fc cf       	rjmp	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>

	ADCSRA |= _BV(ADSC);
     42e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     432:	80 64       	ori	r24, 0x40	; 64
     434:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	while ((ADCSRA & _BV(ADSC)));
     438:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     43c:	86 fd       	sbrc	r24, 6
     43e:	fc cf       	rjmp	.-8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>

	return (ADCL | (ADCH << 8));
     440:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     444:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     448:	90 e0       	ldi	r25, 0x00	; 0
}
     44a:	92 2b       	or	r25, r18
     44c:	08 95       	ret

0000044e <freeRam>:


uint16_t freeRam(void)
{
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	00 d0       	rcall	.+0      	; 0x454 <freeRam+0x6>
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
	extern char __heap_start, * __brkval;
	int v;
	return (uint16_t) & v - (__brkval == 0 ? (int) & __heap_start : (int) __brkval);
     458:	20 91 3c 06 	lds	r18, 0x063C	; 0x80063c <__brkval>
     45c:	30 91 3d 06 	lds	r19, 0x063D	; 0x80063d <__brkval+0x1>
     460:	21 15       	cp	r18, r1
     462:	31 05       	cpc	r19, r1
     464:	11 f4       	brne	.+4      	; 0x46a <freeRam+0x1c>
     466:	20 e4       	ldi	r18, 0x40	; 64
     468:	36 e0       	ldi	r19, 0x06	; 6
}
     46a:	ce 01       	movw	r24, r28
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	82 1b       	sub	r24, r18
     470:	93 0b       	sbc	r25, r19
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <I2C_init>:


void I2C_init(uint8_t address)	 // setup ATmega as I2C slave
{
	cli();
     47c:	f8 94       	cli

	TWAR = (address << 1);
     47e:	88 0f       	add	r24, r24
     480:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	TWCR = (1 << TWEN) |		 // TWI Interface enabled.
     484:	85 ec       	ldi	r24, 0xC5	; 197
     486:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		(1 << TWIE) | (1 << TWINT) |// Enable TWI Interupt and clear the flag.
								 // Prepare to ACK next time the Slave is addressed.
		(1 << TWEA) | (0 << TWSTA) | (0 << TWSTO) |
		(0 << TWWC);

	buffer_address = 0xFF;
     48a:	8f ef       	ldi	r24, 0xFF	; 255
     48c:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <buffer_address>
     490:	08 95       	ret

00000492 <__vector_9>:

}


ISR(PCINT0_vect)
{
     492:	1f 92       	push	r1
     494:	0f 92       	push	r0
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	0f 92       	push	r0
     49a:	11 24       	eor	r1, r1
     49c:	8f 93       	push	r24
     49e:	9f 93       	push	r25
	sei();
     4a0:	78 94       	sei
	if (bit_is_clear(PINB, PB4)) fanspin++;
     4a2:	1c 99       	sbic	0x03, 4	; 3
     4a4:	09 c0       	rjmp	.+18     	; 0x4b8 <__vector_9+0x26>
     4a6:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <fanspin>
     4aa:	90 91 25 06 	lds	r25, 0x0625	; 0x800625 <fanspin+0x1>
     4ae:	01 96       	adiw	r24, 0x01	; 1
     4b0:	90 93 25 06 	sts	0x0625, r25	; 0x800625 <fanspin+0x1>
     4b4:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <fanspin>
}								 // counting VENT_RPM
     4b8:	9f 91       	pop	r25
     4ba:	8f 91       	pop	r24
     4bc:	0f 90       	pop	r0
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	0f 90       	pop	r0
     4c2:	1f 90       	pop	r1
     4c4:	18 95       	reti

000004c6 <__vector_23>:


ISR(TIMER0_OVF_vect)
{
     4c6:	1f 92       	push	r1
     4c8:	0f 92       	push	r0
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	0f 92       	push	r0
     4ce:	11 24       	eor	r1, r1
     4d0:	8f 93       	push	r24
     4d2:	9f 93       	push	r25
	isrtimer++;
     4d4:	80 91 36 06 	lds	r24, 0x0636	; 0x800636 <isrtimer>
     4d8:	90 91 37 06 	lds	r25, 0x0637	; 0x800637 <isrtimer+0x1>
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	90 93 37 06 	sts	0x0637, r25	; 0x800637 <isrtimer+0x1>
     4e2:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <isrtimer>
}								 // reuse timer0 for counting VENT_RPM
     4e6:	9f 91       	pop	r25
     4e8:	8f 91       	pop	r24
     4ea:	0f 90       	pop	r0
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	0f 90       	pop	r0
     4f0:	1f 90       	pop	r1
     4f2:	18 95       	reti

000004f4 <__vector_36>:


ISR(TWI_vect)
{
     4f4:	1f 92       	push	r1
     4f6:	0f 92       	push	r0
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	0f 92       	push	r0
     4fc:	11 24       	eor	r1, r1
     4fe:	2f 93       	push	r18
     500:	3f 93       	push	r19
     502:	4f 93       	push	r20
     504:	5f 93       	push	r21
     506:	6f 93       	push	r22
     508:	7f 93       	push	r23
     50a:	8f 93       	push	r24
     50c:	9f 93       	push	r25
     50e:	af 93       	push	r26
     510:	bf 93       	push	r27
     512:	cf 93       	push	r28
     514:	ef 93       	push	r30
     516:	ff 93       	push	r31

	switch (TW_STATUS)
     518:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     51c:	88 7f       	andi	r24, 0xF8	; 248
     51e:	80 38       	cpi	r24, 0x80	; 128
     520:	a9 f0       	breq	.+42     	; 0x54c <__vector_36+0x58>
     522:	68 f4       	brcc	.+26     	; 0x53e <__vector_36+0x4a>
     524:	88 23       	and	r24, r24
     526:	09 f4       	brne	.+2      	; 0x52a <__vector_36+0x36>
     528:	d6 c2       	rjmp	.+1452   	; 0xad6 <__DATA_REGION_LENGTH__+0xd6>
     52a:	80 36       	cpi	r24, 0x60	; 96
     52c:	09 f0       	breq	.+2      	; 0x530 <__vector_36+0x3c>
     52e:	d5 c2       	rjmp	.+1450   	; 0xada <__DATA_REGION_LENGTH__+0xda>
	{

		case TW_SR_SLA_ACK:

			TWCR = (1 << TWIE) | (1 << TWINT) | (1 << TWEA) | (1 << TWEN);
     530:	85 ec       	ldi	r24, 0xC5	; 197
     532:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
								 // set buffer pos undefined
			buffer_address = 0xFF;
     536:	8f ef       	ldi	r24, 0xFF	; 255
     538:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <buffer_address>
			break;
     53c:	d1 c2       	rjmp	.+1442   	; 0xae0 <__DATA_REGION_LENGTH__+0xe0>


ISR(TWI_vect)
{

	switch (TW_STATUS)
     53e:	88 3a       	cpi	r24, 0xA8	; 168
     540:	09 f4       	brne	.+2      	; 0x544 <__vector_36+0x50>
     542:	82 c1       	rjmp	.+772    	; 0x848 <__vector_36+0x354>
     544:	88 3b       	cpi	r24, 0xB8	; 184
     546:	09 f4       	brne	.+2      	; 0x54a <__vector_36+0x56>
     548:	7f c1       	rjmp	.+766    	; 0x848 <__vector_36+0x354>
     54a:	c7 c2       	rjmp	.+1422   	; 0xada <__DATA_REGION_LENGTH__+0xda>
			buffer_address = 0xFF;
			break;

		case TW_SR_DATA_ACK:	 // received data from master

			if (buffer_address == 0xFF)
     54c:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <buffer_address>
     550:	8f 3f       	cpi	r24, 0xFF	; 255
     552:	09 f0       	breq	.+2      	; 0x556 <__vector_36+0x62>
     554:	5c c0       	rjmp	.+184    	; 0x60e <__vector_36+0x11a>
			{

				commandbyte = TWDR;
     556:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     55a:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <commandbyte>
				if (crc_active)   crc = _crc8_ccitt_update(0, commandbyte);
     55e:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <crc_active>
     562:	88 23       	and	r24, r24
     564:	29 f0       	breq	.+10     	; 0x570 <__vector_36+0x7c>
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	0e 94 97 00 	call	0x12e	; 0x12e <_crc8_ccitt_update>
     56c:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <crc>
				buffer_address = 0;
     570:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <buffer_address>
				i2cerror = 0;
     574:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <i2cerror>

				switch (commandbyte)
     578:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <commandbyte>
     57c:	8e 2f       	mov	r24, r30
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	88 31       	cpi	r24, 0x18	; 24
     582:	91 05       	cpc	r25, r1
     584:	08 f0       	brcs	.+2      	; 0x588 <__vector_36+0x94>
     586:	4d c1       	rjmp	.+666    	; 0x822 <__vector_36+0x32e>
     588:	fc 01       	movw	r30, r24
     58a:	ea 5a       	subi	r30, 0xAA	; 170
     58c:	ff 4f       	sbci	r31, 0xFF	; 255
     58e:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__tablejump2__>
				{

					case 0x00: i2cbuffer = a0; break;
     592:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <a0>
     596:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <a0+0x1>
     59a:	34 c0       	rjmp	.+104    	; 0x604 <__vector_36+0x110>
					case 0x01: i2cbuffer = a1; break;
     59c:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <a1>
     5a0:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <a1+0x1>
     5a4:	2f c0       	rjmp	.+94     	; 0x604 <__vector_36+0x110>
					case 0x02: i2cbuffer = a2; break;
     5a6:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <a2>
     5aa:	90 91 34 06 	lds	r25, 0x0634	; 0x800634 <a2+0x1>
     5ae:	2a c0       	rjmp	.+84     	; 0x604 <__vector_36+0x110>
					case 0x03: i2cbuffer = a3; break;
     5b0:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <a3>
     5b4:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <a3+0x1>
     5b8:	25 c0       	rjmp	.+74     	; 0x604 <__vector_36+0x110>
					case 0x04: i2cbuffer = a4; break;
     5ba:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <a4>
     5be:	90 91 3b 06 	lds	r25, 0x063B	; 0x80063b <a4+0x1>
     5c2:	20 c0       	rjmp	.+64     	; 0x604 <__vector_36+0x110>
					case 0x05: i2cbuffer = a5; break;
     5c4:	80 91 2f 06 	lds	r24, 0x062F	; 0x80062f <a5>
     5c8:	90 91 30 06 	lds	r25, 0x0630	; 0x800630 <a5+0x1>
     5cc:	1b c0       	rjmp	.+54     	; 0x604 <__vector_36+0x110>
					case 0x06: i2cbuffer = a7; break;
     5ce:	80 91 29 06 	lds	r24, 0x0629	; 0x800629 <a7>
     5d2:	90 91 2a 06 	lds	r25, 0x062A	; 0x80062a <a7+0x1>
     5d6:	16 c0       	rjmp	.+44     	; 0x604 <__vector_36+0x110>
					case 0x08: i2cbuffer = rpm;break;
     5d8:	80 91 27 06 	lds	r24, 0x0627	; 0x800627 <rpm>
     5dc:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <rpm+0x1>
     5e0:	11 c0       	rjmp	.+34     	; 0x604 <__vector_36+0x110>
					case 0x09: i2cbuffer = vcc; break;
     5e2:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <vcc>
     5e6:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <vcc+0x1>
     5ea:	0c c0       	rjmp	.+24     	; 0x604 <__vector_36+0x110>
					case 0x0A: i2cbuffer = temp;break;
     5ec:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <temp>
     5f0:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <temp+0x1>
     5f4:	07 c0       	rjmp	.+14     	; 0x604 <__vector_36+0x110>
					case 0x0B: i2cbuffer = freeRam(); break;
     5f6:	0e 94 27 02 	call	0x44e	; 0x44e <freeRam>
     5fa:	04 c0       	rjmp	.+8      	; 0x604 <__vector_36+0x110>
					case 0x17: i2cbuffer = a7avg; break;
     5fc:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <a7avg>
     600:	90 91 2c 06 	lds	r25, 0x062C	; 0x80062c <a7avg+0x1>
     604:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <i2cbuffer+0x1>
     608:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <i2cbuffer>
     60c:	0a c1       	rjmp	.+532    	; 0x822 <__vector_36+0x32e>
				}
			}
			else
			{

				if (buffer_address == 0)
     60e:	81 11       	cpse	r24, r1
     610:	12 c0       	rjmp	.+36     	; 0x636 <__vector_36+0x142>
				{
					twdrbuffer = TWDR;
     612:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     616:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <twdrbuffer>
					if (commandbyte == 0xFE) crc_active = twdrbuffer;
     61a:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <commandbyte>
     61e:	9e 3f       	cpi	r25, 0xFE	; 254
     620:	11 f4       	brne	.+4      	; 0x626 <__vector_36+0x132>
     622:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <crc_active>
					crc = _crc8_ccitt_update(crc,TWDR);
     626:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     62a:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <crc>
     62e:	0e 94 97 00 	call	0x12e	; 0x12e <_crc8_ccitt_update>
     632:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <crc>

				}

				if ((crc_active && (buffer_address == 1) && (TWDR == crc)) ||   (!crc_active && buffer_address == 0) )
     636:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <crc_active>
     63a:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <buffer_address>
     63e:	99 23       	and	r25, r25
     640:	51 f0       	breq	.+20     	; 0x656 <__vector_36+0x162>
     642:	81 30       	cpi	r24, 0x01	; 1
     644:	09 f0       	breq	.+2      	; 0x648 <__vector_36+0x154>
     646:	e3 c0       	rjmp	.+454    	; 0x80e <__vector_36+0x31a>
     648:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     64c:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <crc>
     650:	98 13       	cpse	r25, r24
     652:	dd c0       	rjmp	.+442    	; 0x80e <__vector_36+0x31a>
     654:	02 c0       	rjmp	.+4      	; 0x65a <__vector_36+0x166>
     656:	81 11       	cpse	r24, r1
     658:	da c0       	rjmp	.+436    	; 0x80e <__vector_36+0x31a>
				{

					if (commandbyte == 0x87 ) {newbllevel = twdrbuffer;}
     65a:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <commandbyte>
     65e:	87 38       	cpi	r24, 0x87	; 135
     660:	29 f4       	brne	.+10     	; 0x66c <__vector_36+0x178>
     662:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <twdrbuffer>
     666:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <newbllevel>
     66a:	d6 c0       	rjmp	.+428    	; 0x818 <__vector_36+0x324>
								 // switch display controller on off
					else if (commandbyte == 0x98 )
     66c:	88 39       	cpi	r24, 0x98	; 152
     66e:	d9 f4       	brne	.+54     	; 0x6a6 <__vector_36+0x1b2>
					{
						displaychange = 1; if (twdrbuffer == 0xFF)
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <displaychange>
     676:	c0 91 26 06 	lds	r28, 0x0626	; 0x800626 <twdrbuffer>
						{
							write_lcd(0x029,9);write_lcd(0x013,9); display = 0xFF;
     67a:	69 e0       	ldi	r22, 0x09	; 9

					if (commandbyte == 0x87 ) {newbllevel = twdrbuffer;}
								 // switch display controller on off
					else if (commandbyte == 0x98 )
					{
						displaychange = 1; if (twdrbuffer == 0xFF)
     67c:	cf 3f       	cpi	r28, 0xFF	; 255
     67e:	61 f4       	brne	.+24     	; 0x698 <__vector_36+0x1a4>
						{
							write_lcd(0x029,9);write_lcd(0x013,9); display = 0xFF;
     680:	89 e2       	ldi	r24, 0x29	; 41
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 3c 01 	call	0x278	; 0x278 <write_lcd>
     688:	69 e0       	ldi	r22, 0x09	; 9
     68a:	83 e1       	ldi	r24, 0x13	; 19
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 3c 01 	call	0x278	; 0x278 <write_lcd>
     692:	c0 93 0b 03 	sts	0x030B, r28	; 0x80030b <display>
     696:	c0 c0       	rjmp	.+384    	; 0x818 <__vector_36+0x324>
						}
						else
						{
							write_lcd(0x028,9); display = 0x00;
     698:	88 e2       	ldi	r24, 0x28	; 40
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 3c 01 	call	0x278	; 0x278 <write_lcd>
     6a0:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <display>
     6a4:	b9 c0       	rjmp	.+370    	; 0x818 <__vector_36+0x324>
						}
					}
								 // display white / black
					else if (commandbyte == 0x99 )
     6a6:	89 39       	cpi	r24, 0x99	; 153
     6a8:	a9 f4       	brne	.+42     	; 0x6d4 <__vector_36+0x1e0>
					{
						displaychange = 1; if (twdrbuffer == 0xFF)
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <displaychange>
     6b0:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <twdrbuffer>
						{
							write_lcd(0x023,9);
     6b4:	69 e0       	ldi	r22, 0x09	; 9
						}
					}
								 // display white / black
					else if (commandbyte == 0x99 )
					{
						displaychange = 1; if (twdrbuffer == 0xFF)
     6b6:	8f 3f       	cpi	r24, 0xFF	; 255
     6b8:	19 f4       	brne	.+6      	; 0x6c0 <__vector_36+0x1cc>
						{
							write_lcd(0x023,9);
     6ba:	83 e2       	ldi	r24, 0x23	; 35
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	07 c0       	rjmp	.+14     	; 0x6ce <__vector_36+0x1da>
						}
						else if (twdrbuffer == 0x00)
     6c0:	81 11       	cpse	r24, r1
     6c2:	03 c0       	rjmp	.+6      	; 0x6ca <__vector_36+0x1d6>
						{
							write_lcd(0x022,9);
     6c4:	82 e2       	ldi	r24, 0x22	; 34
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <__vector_36+0x1da>
						}
						else
						{
							write_lcd(0x013,9);
     6ca:	83 e1       	ldi	r24, 0x13	; 19
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	0e 94 3c 01 	call	0x278	; 0x278 <write_lcd>
     6d2:	a2 c0       	rjmp	.+324    	; 0x818 <__vector_36+0x324>
						}
					}
								 //set Relais 1
					else if (commandbyte == 0x8D )
     6d4:	8d 38       	cpi	r24, 0x8D	; 141
     6d6:	41 f4       	brne	.+16     	; 0x6e8 <__vector_36+0x1f4>
					{
						if (twdrbuffer == 0xFF)
     6d8:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <twdrbuffer>
     6dc:	8f 3f       	cpi	r24, 0xFF	; 255
     6de:	11 f4       	brne	.+4      	; 0x6e4 <__vector_36+0x1f0>
						{
							PORTC |= _BV(PC6);
     6e0:	46 9a       	sbi	0x08, 6	; 8
     6e2:	9a c0       	rjmp	.+308    	; 0x818 <__vector_36+0x324>
						}
						else
						{
							PORTC &= ~_BV(PC6);
     6e4:	46 98       	cbi	0x08, 6	; 8
     6e6:	98 c0       	rjmp	.+304    	; 0x818 <__vector_36+0x324>
						}
					}
								 //set Relais 2
					else if (commandbyte == 0x8E )
     6e8:	8e 38       	cpi	r24, 0x8E	; 142
     6ea:	41 f4       	brne	.+16     	; 0x6fc <__vector_36+0x208>
					{
						if (twdrbuffer == 0xFF)
     6ec:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <twdrbuffer>
     6f0:	8f 3f       	cpi	r24, 0xFF	; 255
     6f2:	11 f4       	brne	.+4      	; 0x6f8 <__vector_36+0x204>
						{
							PORTD |= _BV(PD7);
     6f4:	5f 9a       	sbi	0x0b, 7	; 11
     6f6:	90 c0       	rjmp	.+288    	; 0x818 <__vector_36+0x324>
						}
						else
						{
							PORTD &= ~_BV(PD7);
     6f8:	5f 98       	cbi	0x0b, 7	; 11
     6fa:	8e c0       	rjmp	.+284    	; 0x818 <__vector_36+0x324>
						}
					}
								 //set Relais 3
					else if (commandbyte == 0x8F )
     6fc:	8f 38       	cpi	r24, 0x8F	; 143
     6fe:	41 f4       	brne	.+16     	; 0x710 <__vector_36+0x21c>
					{
						if (twdrbuffer == 0xFF)
     700:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <twdrbuffer>
     704:	8f 3f       	cpi	r24, 0xFF	; 255
     706:	11 f4       	brne	.+4      	; 0x70c <__vector_36+0x218>
						{
							PORTB |= _BV(PB6);
     708:	2e 9a       	sbi	0x05, 6	; 5
     70a:	86 c0       	rjmp	.+268    	; 0x818 <__vector_36+0x324>
						}
						else
						{
							PORTB &= ~_BV(PB6);
     70c:	2e 98       	cbi	0x05, 6	; 5
     70e:	84 c0       	rjmp	.+264    	; 0x818 <__vector_36+0x324>
						}
					}
								 //set D13
					else if (commandbyte == 0x90 )
     710:	80 39       	cpi	r24, 0x90	; 144
     712:	41 f4       	brne	.+16     	; 0x724 <__vector_36+0x230>
					{
						if (twdrbuffer == 0xFF)
     714:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <twdrbuffer>
     718:	8f 3f       	cpi	r24, 0xFF	; 255
     71a:	11 f4       	brne	.+4      	; 0x720 <__vector_36+0x22c>
						{
							PORTC |= _BV(PC7);
     71c:	47 9a       	sbi	0x08, 7	; 8
     71e:	7c c0       	rjmp	.+248    	; 0x818 <__vector_36+0x324>
						}
						else
						{
							PORTC &= ~_BV(PC7);
     720:	47 98       	cbi	0x08, 7	; 8
     722:	7a c0       	rjmp	.+244    	; 0x818 <__vector_36+0x324>
						}
					}
								 //set HWB ->Gasheater      (D13 on prototypes)
					else if (commandbyte == 0x91 )
     724:	81 39       	cpi	r24, 0x91	; 145
     726:	41 f4       	brne	.+16     	; 0x738 <__vector_36+0x244>
					{
						if (twdrbuffer == 0x00)
     728:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <twdrbuffer>
     72c:	81 11       	cpse	r24, r1
     72e:	02 c0       	rjmp	.+4      	; 0x734 <__vector_36+0x240>
						{
							PORTE |=  (1<<2);
     730:	72 9a       	sbi	0x0e, 2	; 14
     732:	72 c0       	rjmp	.+228    	; 0x818 <__vector_36+0x324>
						}
						else
						{
							PORTE &= ~(1<<2);
     734:	72 98       	cbi	0x0e, 2	; 14
     736:	70 c0       	rjmp	.+224    	; 0x818 <__vector_36+0x324>
						}
					}
								 //set Buzzer
					else if (commandbyte == 0x92 )
     738:	82 39       	cpi	r24, 0x92	; 146
     73a:	89 f4       	brne	.+34     	; 0x75e <__vector_36+0x26a>
					{
						if (twdrbuffer == 0xFF)
     73c:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <twdrbuffer>
     740:	8f 3f       	cpi	r24, 0xFF	; 255
     742:	11 f4       	brne	.+4      	; 0x748 <__vector_36+0x254>
						{
							PORTB |= _BV(PB5);
     744:	2d 9a       	sbi	0x05, 5	; 5
     746:	68 c0       	rjmp	.+208    	; 0x818 <__vector_36+0x324>
						}
						else if (twdrbuffer == 0x01)
     748:	81 30       	cpi	r24, 0x01	; 1
     74a:	29 f4       	brne	.+10     	; 0x756 <__vector_36+0x262>
						{
							PORTB |= _BV(PB5); twdrbuffer = 0x02;
     74c:	2d 9a       	sbi	0x05, 5	; 5
     74e:	82 e0       	ldi	r24, 0x02	; 2
     750:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <twdrbuffer>
     754:	61 c0       	rjmp	.+194    	; 0x818 <__vector_36+0x324>
						}
						else
						{
							PORTB &= ~_BV(PB5);twdrbuffer = 0x00;
     756:	2d 98       	cbi	0x05, 5	; 5
     758:	10 92 26 06 	sts	0x0626, r1	; 0x800626 <twdrbuffer>
     75c:	5d c0       	rjmp	.+186    	; 0x818 <__vector_36+0x324>
						}
					}
								 //set Vent
					else if (commandbyte == 0x93 )
     75e:	83 39       	cpi	r24, 0x93	; 147
     760:	41 f4       	brne	.+16     	; 0x772 <__vector_36+0x27e>
					{
						OCR0A = twdrbuffer;fanlevel = twdrbuffer;
     762:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <twdrbuffer>
     766:	87 bd       	out	0x27, r24	; 39
     768:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <twdrbuffer>
     76c:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <fanlevel>
     770:	53 c0       	rjmp	.+166    	; 0x818 <__vector_36+0x324>
					}
								 //set r color
					else if (commandbyte == 0x94 )
     772:	84 39       	cpi	r24, 0x94	; 148
     774:	79 f4       	brne	.+30     	; 0x794 <__vector_36+0x2a0>
					{
						led[led_position].r = twdrbuffer;changeled = 1;
     776:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <led_position>
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	fc 01       	movw	r30, r24
     77e:	ee 0f       	add	r30, r30
     780:	ff 1f       	adc	r31, r31
     782:	8e 0f       	add	r24, r30
     784:	9f 1f       	adc	r25, r31
     786:	fc 01       	movw	r30, r24
     788:	e9 5d       	subi	r30, 0xD9	; 217
     78a:	fc 4f       	sbci	r31, 0xFC	; 252
     78c:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <twdrbuffer>
     790:	81 83       	std	Z+1, r24	; 0x01
     792:	21 c0       	rjmp	.+66     	; 0x7d6 <__vector_36+0x2e2>
					}
								 //set g color
					else if (commandbyte == 0x95 )
     794:	85 39       	cpi	r24, 0x95	; 149
     796:	79 f4       	brne	.+30     	; 0x7b6 <__vector_36+0x2c2>
					{
						led[led_position].g = twdrbuffer;changeled = 1;
     798:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <led_position>
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	fc 01       	movw	r30, r24
     7a0:	ee 0f       	add	r30, r30
     7a2:	ff 1f       	adc	r31, r31
     7a4:	8e 0f       	add	r24, r30
     7a6:	9f 1f       	adc	r25, r31
     7a8:	fc 01       	movw	r30, r24
     7aa:	e9 5d       	subi	r30, 0xD9	; 217
     7ac:	fc 4f       	sbci	r31, 0xFC	; 252
     7ae:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <twdrbuffer>
     7b2:	80 83       	st	Z, r24
     7b4:	10 c0       	rjmp	.+32     	; 0x7d6 <__vector_36+0x2e2>
					}
								 //set b color
					else if (commandbyte == 0x96 )
     7b6:	86 39       	cpi	r24, 0x96	; 150
     7b8:	91 f4       	brne	.+36     	; 0x7de <__vector_36+0x2ea>
					{
						led[led_position].b = twdrbuffer;changeled = 1;
     7ba:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <led_position>
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	fc 01       	movw	r30, r24
     7c2:	ee 0f       	add	r30, r30
     7c4:	ff 1f       	adc	r31, r31
     7c6:	8e 0f       	add	r24, r30
     7c8:	9f 1f       	adc	r25, r31
     7ca:	fc 01       	movw	r30, r24
     7cc:	e9 5d       	subi	r30, 0xD9	; 217
     7ce:	fc 4f       	sbci	r31, 0xFC	; 252
     7d0:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <twdrbuffer>
     7d4:	82 83       	std	Z+2, r24	; 0x02
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <changeled>
     7dc:	1d c0       	rjmp	.+58     	; 0x818 <__vector_36+0x324>
					}
								 //jump to bootloader
					else if (commandbyte == 0xFD )
     7de:	8d 3f       	cpi	r24, 0xFD	; 253
     7e0:	41 f4       	brne	.+16     	; 0x7f2 <__vector_36+0x2fe>
					{
						if (twdrbuffer == 0xFF) jumptobootloader = 1;
     7e2:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <twdrbuffer>
     7e6:	8f 3f       	cpi	r24, 0xFF	; 255
     7e8:	b9 f4       	brne	.+46     	; 0x818 <__vector_36+0x324>
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <jumptobootloader>
     7f0:	13 c0       	rjmp	.+38     	; 0x818 <__vector_36+0x324>
					}
					else if (commandbyte == 0xA1 ) {led_position = twdrbuffer;}
     7f2:	81 3a       	cpi	r24, 0xA1	; 161
     7f4:	29 f4       	brne	.+10     	; 0x800 <__vector_36+0x30c>
     7f6:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <twdrbuffer>
     7fa:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <led_position>
     7fe:	0c c0       	rjmp	.+24     	; 0x818 <__vector_36+0x324>
					else if (commandbyte == 0xA0 ) {watchdog = twdrbuffer;}
     800:	80 3a       	cpi	r24, 0xA0	; 160
     802:	29 f4       	brne	.+10     	; 0x80e <__vector_36+0x31a>
     804:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <twdrbuffer>
     808:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <watchdog>
     80c:	05 c0       	rjmp	.+10     	; 0x818 <__vector_36+0x324>
					else {i2cerror++;}
     80e:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <i2cerror>
     812:	8f 5f       	subi	r24, 0xFF	; 255
     814:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <i2cerror>

				}
				else {i2cerror++;}

				buffer_address++;
     818:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <buffer_address>
     81c:	8f 5f       	subi	r24, 0xFF	; 255
     81e:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <buffer_address>

			}
			TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     822:	85 ec       	ldi	r24, 0xC5	; 197
     824:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			if ((commandbyte == 0x92) & (twdrbuffer == 0x02)) {_delay_us(25); PORTB &= ~_BV(PB5);}
     828:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <commandbyte>
     82c:	82 39       	cpi	r24, 0x92	; 146
     82e:	09 f0       	breq	.+2      	; 0x832 <__vector_36+0x33e>
     830:	57 c1       	rjmp	.+686    	; 0xae0 <__DATA_REGION_LENGTH__+0xe0>
     832:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <twdrbuffer>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	09 f0       	breq	.+2      	; 0x83c <__vector_36+0x348>
     83a:	52 c1       	rjmp	.+676    	; 0xae0 <__DATA_REGION_LENGTH__+0xe0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     83c:	85 e8       	ldi	r24, 0x85	; 133
     83e:	8a 95       	dec	r24
     840:	f1 f7       	brne	.-4      	; 0x83e <__vector_36+0x34a>
     842:	00 00       	nop
     844:	2d 98       	cbi	0x05, 5	; 5
     846:	4c c1       	rjmp	.+664    	; 0xae0 <__DATA_REGION_LENGTH__+0xe0>
			break;

		case TW_ST_SLA_ACK:		 //  slave adressed
		case TW_ST_DATA_ACK:

			switch(commandbyte)
     848:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <commandbyte>
     84c:	84 31       	cpi	r24, 0x14	; 20
     84e:	09 f4       	brne	.+2      	; 0x852 <__vector_36+0x35e>
     850:	6d c0       	rjmp	.+218    	; 0x92c <__vector_36+0x438>
     852:	10 f5       	brcc	.+68     	; 0x898 <__vector_36+0x3a4>
     854:	8d 30       	cpi	r24, 0x0D	; 13
     856:	09 f4       	brne	.+2      	; 0x85a <__vector_36+0x366>
     858:	c3 c0       	rjmp	.+390    	; 0x9e0 <__vector_36+0x4ec>
     85a:	58 f4       	brcc	.+22     	; 0x872 <__vector_36+0x37e>
     85c:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <buffer_address>
     860:	87 30       	cpi	r24, 0x07	; 7
     862:	09 f4       	brne	.+2      	; 0x866 <__vector_36+0x372>
     864:	0e c1       	rjmp	.+540    	; 0xa82 <__DATA_REGION_LENGTH__+0x82>
     866:	08 f4       	brcc	.+2      	; 0x86a <__vector_36+0x376>
     868:	70 c0       	rjmp	.+224    	; 0x94a <__vector_36+0x456>
     86a:	8c 30       	cpi	r24, 0x0C	; 12
     86c:	08 f0       	brcs	.+2      	; 0x870 <__vector_36+0x37c>
     86e:	82 c0       	rjmp	.+260    	; 0x974 <__vector_36+0x480>
     870:	6c c0       	rjmp	.+216    	; 0x94a <__vector_36+0x456>
     872:	80 31       	cpi	r24, 0x10	; 16
     874:	09 f4       	brne	.+2      	; 0x878 <__vector_36+0x384>
     876:	c9 c0       	rjmp	.+402    	; 0xa0a <__DATA_REGION_LENGTH__+0xa>
     878:	38 f4       	brcc	.+14     	; 0x888 <__vector_36+0x394>
     87a:	8e 30       	cpi	r24, 0x0E	; 14
     87c:	09 f4       	brne	.+2      	; 0x880 <__vector_36+0x38c>
     87e:	b7 c0       	rjmp	.+366    	; 0x9ee <__vector_36+0x4fa>
     880:	8f 30       	cpi	r24, 0x0F	; 15
     882:	09 f4       	brne	.+2      	; 0x886 <__vector_36+0x392>
     884:	bb c0       	rjmp	.+374    	; 0x9fc <__vector_36+0x508>
     886:	1a c1       	rjmp	.+564    	; 0xabc <__DATA_REGION_LENGTH__+0xbc>
     888:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <buffer_address>
     88c:	82 31       	cpi	r24, 0x12	; 18
     88e:	09 f4       	brne	.+2      	; 0x892 <__vector_36+0x39e>
     890:	d5 c0       	rjmp	.+426    	; 0xa3c <__DATA_REGION_LENGTH__+0x3c>
     892:	08 f4       	brcc	.+2      	; 0x896 <__vector_36+0x3a2>
     894:	c1 c0       	rjmp	.+386    	; 0xa18 <__DATA_REGION_LENGTH__+0x18>
     896:	db c0       	rjmp	.+438    	; 0xa4e <__DATA_REGION_LENGTH__+0x4e>
     898:	8e 37       	cpi	r24, 0x7E	; 126
     89a:	09 f4       	brne	.+2      	; 0x89e <__vector_36+0x3aa>
     89c:	dc c0       	rjmp	.+440    	; 0xa56 <__DATA_REGION_LENGTH__+0x56>
     89e:	98 f4       	brcc	.+38     	; 0x8c6 <__vector_36+0x3d2>
     8a0:	87 31       	cpi	r24, 0x17	; 23
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <__vector_36+0x3b2>
     8a4:	52 c0       	rjmp	.+164    	; 0x94a <__vector_36+0x456>
     8a6:	38 f4       	brcc	.+14     	; 0x8b6 <__vector_36+0x3c2>
     8a8:	85 31       	cpi	r24, 0x15	; 21
     8aa:	09 f4       	brne	.+2      	; 0x8ae <__vector_36+0x3ba>
     8ac:	44 c0       	rjmp	.+136    	; 0x936 <__vector_36+0x442>
     8ae:	86 31       	cpi	r24, 0x16	; 22
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <__vector_36+0x3c0>
     8b2:	46 c0       	rjmp	.+140    	; 0x940 <__vector_36+0x44c>
     8b4:	03 c1       	rjmp	.+518    	; 0xabc <__DATA_REGION_LENGTH__+0xbc>
     8b6:	80 32       	cpi	r24, 0x20	; 32
     8b8:	09 f1       	breq	.+66     	; 0x8fc <__vector_36+0x408>
     8ba:	81 32       	cpi	r24, 0x21	; 33
     8bc:	81 f1       	breq	.+96     	; 0x91e <__vector_36+0x42a>
     8be:	88 31       	cpi	r24, 0x18	; 24
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <__vector_36+0x3d0>
     8c2:	fc c0       	rjmp	.+504    	; 0xabc <__DATA_REGION_LENGTH__+0xbc>
     8c4:	14 c0       	rjmp	.+40     	; 0x8ee <__vector_36+0x3fa>
     8c6:	87 39       	cpi	r24, 0x97	; 151
     8c8:	40 f4       	brcc	.+16     	; 0x8da <__vector_36+0x3e6>
     8ca:	8d 38       	cpi	r24, 0x8D	; 141
     8cc:	50 f4       	brcc	.+20     	; 0x8e2 <__vector_36+0x3ee>
     8ce:	8f 37       	cpi	r24, 0x7F	; 127
     8d0:	09 f4       	brne	.+2      	; 0x8d4 <__vector_36+0x3e0>
     8d2:	ca c0       	rjmp	.+404    	; 0xa68 <__DATA_REGION_LENGTH__+0x68>
     8d4:	87 38       	cpi	r24, 0x87	; 135
     8d6:	29 f0       	breq	.+10     	; 0x8e2 <__vector_36+0x3ee>
     8d8:	f1 c0       	rjmp	.+482    	; 0xabc <__DATA_REGION_LENGTH__+0xbc>
     8da:	80 5a       	subi	r24, 0xA0	; 160
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	08 f0       	brcs	.+2      	; 0x8e2 <__vector_36+0x3ee>
     8e0:	ed c0       	rjmp	.+474    	; 0xabc <__DATA_REGION_LENGTH__+0xbc>
				case 0x93:
				case 0x94:
				case 0x95:
				case 0xA1:
				case 0XA0:
				case 0x96:  { TWDR = crc;  crc = 0xFF;}
     8e2:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <crc>
     8e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     8ea:	8f ef       	ldi	r24, 0xFF	; 255
     8ec:	15 c0       	rjmp	.+42     	; 0x918 <__vector_36+0x424>
				break;

				case 0x18:
					if (buffer_address == 0)  {TWDR = display; crc = _crc8_ccitt_update(crc,TWDR);}
     8ee:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <buffer_address>
     8f2:	81 11       	cpse	r24, r1
     8f4:	bf c0       	rjmp	.+382    	; 0xa74 <__DATA_REGION_LENGTH__+0x74>
     8f6:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <display>
     8fa:	06 c0       	rjmp	.+12     	; 0x908 <__vector_36+0x414>
					else     {TWDR = 0xFF; i2cerror++;}

					break;

				case 0x20:
					if (buffer_address == 0)  {TWDR = watchdog; crc = _crc8_ccitt_update(crc,TWDR);}
     8fc:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <buffer_address>
     900:	81 11       	cpse	r24, r1
     902:	b8 c0       	rjmp	.+368    	; 0xa74 <__DATA_REGION_LENGTH__+0x74>
     904:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <watchdog>
     908:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     90c:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     910:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <crc>
     914:	0e 94 97 00 	call	0x12e	; 0x12e <_crc8_ccitt_update>
     918:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <crc>
     91c:	d2 c0       	rjmp	.+420    	; 0xac2 <__DATA_REGION_LENGTH__+0xc2>
					else     {TWDR = 0xFF; i2cerror++;}

					break;

				case 0x21:
					if (buffer_address == 0)  {TWDR = led_position; crc = _crc8_ccitt_update(crc,TWDR);}
     91e:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <buffer_address>
     922:	81 11       	cpse	r24, r1
     924:	a7 c0       	rjmp	.+334    	; 0xa74 <__DATA_REGION_LENGTH__+0x74>
     926:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <led_position>
     92a:	ee cf       	rjmp	.-36     	; 0x908 <__vector_36+0x414>
					else     {TWDR = 0xFF; i2cerror++;}

					break;

				case 0x14:
					if (buffer_address == 0)  {TWDR = led[led_position].r; crc = _crc8_ccitt_update(crc,TWDR);}
     92c:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <buffer_address>
     930:	81 11       	cpse	r24, r1
     932:	a0 c0       	rjmp	.+320    	; 0xa74 <__DATA_REGION_LENGTH__+0x74>
     934:	21 c0       	rjmp	.+66     	; 0x978 <__vector_36+0x484>
					else if (crc_active && buffer_address == 1)  {TWDR = crc;}
					else                           {TWDR = 0xFF;  i2cerror++;}
					break;
				case 0x15:
					if (buffer_address == 0)  {TWDR = led[led_position].g; crc = _crc8_ccitt_update(crc,TWDR);}
     936:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <buffer_address>
     93a:	81 11       	cpse	r24, r1
     93c:	9b c0       	rjmp	.+310    	; 0xa74 <__DATA_REGION_LENGTH__+0x74>
     93e:	2b c0       	rjmp	.+86     	; 0x996 <__vector_36+0x4a2>
					else if (crc_active && buffer_address == 1)  {TWDR = crc;}
					else                           {TWDR = 0xFF;  i2cerror++;}
					break;

				case 0x16:
					if (buffer_address == 0)  {TWDR = led[led_position].b; crc = _crc8_ccitt_update(crc,TWDR);}
     940:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <buffer_address>
     944:	81 11       	cpse	r24, r1
     946:	96 c0       	rjmp	.+300    	; 0xa74 <__DATA_REGION_LENGTH__+0x74>
     948:	35 c0       	rjmp	.+106    	; 0x9b4 <__vector_36+0x4c0>
				case 0x08:
				case 0x09:
				case 0x0A:
				case 0x0B:
				case 0x17:
					if (buffer_address == 0) {TWDR = i2cbuffer & 0xFF; crc = _crc8_ccitt_update(crc,TWDR);}
     94a:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <buffer_address>
     94e:	81 11       	cpse	r24, r1
     950:	03 c0       	rjmp	.+6      	; 0x958 <__vector_36+0x464>
     952:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <i2cbuffer>
     956:	d8 cf       	rjmp	.-80     	; 0x908 <__vector_36+0x414>
					else if (buffer_address == 1) {TWDR = i2cbuffer >> 8;   crc = _crc8_ccitt_update(crc,TWDR);}
     958:	81 30       	cpi	r24, 0x01	; 1
     95a:	19 f4       	brne	.+6      	; 0x962 <__vector_36+0x46e>
     95c:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <i2cbuffer+0x1>
     960:	d3 cf       	rjmp	.-90     	; 0x908 <__vector_36+0x414>
					else if (crc_active && buffer_address == 2) {TWDR = crc;}
     962:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <crc_active>
     966:	99 23       	and	r25, r25
     968:	09 f4       	brne	.+2      	; 0x96c <__vector_36+0x478>
     96a:	9f c0       	rjmp	.+318    	; 0xaaa <__DATA_REGION_LENGTH__+0xaa>
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	09 f0       	breq	.+2      	; 0x972 <__vector_36+0x47e>
     970:	9c c0       	rjmp	.+312    	; 0xaaa <__DATA_REGION_LENGTH__+0xaa>
     972:	98 c0       	rjmp	.+304    	; 0xaa4 <__DATA_REGION_LENGTH__+0xa4>
					else                          {TWDR = 0xFF; i2cerror++;}
					break;

				case 0x0C:
					if (buffer_address == 0)  {TWDR = led[led_position].r; crc = _crc8_ccitt_update(crc,TWDR);}
     974:	91 11       	cpse	r25, r1
     976:	0d c0       	rjmp	.+26     	; 0x992 <__vector_36+0x49e>
     978:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <led_position>
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	fc 01       	movw	r30, r24
     980:	ee 0f       	add	r30, r30
     982:	ff 1f       	adc	r31, r31
     984:	8e 0f       	add	r24, r30
     986:	9f 1f       	adc	r25, r31
     988:	fc 01       	movw	r30, r24
     98a:	e9 5d       	subi	r30, 0xD9	; 217
     98c:	fc 4f       	sbci	r31, 0xFC	; 252
     98e:	81 81       	ldd	r24, Z+1	; 0x01
     990:	bb cf       	rjmp	.-138    	; 0x908 <__vector_36+0x414>
					else if (buffer_address == 1)  {TWDR = led[led_position].g; crc = _crc8_ccitt_update(crc,TWDR);}
     992:	91 30       	cpi	r25, 0x01	; 1
     994:	69 f4       	brne	.+26     	; 0x9b0 <__vector_36+0x4bc>
     996:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <led_position>
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	fc 01       	movw	r30, r24
     99e:	ee 0f       	add	r30, r30
     9a0:	ff 1f       	adc	r31, r31
     9a2:	8e 0f       	add	r24, r30
     9a4:	9f 1f       	adc	r25, r31
     9a6:	fc 01       	movw	r30, r24
     9a8:	e9 5d       	subi	r30, 0xD9	; 217
     9aa:	fc 4f       	sbci	r31, 0xFC	; 252
     9ac:	80 81       	ld	r24, Z
     9ae:	ac cf       	rjmp	.-168    	; 0x908 <__vector_36+0x414>
					else if (buffer_address == 2)  {TWDR = led[led_position].b; crc = _crc8_ccitt_update(crc,TWDR);}
     9b0:	92 30       	cpi	r25, 0x02	; 2
     9b2:	69 f4       	brne	.+26     	; 0x9ce <__vector_36+0x4da>
     9b4:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <led_position>
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	fc 01       	movw	r30, r24
     9bc:	ee 0f       	add	r30, r30
     9be:	ff 1f       	adc	r31, r31
     9c0:	8e 0f       	add	r24, r30
     9c2:	9f 1f       	adc	r25, r31
     9c4:	fc 01       	movw	r30, r24
     9c6:	e9 5d       	subi	r30, 0xD9	; 217
     9c8:	fc 4f       	sbci	r31, 0xFC	; 252
     9ca:	82 81       	ldd	r24, Z+2	; 0x02
     9cc:	9d cf       	rjmp	.-198    	; 0x908 <__vector_36+0x414>
					else if (crc_active && buffer_address == 3)  {TWDR = crc;}
     9ce:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <crc_active>
     9d2:	88 23       	and	r24, r24
     9d4:	09 f4       	brne	.+2      	; 0x9d8 <__vector_36+0x4e4>
     9d6:	69 c0       	rjmp	.+210    	; 0xaaa <__DATA_REGION_LENGTH__+0xaa>
     9d8:	93 30       	cpi	r25, 0x03	; 3
     9da:	09 f0       	breq	.+2      	; 0x9de <__vector_36+0x4ea>
     9dc:	66 c0       	rjmp	.+204    	; 0xaaa <__DATA_REGION_LENGTH__+0xaa>
     9de:	62 c0       	rjmp	.+196    	; 0xaa4 <__DATA_REGION_LENGTH__+0xa4>
					else                           {TWDR = 0xFF;  i2cerror++;}
					break;

				case 0x0D:
					if (buffer_address == 0)
     9e0:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <buffer_address>
     9e4:	81 11       	cpse	r24, r1
     9e6:	46 c0       	rjmp	.+140    	; 0xa74 <__DATA_REGION_LENGTH__+0x74>
					{
						if (bit_is_set(PINC,PC6))
     9e8:	36 9b       	sbis	0x06, 6	; 6
     9ea:	2e c0       	rjmp	.+92     	; 0xa48 <__DATA_REGION_LENGTH__+0x48>
     9ec:	2b c0       	rjmp	.+86     	; 0xa44 <__DATA_REGION_LENGTH__+0x44>
					else if (crc_active && buffer_address == 1) {TWDR = crc;}
					else {TWDR = 0xFF; i2cerror++;}
					break;

				case 0x0E:
					if (buffer_address == 0)
     9ee:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <buffer_address>
     9f2:	81 11       	cpse	r24, r1
     9f4:	3f c0       	rjmp	.+126    	; 0xa74 <__DATA_REGION_LENGTH__+0x74>
					{
						if (bit_is_set(PIND,PD7))
     9f6:	4f 9b       	sbis	0x09, 7	; 9
     9f8:	27 c0       	rjmp	.+78     	; 0xa48 <__DATA_REGION_LENGTH__+0x48>
     9fa:	24 c0       	rjmp	.+72     	; 0xa44 <__DATA_REGION_LENGTH__+0x44>
					else if (crc_active && buffer_address == 1) {TWDR = crc;}
					else                          {TWDR = 0xFF; i2cerror++;}
					break;

				case 0x0F:
					if (buffer_address == 0)
     9fc:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <buffer_address>
     a00:	81 11       	cpse	r24, r1
     a02:	38 c0       	rjmp	.+112    	; 0xa74 <__DATA_REGION_LENGTH__+0x74>
					{
						if (bit_is_set(PINB,PB6))
     a04:	1e 9b       	sbis	0x03, 6	; 3
     a06:	20 c0       	rjmp	.+64     	; 0xa48 <__DATA_REGION_LENGTH__+0x48>
     a08:	1d c0       	rjmp	.+58     	; 0xa44 <__DATA_REGION_LENGTH__+0x44>
					else if (crc_active && buffer_address == 1) { TWDR = crc;}
					else                          {TWDR = 0xFF; i2cerror++;}
					break;

				case 0x10:
					if (buffer_address == 0)
     a0a:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <buffer_address>
     a0e:	81 11       	cpse	r24, r1
     a10:	31 c0       	rjmp	.+98     	; 0xa74 <__DATA_REGION_LENGTH__+0x74>
					{
						if (bit_is_set(PINC,PC7))
     a12:	37 9b       	sbis	0x06, 7	; 6
     a14:	19 c0       	rjmp	.+50     	; 0xa48 <__DATA_REGION_LENGTH__+0x48>
     a16:	16 c0       	rjmp	.+44     	; 0xa44 <__DATA_REGION_LENGTH__+0x44>
					else if (crc_active && buffer_address == 1) {TWDR = crc;}
					else                          {TWDR = 0xFF; i2cerror++;}
					break;

				case 0x11:
					if (buffer_address == 0)
     a18:	91 11       	cpse	r25, r1
     a1a:	03 c0       	rjmp	.+6      	; 0xa22 <__DATA_REGION_LENGTH__+0x22>
					{
						if (bit_is_set(PINE,PE2))
     a1c:	62 9b       	sbis	0x0c, 2	; 12
     a1e:	12 c0       	rjmp	.+36     	; 0xa44 <__DATA_REGION_LENGTH__+0x44>
     a20:	13 c0       	rjmp	.+38     	; 0xa48 <__DATA_REGION_LENGTH__+0x48>
						{
							TWDR = 0xff;
						}
						crc = _crc8_ccitt_update(crc,TWDR);
					}
					else if (crc_active && buffer_address == 1) {TWDR = crc;}
     a22:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <crc_active>
     a26:	88 23       	and	r24, r24
     a28:	11 f0       	breq	.+4      	; 0xa2e <__DATA_REGION_LENGTH__+0x2e>
     a2a:	91 30       	cpi	r25, 0x01	; 1
     a2c:	d9 f1       	breq	.+118    	; 0xaa4 <__DATA_REGION_LENGTH__+0xa4>
					else                          {TWDR = 0xFF; buffer_address = 0xFE; i2cerror++;}
     a2e:	8f ef       	ldi	r24, 0xFF	; 255
     a30:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     a34:	8e ef       	ldi	r24, 0xFE	; 254
     a36:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <buffer_address>
     a3a:	3a c0       	rjmp	.+116    	; 0xab0 <__DATA_REGION_LENGTH__+0xb0>
					break;

				case 0x12:
					if (buffer_address == 0)
     a3c:	91 11       	cpse	r25, r1
     a3e:	2c c0       	rjmp	.+88     	; 0xa98 <__DATA_REGION_LENGTH__+0x98>
					{
						if (bit_is_set(PINB,PB5))
     a40:	1d 9b       	sbis	0x03, 5	; 3
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <__DATA_REGION_LENGTH__+0x48>
						{
							TWDR = 0xFF;
     a44:	8f ef       	ldi	r24, 0xFF	; 255
     a46:	60 cf       	rjmp	.-320    	; 0x908 <__vector_36+0x414>
						}
						else
						{
							TWDR = 0x00;
     a48:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     a4c:	5f cf       	rjmp	.-322    	; 0x90c <__vector_36+0x418>
					else if (crc_active && buffer_address == 1) {TWDR = crc;}
					else                          {TWDR = 0xFF; i2cerror++;}
					break;

				case 0x13:
					if (buffer_address == 0) {TWDR = OCR0A; crc = _crc8_ccitt_update(crc,TWDR);}
     a4e:	91 11       	cpse	r25, r1
     a50:	23 c0       	rjmp	.+70     	; 0xa98 <__DATA_REGION_LENGTH__+0x98>
     a52:	87 b5       	in	r24, 0x27	; 39
     a54:	59 cf       	rjmp	.-334    	; 0x908 <__vector_36+0x414>
					else if (crc_active && buffer_address == 1) {TWDR = crc;}
					else                          {TWDR = 0xFF; i2cerror++;}
					break;

				case 0x7E:
					if (buffer_address == 0) {TWDR = crc_active; crc = _crc8_ccitt_update(crc,TWDR);}
     a56:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <buffer_address>
     a5a:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <crc_active>
     a5e:	81 11       	cpse	r24, r1
     a60:	0b c0       	rjmp	.+22     	; 0xa78 <__DATA_REGION_LENGTH__+0x78>
     a62:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     a66:	52 cf       	rjmp	.-348    	; 0x90c <__vector_36+0x418>
					else if (crc_active && buffer_address == 1) {TWDR = crc;}
					else                          {TWDR = 0xFF; i2cerror++;}
					break;

				case 0x7F:
					if (buffer_address == 0) {TWDR = FW_VERSION; crc = _crc8_ccitt_update(crc,TWDR);}
     a68:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <buffer_address>
     a6c:	81 11       	cpse	r24, r1
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <__DATA_REGION_LENGTH__+0x74>
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	4a cf       	rjmp	.-364    	; 0x908 <__vector_36+0x414>
					else if (crc_active && buffer_address == 1) {TWDR = crc;}
     a74:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <crc_active>
     a78:	99 23       	and	r25, r25
     a7a:	b9 f0       	breq	.+46     	; 0xaaa <__DATA_REGION_LENGTH__+0xaa>
     a7c:	81 30       	cpi	r24, 0x01	; 1
     a7e:	a9 f4       	brne	.+42     	; 0xaaa <__DATA_REGION_LENGTH__+0xaa>
     a80:	11 c0       	rjmp	.+34     	; 0xaa4 <__DATA_REGION_LENGTH__+0xa4>
					else                          {TWDR = 0xFF; i2cerror++;}
					break;

				case 0x07:
					if (buffer_address == 0)  {TWDR = bllevel; if (crc_active) crc = _crc8_ccitt_update(crc,TWDR);}
     a82:	91 11       	cpse	r25, r1
     a84:	09 c0       	rjmp	.+18     	; 0xa98 <__DATA_REGION_LENGTH__+0x98>
     a86:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <bllevel>
     a8a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     a8e:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <crc_active>
     a92:	88 23       	and	r24, r24
     a94:	b1 f0       	breq	.+44     	; 0xac2 <__DATA_REGION_LENGTH__+0xc2>
     a96:	3a cf       	rjmp	.-396    	; 0x90c <__vector_36+0x418>
					else if (crc_active && buffer_address == 1)  {TWDR = crc;}
     a98:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <crc_active>
     a9c:	88 23       	and	r24, r24
     a9e:	29 f0       	breq	.+10     	; 0xaaa <__DATA_REGION_LENGTH__+0xaa>
     aa0:	91 30       	cpi	r25, 0x01	; 1
     aa2:	19 f4       	brne	.+6      	; 0xaaa <__DATA_REGION_LENGTH__+0xaa>
     aa4:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <crc>
     aa8:	0a c0       	rjmp	.+20     	; 0xabe <__DATA_REGION_LENGTH__+0xbe>
					else     {TWDR = 0xFF; i2cerror++;}
     aaa:	8f ef       	ldi	r24, 0xFF	; 255
     aac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     ab0:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <i2cerror>
     ab4:	8f 5f       	subi	r24, 0xFF	; 255
     ab6:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <i2cerror>
     aba:	03 c0       	rjmp	.+6      	; 0xac2 <__DATA_REGION_LENGTH__+0xc2>

					break;

				default: TWDR = 0xFF;
     abc:	8f ef       	ldi	r24, 0xFF	; 255
     abe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     ac2:	85 e3       	ldi	r24, 0x35	; 53
     ac4:	8a 95       	dec	r24
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <__DATA_REGION_LENGTH__+0xc4>
     ac8:	00 00       	nop

			}

			_delay_us(10);

			buffer_address++;
     aca:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <buffer_address>
     ace:	8f 5f       	subi	r24, 0xFF	; 255
     ad0:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <buffer_address>
     ad4:	02 c0       	rjmp	.+4      	; 0xada <__DATA_REGION_LENGTH__+0xda>
			TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
			break;

		case TW_BUS_ERROR:
			TWCR =   (1<<TWSTO)|(1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     ad6:	85 ed       	ldi	r24, 0xD5	; 213
     ad8:	01 c0       	rjmp	.+2      	; 0xadc <__DATA_REGION_LENGTH__+0xdc>
			break;

			//case TW_SR_STOP:  TWCR |= (1<<TWINT)|(1<<TWEA)|(1<<TWEN);  break;

		default:
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)| (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|  (0<<TWWC);
     ada:	85 ec       	ldi	r24, 0xC5	; 197
     adc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	}

}
     ae0:	ff 91       	pop	r31
     ae2:	ef 91       	pop	r30
     ae4:	cf 91       	pop	r28
     ae6:	bf 91       	pop	r27
     ae8:	af 91       	pop	r26
     aea:	9f 91       	pop	r25
     aec:	8f 91       	pop	r24
     aee:	7f 91       	pop	r23
     af0:	6f 91       	pop	r22
     af2:	5f 91       	pop	r21
     af4:	4f 91       	pop	r20
     af6:	3f 91       	pop	r19
     af8:	2f 91       	pop	r18
     afa:	0f 90       	pop	r0
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	0f 90       	pop	r0
     b00:	1f 90       	pop	r1
     b02:	18 95       	reti

00000b04 <setup>:


void setup(void)
{
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
        UDCON = 1;
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
        USBCON = (1<<FRZCLK); 
     b0e:	90 e2       	ldi	r25, 0x20	; 32
     b10:	90 93 d8 00 	sts	0x00D8, r25	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
	DDRF = 0b00000000;
     b14:	10 ba       	out	0x10, r1	; 16
	DDRD = 0b10111011;
     b16:	9b eb       	ldi	r25, 0xBB	; 187
     b18:	9a b9       	out	0x0a, r25	; 10
	PORTD= 0b00000000;
     b1a:	1b b8       	out	0x0b, r1	; 11
	DDRE = 0b00000000;
     b1c:	1d b8       	out	0x0d, r1	; 13
	DDRE |= (1<<2);				 // be carefull with hwb, check if its connected to GND via 10k (prototypes!)
     b1e:	6a 9a       	sbi	0x0d, 2	; 13
	DDRB = 0b11100110;
     b20:	96 ee       	ldi	r25, 0xE6	; 230
     b22:	94 b9       	out	0x04, r25	; 4
	DDRC = 0b11000000;
     b24:	90 ec       	ldi	r25, 0xC0	; 192
     b26:	97 b9       	out	0x07, r25	; 7
	OCR0A = 0;					 //    start value for FAN  0 / 255  (-> p-channel so inverted)       0x00 is ON  0xFF is OFF
     b28:	17 bc       	out	0x27, r1	; 39
	TCCR0B  =  0b00000001;
     b2a:	85 bd       	out	0x25, r24	; 37
	TCCR0A  =  0b10000011;		 // 8bit  62khz
     b2c:	83 e8       	ldi	r24, 0x83	; 131
     b2e:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1 << TOIE0);		 // init interrupt for timer0 overflow
     b30:	ee e6       	ldi	r30, 0x6E	; 110
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	81 60       	ori	r24, 0x01	; 1
     b38:	80 83       	st	Z, r24
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	80 e8       	ldi	r24, 0x80	; 128
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	f8 94       	cli
     b42:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
     b46:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
     b4a:	0f be       	out	0x3f, r0	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b4c:	2f ef       	ldi	r18, 0xFF	; 255
     b4e:	81 ee       	ldi	r24, 0xE1	; 225
     b50:	94 e0       	ldi	r25, 0x04	; 4
     b52:	21 50       	subi	r18, 0x01	; 1
     b54:	80 40       	sbci	r24, 0x00	; 0
     b56:	90 40       	sbci	r25, 0x00	; 0
     b58:	e1 f7       	brne	.-8      	; 0xb52 <setup+0x4e>
     b5a:	00 c0       	rjmp	.+0      	; 0xb5c <setup+0x58>
     b5c:	00 00       	nop
	clock_prescale_set(clock_div_1);
	 _delay_ms(100);
	I2C_init(I2C_ADDR);
     b5e:	8a e2       	ldi	r24, 0x2A	; 42
     b60:	0e 94 3e 02 	call	0x47c	; 0x47c <I2C_init>
	PCICR |= _BV(PCIE0);		 // enable pin change interrupt for PB0 (rpm)
     b64:	e8 e6       	ldi	r30, 0x68	; 104
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	81 60       	ori	r24, 0x01	; 1
     b6c:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT4);
     b6e:	eb e6       	ldi	r30, 0x6B	; 107
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 61       	ori	r24, 0x10	; 16
     b76:	80 83       	st	Z, r24
	sei();
     b78:	78 94       	sei

	led[0].r = 255;
     b7a:	c7 e2       	ldi	r28, 0x27	; 39
     b7c:	d3 e0       	ldi	r29, 0x03	; 3
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	89 83       	std	Y+1, r24	; 0x01
	led[0].g = 255;
     b82:	88 83       	st	Y, r24
	led[0].b = 255;
     b84:	8a 83       	std	Y+2, r24	; 0x02

	led[1].r = 255;
     b86:	8c 83       	std	Y+4, r24	; 0x04
	led[1].g = 255;
     b88:	8b 83       	std	Y+3, r24	; 0x03
	led[1].b = 255;
     b8a:	8d 83       	std	Y+5, r24	; 0x05

	ws2812_setleds(led,2);
     b8c:	62 e0       	ldi	r22, 0x02	; 2
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	ce 01       	movw	r24, r28
     b92:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ws2812_setleds>

	setup_lcd();
     b96:	0e 94 66 01 	call	0x2cc	; 0x2cc <setup_lcd>

	init_backlight();
     b9a:	0e 94 1c 01 	call	0x238	; 0x238 <init_backlight>

	led[0].r = 0;
     b9e:	19 82       	std	Y+1, r1	; 0x01
	led[0].g = 0;
     ba0:	18 82       	st	Y, r1
	led[0].b = 0;
     ba2:	1a 82       	std	Y+2, r1	; 0x02

	led[1].r = 0;
     ba4:	1c 82       	std	Y+4, r1	; 0x04
	led[1].g = 0;
     ba6:	1b 82       	std	Y+3, r1	; 0x03
	led[1].b = 0;
     ba8:	1d 82       	std	Y+5, r1	; 0x05

	ws2812_setleds(led,2);
     baa:	62 e0       	ldi	r22, 0x02	; 2
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	ce 01       	movw	r24, r28
     bb0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ws2812_setleds>

	OCR0A = 210;
     bb4:	82 ed       	ldi	r24, 0xD2	; 210
     bb6:	87 bd       	out	0x27, r24	; 39
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     bb8:	99 e2       	ldi	r25, 0x29	; 41
     bba:	88 e1       	ldi	r24, 0x18	; 24
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	a8 95       	wdr
     bc2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
	wdt_enable(WDTO_8S);

}
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <main>:


int main(void)
{
	uint8_t adcselect = 0;
	setup();
     bd2:	0e 94 82 05 	call	0xb04	; 0xb04 <setup>
}


int main(void)
{
	uint8_t adcselect = 0;
     bd6:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{

		if (jumptobootloader > 0)
		{
			TWCR =   (1<<TWSTO)|(1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (0<<TWEN);
     bd8:	01 ed       	ldi	r16, 0xD1	; 209
			cli();
			wdt_disable();
			UDCON = 1;
     bda:	ee 24       	eor	r14, r14
     bdc:	e3 94       	inc	r14
			USBCON = (1<<FRZCLK);  // disable USB
     bde:	30 e2       	ldi	r19, 0x20	; 32
     be0:	d3 2e       	mov	r13, r19
			else
			{
				watchi2c = 0;led[0].r=0; led[0].g=0;led[0].b=0; ws2812_setleds(led,1);
			}

			if (watchi2c > 10000) {led[0].r=255; led[0].g=255;led[0].b=0; ws2812_setleds(led,1);}
     be2:	ff 24       	eor	r15, r15
     be4:	fa 94       	dec	r15
		}

		wdt_reset();
		if (isrtimer > 31250)	 // routine for calculate fan speed - timer is 64khz
		{						 // 2 signals each turn
			rpm = fanspin * 30;
     be6:	4e e1       	ldi	r20, 0x1E	; 30
     be8:	c4 2e       	mov	r12, r20
			{
				a7 = read_analog(9);
				if (a7 > a7max) a7max = a7;
				if (a7 < a7min) a7min = a7;
				a7count++;
				if (a7count > 60) {a7avg = (a7max - ((a7max +  a7min)/ 2)) * 0.707 ; a7min = 1024; a7max = 0; a7count = 0;}
     bea:	c0 e0       	ldi	r28, 0x00	; 0
     bec:	d4 e0       	ldi	r29, 0x04	; 4
	setup();

	while(1)
	{

		if (jumptobootloader > 0)
     bee:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <jumptobootloader>
     bf2:	88 23       	and	r24, r24
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <main+0x26>
     bf6:	3f c0       	rjmp	.+126    	; 0xc76 <main+0xa4>
		{
			TWCR =   (1<<TWSTO)|(1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (0<<TWEN);
     bf8:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			cli();
     bfc:	f8 94       	cli
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	a8 95       	wdr
     c04:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     c08:	88 61       	ori	r24, 0x18	; 24
     c0a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     c0e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     c12:	0f be       	out	0x3f, r0	; 63
			wdt_disable();
			UDCON = 1;
     c14:	e0 92 e0 00 	sts	0x00E0, r14	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
			USBCON = (1<<FRZCLK);  // disable USB
     c18:	d0 92 d8 00 	sts	0x00D8, r13	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
			UCSR1B = 0;
     c1c:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
     c20:	2f ef       	ldi	r18, 0xFF	; 255
     c22:	80 e7       	ldi	r24, 0x70	; 112
     c24:	92 e0       	ldi	r25, 0x02	; 2
     c26:	21 50       	subi	r18, 0x01	; 1
     c28:	80 40       	sbci	r24, 0x00	; 0
     c2a:	90 40       	sbci	r25, 0x00	; 0
     c2c:	e1 f7       	brne	.-8      	; 0xc26 <main+0x54>
     c2e:	00 c0       	rjmp	.+0      	; 0xc30 <main+0x5e>
     c30:	00 00       	nop
			_delay_ms(50);
    			EIMSK = 0; PCICR = 0; SPCR = 0; ACSR = 0; EECR = 0; ADCSRA = 0;
     c32:	1d ba       	out	0x1d, r1	; 29
     c34:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
     c38:	1c bc       	out	0x2c, r1	; 44
     c3a:	10 be       	out	0x30, r1	; 48
     c3c:	1f ba       	out	0x1f, r1	; 31
     c3e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    			TIMSK0 = 0; TIMSK1 = 0; TIMSK3 = 0; TIMSK4 = 0; UCSR1B = 0; TWCR = 0;
     c42:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     c46:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     c4a:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7f8071>
     c4e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x7f8072>
     c52:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
     c56:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    			DDRB = 0; DDRC = 0; DDRD = 0; DDRE = 0; DDRF = 0; TWCR = 0;
     c5a:	14 b8       	out	0x04, r1	; 4
     c5c:	17 b8       	out	0x07, r1	; 7
     c5e:	1a b8       	out	0x0a, r1	; 10
     c60:	1d b8       	out	0x0d, r1	; 13
     c62:	10 ba       	out	0x10, r1	; 16
     c64:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    			PORTB = 0; PORTC = 0; PORTD = 0; PORTE = 0; PORTF = 0;
     c68:	15 b8       	out	0x05, r1	; 5
     c6a:	18 b8       	out	0x08, r1	; 8
     c6c:	1b b8       	out	0x0b, r1	; 11
     c6e:	1e b8       	out	0x0e, r1	; 14
     c70:	11 ba       	out	0x11, r1	; 17
    			asm volatile("jmp 0x7000");
     c72:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__data_load_end+0x59ce>


		}

		if (watchdog == 0x01)
     c76:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <watchdog>
     c7a:	81 30       	cpi	r24, 0x01	; 1
     c7c:	79 f5       	brne	.+94     	; 0xcdc <main+0x10a>
		{

			if (SCL_LINE)
     c7e:	48 9b       	sbis	0x09, 0	; 9
     c80:	0a c0       	rjmp	.+20     	; 0xc96 <main+0xc4>
			{
				watchi2c++;
     c82:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <__data_end>
     c86:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <__data_end+0x1>
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <__data_end+0x1>
     c90:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <__data_end>
     c94:	10 c0       	rjmp	.+32     	; 0xcb6 <main+0xe4>
			}
			else
			{
				watchi2c = 0;led[0].r=0; led[0].g=0;led[0].b=0; ws2812_setleds(led,1);
     c96:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <__data_end+0x1>
     c9a:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <__data_end>
     c9e:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <led+0x1>
     ca2:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <led>
     ca6:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <led+0x2>
     caa:	61 e0       	ldi	r22, 0x01	; 1
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	87 e2       	ldi	r24, 0x27	; 39
     cb0:	93 e0       	ldi	r25, 0x03	; 3
     cb2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ws2812_setleds>
			}

			if (watchi2c > 10000) {led[0].r=255; led[0].g=255;led[0].b=0; ws2812_setleds(led,1);}
     cb6:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <__data_end>
     cba:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <__data_end+0x1>
     cbe:	81 31       	cpi	r24, 0x11	; 17
     cc0:	97 42       	sbci	r25, 0x27	; 39
     cc2:	60 f0       	brcs	.+24     	; 0xcdc <main+0x10a>
     cc4:	f0 92 28 03 	sts	0x0328, r15	; 0x800328 <led+0x1>
     cc8:	f0 92 27 03 	sts	0x0327, r15	; 0x800327 <led>
     ccc:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <led+0x2>
     cd0:	61 e0       	ldi	r22, 0x01	; 1
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	87 e2       	ldi	r24, 0x27	; 39
     cd6:	93 e0       	ldi	r25, 0x03	; 3
     cd8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ws2812_setleds>
		}

		if (!SDA_LINE) {i2cerror++;}
     cdc:	49 99       	sbic	0x09, 1	; 9
     cde:	05 c0       	rjmp	.+10     	; 0xcea <main+0x118>
     ce0:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <i2cerror>
     ce4:	8f 5f       	subi	r24, 0xFF	; 255
     ce6:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <i2cerror>

		if (i2cerror > 200)
     cea:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <i2cerror>
     cee:	89 3c       	cpi	r24, 0xC9	; 201
     cf0:	40 f0       	brcs	.+16     	; 0xd02 <main+0x130>
		{
			TWCR =   (1<<TWSTO)|(1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (0<<TWEN);
     cf2:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			I2C_init(I2C_ADDR);
     cf6:	8a e2       	ldi	r24, 0x2A	; 42
     cf8:	0e 94 3e 02 	call	0x47c	; 0x47c <I2C_init>
			i2cerror = 0;
     cfc:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <i2cerror>
			sei();
     d00:	78 94       	sei
		}

		wdt_reset();
     d02:	a8 95       	wdr
		if (isrtimer > 31250)	 // routine for calculate fan speed - timer is 64khz
     d04:	80 91 36 06 	lds	r24, 0x0636	; 0x800636 <isrtimer>
     d08:	90 91 37 06 	lds	r25, 0x0637	; 0x800637 <isrtimer+0x1>
     d0c:	83 31       	cpi	r24, 0x13	; 19
     d0e:	9a 47       	sbci	r25, 0x7A	; 122
     d10:	48 f1       	brcs	.+82     	; 0xd64 <main+0x192>
		{						 // 2 signals each turn
			rpm = fanspin * 30;
     d12:	20 91 24 06 	lds	r18, 0x0624	; 0x800624 <fanspin>
     d16:	30 91 25 06 	lds	r19, 0x0625	; 0x800625 <fanspin+0x1>
     d1a:	c2 9e       	mul	r12, r18
     d1c:	c0 01       	movw	r24, r0
     d1e:	c3 9e       	mul	r12, r19
     d20:	90 0d       	add	r25, r0
     d22:	11 24       	eor	r1, r1
     d24:	90 93 28 06 	sts	0x0628, r25	; 0x800628 <rpm+0x1>
     d28:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <rpm>
			fanspin = 0;
     d2c:	10 92 25 06 	sts	0x0625, r1	; 0x800625 <fanspin+0x1>
     d30:	10 92 24 06 	sts	0x0624, r1	; 0x800624 <fanspin>
			isrtimer = 0;
     d34:	10 92 37 06 	sts	0x0637, r1	; 0x800637 <isrtimer+0x1>
     d38:	10 92 36 06 	sts	0x0636, r1	; 0x800636 <isrtimer>
			if (fanlevel == 254) //fan minimal auto
     d3c:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <fanlevel>
     d40:	2e 3f       	cpi	r18, 0xFE	; 254
     d42:	81 f4       	brne	.+32     	; 0xd64 <main+0x192>
			{
				if (rpm > 1950) {OCR0A++;}
     d44:	8f 39       	cpi	r24, 0x9F	; 159
     d46:	97 40       	sbci	r25, 0x07	; 7
     d48:	18 f0       	brcs	.+6      	; 0xd50 <main+0x17e>
     d4a:	87 b5       	in	r24, 0x27	; 39
     d4c:	8f 5f       	subi	r24, 0xFF	; 255
     d4e:	87 bd       	out	0x27, r24	; 39
				if (rpm < 1800) {OCR0A--;}
     d50:	80 91 27 06 	lds	r24, 0x0627	; 0x800627 <rpm>
     d54:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <rpm+0x1>
     d58:	88 30       	cpi	r24, 0x08	; 8
     d5a:	97 40       	sbci	r25, 0x07	; 7
     d5c:	18 f4       	brcc	.+6      	; 0xd64 <main+0x192>
     d5e:	87 b5       	in	r24, 0x27	; 39
     d60:	81 50       	subi	r24, 0x01	; 1
     d62:	87 bd       	out	0x27, r24	; 39
			}
		}
		if (displaychange) {init_backlight(); displaychange = 0;}
     d64:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <displaychange>
     d68:	88 23       	and	r24, r24
     d6a:	21 f0       	breq	.+8      	; 0xd74 <main+0x1a2>
     d6c:	0e 94 1c 01 	call	0x238	; 0x238 <init_backlight>
     d70:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <displaychange>

		if (changeled)
     d74:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <changeled>
     d78:	88 23       	and	r24, r24
     d7a:	59 f0       	breq	.+22     	; 0xd92 <main+0x1c0>
		{
			ws2812_setleds(led,led_position+1);
     d7c:	60 91 18 03 	lds	r22, 0x0318	; 0x800318 <led_position>
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	6f 5f       	subi	r22, 0xFF	; 255
     d84:	7f 4f       	sbci	r23, 0xFF	; 255
     d86:	87 e2       	ldi	r24, 0x27	; 39
     d88:	93 e0       	ldi	r25, 0x03	; 3
     d8a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ws2812_setleds>
			changeled = 0;
     d8e:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <changeled>
		}

		if (newbllevel != bllevel  && 0 <= newbllevel && newbllevel < 32)
     d92:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <newbllevel>
     d96:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <bllevel>
     d9a:	98 17       	cp	r25, r24
     d9c:	89 f0       	breq	.+34     	; 0xdc0 <main+0x1ee>
     d9e:	90 32       	cpi	r25, 0x20	; 32
     da0:	78 f4       	brcc	.+30     	; 0xdc0 <main+0x1ee>
		{

			if (newbllevel < bllevel)
     da2:	98 17       	cp	r25, r24
     da4:	10 f4       	brcc	.+4      	; 0xdaa <main+0x1d8>
			{
				bllevel--;
     da6:	81 50       	subi	r24, 0x01	; 1
     da8:	01 c0       	rjmp	.+2      	; 0xdac <main+0x1da>
			}
			else
			{
				bllevel++;
     daa:	8f 5f       	subi	r24, 0xFF	; 255
     dac:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <bllevel>
			}

			write_backlight(0b01011000);
     db0:	88 e5       	ldi	r24, 0x58	; 88
     db2:	0e 94 df 00 	call	0x1be	; 0x1be <write_backlight>
			write_backlight(0b00011111 & bllevel);
     db6:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <bllevel>
     dba:	8f 71       	andi	r24, 0x1F	; 31
     dbc:	0e 94 df 00 	call	0x1be	; 0x1be <write_backlight>
		}

		if (adcselect < 10)
     dc0:	1a 30       	cpi	r17, 0x0A	; 10
     dc2:	68 f4       	brcc	.+26     	; 0xdde <main+0x20c>
		{
			adcselect++;
     dc4:	1f 5f       	subi	r17, 0xFF	; 255
		else
		{
			adcselect = 0;
		}

		switch(adcselect)
     dc6:	81 2f       	mov	r24, r17
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	fc 01       	movw	r30, r24
     dcc:	31 97       	sbiw	r30, 0x01	; 1
     dce:	ea 30       	cpi	r30, 0x0A	; 10
     dd0:	f1 05       	cpc	r31, r1
     dd2:	08 f0       	brcs	.+2      	; 0xdd6 <main+0x204>
     dd4:	43 c0       	rjmp	.+134    	; 0xe5c <main+0x28a>
     dd6:	e2 59       	subi	r30, 0x92	; 146
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__tablejump2__>
		{
			case 0: a0 = read_analog(7);  break;
     dde:	87 e0       	ldi	r24, 0x07	; 7
     de0:	0e 94 8a 01 	call	0x314	; 0x314 <read_analog>
     de4:	90 93 39 06 	sts	0x0639, r25	; 0x800639 <a0+0x1>
     de8:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <a0>
     dec:	10 e0       	ldi	r17, 0x00	; 0
     dee:	ff ce       	rjmp	.-514    	; 0xbee <main+0x1c>
			case 1: a1 = read_analog(6);  break;
     df0:	86 e0       	ldi	r24, 0x06	; 6
     df2:	0e 94 8a 01 	call	0x314	; 0x314 <read_analog>
     df6:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <a1+0x1>
     dfa:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <a1>
     dfe:	f7 ce       	rjmp	.-530    	; 0xbee <main+0x1c>
			case 2: a2 = read_analog(5);  break;
     e00:	85 e0       	ldi	r24, 0x05	; 5
     e02:	0e 94 8a 01 	call	0x314	; 0x314 <read_analog>
     e06:	90 93 34 06 	sts	0x0634, r25	; 0x800634 <a2+0x1>
     e0a:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <a2>
     e0e:	ef ce       	rjmp	.-546    	; 0xbee <main+0x1c>
			case 4: a3 = read_analog(4);  break;
     e10:	84 e0       	ldi	r24, 0x04	; 4
     e12:	0e 94 8a 01 	call	0x314	; 0x314 <read_analog>
     e16:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <a3+0x1>
     e1a:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <a3>
     e1e:	e7 ce       	rjmp	.-562    	; 0xbee <main+0x1c>
			case 5: a4 = read_analog(1);  break;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	0e 94 8a 01 	call	0x314	; 0x314 <read_analog>
     e26:	90 93 3b 06 	sts	0x063B, r25	; 0x80063b <a4+0x1>
     e2a:	80 93 3a 06 	sts	0x063A, r24	; 0x80063a <a4>
     e2e:	df ce       	rjmp	.-578    	; 0xbee <main+0x1c>
			case 7: a5 = read_analog(0);  break;
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	0e 94 8a 01 	call	0x314	; 0x314 <read_analog>
     e36:	90 93 30 06 	sts	0x0630, r25	; 0x800630 <a5+0x1>
     e3a:	80 93 2f 06 	sts	0x062F, r24	; 0x80062f <a5>
     e3e:	d7 ce       	rjmp	.-594    	; 0xbee <main+0x1c>
			case 8: vcc = readVcc();  break;
     e40:	0e 94 c1 01 	call	0x382	; 0x382 <readVcc>
     e44:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <vcc+0x1>
     e48:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <vcc>
     e4c:	d0 ce       	rjmp	.-608    	; 0xbee <main+0x1c>
			case 10: temp = GetTemp();   break;
     e4e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <GetTemp>
     e52:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <temp+0x1>
     e56:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <temp>
     e5a:	c9 ce       	rjmp	.-622    	; 0xbee <main+0x1c>

			default:			 //read A7 more frequently
			{
				a7 = read_analog(9);
     e5c:	89 e0       	ldi	r24, 0x09	; 9
     e5e:	0e 94 8a 01 	call	0x314	; 0x314 <read_analog>
     e62:	90 93 2a 06 	sts	0x062A, r25	; 0x80062a <a7+0x1>
     e66:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <a7>
				if (a7 > a7max) a7max = a7;
     e6a:	20 91 2d 06 	lds	r18, 0x062D	; 0x80062d <a7max>
     e6e:	30 91 2e 06 	lds	r19, 0x062E	; 0x80062e <a7max+0x1>
     e72:	28 17       	cp	r18, r24
     e74:	39 07       	cpc	r19, r25
     e76:	20 f4       	brcc	.+8      	; 0xe80 <main+0x2ae>
     e78:	90 93 2e 06 	sts	0x062E, r25	; 0x80062e <a7max+0x1>
     e7c:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <a7max>
				if (a7 < a7min) a7min = a7;
     e80:	20 91 31 06 	lds	r18, 0x0631	; 0x800631 <a7min>
     e84:	30 91 32 06 	lds	r19, 0x0632	; 0x800632 <a7min+0x1>
     e88:	82 17       	cp	r24, r18
     e8a:	93 07       	cpc	r25, r19
     e8c:	20 f4       	brcc	.+8      	; 0xe96 <main+0x2c4>
     e8e:	90 93 32 06 	sts	0x0632, r25	; 0x800632 <a7min+0x1>
     e92:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <a7min>
				a7count++;
     e96:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <a7count>
     e9a:	8f 5f       	subi	r24, 0xFF	; 255
     e9c:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <a7count>
				if (a7count > 60) {a7avg = (a7max - ((a7max +  a7min)/ 2)) * 0.707 ; a7min = 1024; a7max = 0; a7count = 0;}
     ea0:	8d 33       	cpi	r24, 0x3D	; 61
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <main+0x2d4>
     ea4:	a4 ce       	rjmp	.-696    	; 0xbee <main+0x1c>
     ea6:	60 91 2d 06 	lds	r22, 0x062D	; 0x80062d <a7max>
     eaa:	70 91 2e 06 	lds	r23, 0x062E	; 0x80062e <a7max+0x1>
     eae:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <a7min>
     eb2:	90 91 32 06 	lds	r25, 0x0632	; 0x800632 <a7min+0x1>
     eb6:	86 0f       	add	r24, r22
     eb8:	97 1f       	adc	r25, r23
     eba:	96 95       	lsr	r25
     ebc:	87 95       	ror	r24
     ebe:	68 1b       	sub	r22, r24
     ec0:	79 0b       	sbc	r23, r25
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 ab 07 	call	0xf56	; 0xf56 <__floatunsisf>
     eca:	24 ef       	ldi	r18, 0xF4	; 244
     ecc:	3d ef       	ldi	r19, 0xFD	; 253
     ece:	44 e3       	ldi	r20, 0x34	; 52
     ed0:	5f e3       	ldi	r21, 0x3F	; 63
     ed2:	0e 94 11 08 	call	0x1022	; 0x1022 <__mulsf3>
     ed6:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fixunssfsi>
     eda:	70 93 2c 06 	sts	0x062C, r23	; 0x80062c <a7avg+0x1>
     ede:	60 93 2b 06 	sts	0x062B, r22	; 0x80062b <a7avg>
     ee2:	d0 93 32 06 	sts	0x0632, r29	; 0x800632 <a7min+0x1>
     ee6:	c0 93 31 06 	sts	0x0631, r28	; 0x800631 <a7min>
     eea:	10 92 2e 06 	sts	0x062E, r1	; 0x80062e <a7max+0x1>
     eee:	10 92 2d 06 	sts	0x062D, r1	; 0x80062d <a7max>
     ef2:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <a7count>
     ef6:	7b ce       	rjmp	.-778    	; 0xbee <main+0x1c>

00000ef8 <__fixunssfsi>:
     ef8:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__fp_splitA>
     efc:	88 f0       	brcs	.+34     	; 0xf20 <__fixunssfsi+0x28>
     efe:	9f 57       	subi	r25, 0x7F	; 127
     f00:	98 f0       	brcs	.+38     	; 0xf28 <__fixunssfsi+0x30>
     f02:	b9 2f       	mov	r27, r25
     f04:	99 27       	eor	r25, r25
     f06:	b7 51       	subi	r27, 0x17	; 23
     f08:	b0 f0       	brcs	.+44     	; 0xf36 <__fixunssfsi+0x3e>
     f0a:	e1 f0       	breq	.+56     	; 0xf44 <__fixunssfsi+0x4c>
     f0c:	66 0f       	add	r22, r22
     f0e:	77 1f       	adc	r23, r23
     f10:	88 1f       	adc	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	1a f0       	brmi	.+6      	; 0xf1c <__fixunssfsi+0x24>
     f16:	ba 95       	dec	r27
     f18:	c9 f7       	brne	.-14     	; 0xf0c <__fixunssfsi+0x14>
     f1a:	14 c0       	rjmp	.+40     	; 0xf44 <__fixunssfsi+0x4c>
     f1c:	b1 30       	cpi	r27, 0x01	; 1
     f1e:	91 f0       	breq	.+36     	; 0xf44 <__fixunssfsi+0x4c>
     f20:	0e 94 0a 08 	call	0x1014	; 0x1014 <__fp_zero>
     f24:	b1 e0       	ldi	r27, 0x01	; 1
     f26:	08 95       	ret
     f28:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__fp_zero>
     f2c:	67 2f       	mov	r22, r23
     f2e:	78 2f       	mov	r23, r24
     f30:	88 27       	eor	r24, r24
     f32:	b8 5f       	subi	r27, 0xF8	; 248
     f34:	39 f0       	breq	.+14     	; 0xf44 <__fixunssfsi+0x4c>
     f36:	b9 3f       	cpi	r27, 0xF9	; 249
     f38:	cc f3       	brlt	.-14     	; 0xf2c <__fixunssfsi+0x34>
     f3a:	86 95       	lsr	r24
     f3c:	77 95       	ror	r23
     f3e:	67 95       	ror	r22
     f40:	b3 95       	inc	r27
     f42:	d9 f7       	brne	.-10     	; 0xf3a <__fixunssfsi+0x42>
     f44:	3e f4       	brtc	.+14     	; 0xf54 <__fixunssfsi+0x5c>
     f46:	90 95       	com	r25
     f48:	80 95       	com	r24
     f4a:	70 95       	com	r23
     f4c:	61 95       	neg	r22
     f4e:	7f 4f       	sbci	r23, 0xFF	; 255
     f50:	8f 4f       	sbci	r24, 0xFF	; 255
     f52:	9f 4f       	sbci	r25, 0xFF	; 255
     f54:	08 95       	ret

00000f56 <__floatunsisf>:
     f56:	e8 94       	clt
     f58:	09 c0       	rjmp	.+18     	; 0xf6c <__floatsisf+0x12>

00000f5a <__floatsisf>:
     f5a:	97 fb       	bst	r25, 7
     f5c:	3e f4       	brtc	.+14     	; 0xf6c <__floatsisf+0x12>
     f5e:	90 95       	com	r25
     f60:	80 95       	com	r24
     f62:	70 95       	com	r23
     f64:	61 95       	neg	r22
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	8f 4f       	sbci	r24, 0xFF	; 255
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	99 23       	and	r25, r25
     f6e:	a9 f0       	breq	.+42     	; 0xf9a <__floatsisf+0x40>
     f70:	f9 2f       	mov	r31, r25
     f72:	96 e9       	ldi	r25, 0x96	; 150
     f74:	bb 27       	eor	r27, r27
     f76:	93 95       	inc	r25
     f78:	f6 95       	lsr	r31
     f7a:	87 95       	ror	r24
     f7c:	77 95       	ror	r23
     f7e:	67 95       	ror	r22
     f80:	b7 95       	ror	r27
     f82:	f1 11       	cpse	r31, r1
     f84:	f8 cf       	rjmp	.-16     	; 0xf76 <__floatsisf+0x1c>
     f86:	fa f4       	brpl	.+62     	; 0xfc6 <__floatsisf+0x6c>
     f88:	bb 0f       	add	r27, r27
     f8a:	11 f4       	brne	.+4      	; 0xf90 <__floatsisf+0x36>
     f8c:	60 ff       	sbrs	r22, 0
     f8e:	1b c0       	rjmp	.+54     	; 0xfc6 <__floatsisf+0x6c>
     f90:	6f 5f       	subi	r22, 0xFF	; 255
     f92:	7f 4f       	sbci	r23, 0xFF	; 255
     f94:	8f 4f       	sbci	r24, 0xFF	; 255
     f96:	9f 4f       	sbci	r25, 0xFF	; 255
     f98:	16 c0       	rjmp	.+44     	; 0xfc6 <__floatsisf+0x6c>
     f9a:	88 23       	and	r24, r24
     f9c:	11 f0       	breq	.+4      	; 0xfa2 <__floatsisf+0x48>
     f9e:	96 e9       	ldi	r25, 0x96	; 150
     fa0:	11 c0       	rjmp	.+34     	; 0xfc4 <__floatsisf+0x6a>
     fa2:	77 23       	and	r23, r23
     fa4:	21 f0       	breq	.+8      	; 0xfae <__floatsisf+0x54>
     fa6:	9e e8       	ldi	r25, 0x8E	; 142
     fa8:	87 2f       	mov	r24, r23
     faa:	76 2f       	mov	r23, r22
     fac:	05 c0       	rjmp	.+10     	; 0xfb8 <__floatsisf+0x5e>
     fae:	66 23       	and	r22, r22
     fb0:	71 f0       	breq	.+28     	; 0xfce <__floatsisf+0x74>
     fb2:	96 e8       	ldi	r25, 0x86	; 134
     fb4:	86 2f       	mov	r24, r22
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	2a f0       	brmi	.+10     	; 0xfc6 <__floatsisf+0x6c>
     fbc:	9a 95       	dec	r25
     fbe:	66 0f       	add	r22, r22
     fc0:	77 1f       	adc	r23, r23
     fc2:	88 1f       	adc	r24, r24
     fc4:	da f7       	brpl	.-10     	; 0xfbc <__floatsisf+0x62>
     fc6:	88 0f       	add	r24, r24
     fc8:	96 95       	lsr	r25
     fca:	87 95       	ror	r24
     fcc:	97 f9       	bld	r25, 7
     fce:	08 95       	ret

00000fd0 <__fp_split3>:
     fd0:	57 fd       	sbrc	r21, 7
     fd2:	90 58       	subi	r25, 0x80	; 128
     fd4:	44 0f       	add	r20, r20
     fd6:	55 1f       	adc	r21, r21
     fd8:	59 f0       	breq	.+22     	; 0xff0 <__fp_splitA+0x10>
     fda:	5f 3f       	cpi	r21, 0xFF	; 255
     fdc:	71 f0       	breq	.+28     	; 0xffa <__fp_splitA+0x1a>
     fde:	47 95       	ror	r20

00000fe0 <__fp_splitA>:
     fe0:	88 0f       	add	r24, r24
     fe2:	97 fb       	bst	r25, 7
     fe4:	99 1f       	adc	r25, r25
     fe6:	61 f0       	breq	.+24     	; 0x1000 <__fp_splitA+0x20>
     fe8:	9f 3f       	cpi	r25, 0xFF	; 255
     fea:	79 f0       	breq	.+30     	; 0x100a <__fp_splitA+0x2a>
     fec:	87 95       	ror	r24
     fee:	08 95       	ret
     ff0:	12 16       	cp	r1, r18
     ff2:	13 06       	cpc	r1, r19
     ff4:	14 06       	cpc	r1, r20
     ff6:	55 1f       	adc	r21, r21
     ff8:	f2 cf       	rjmp	.-28     	; 0xfde <__fp_split3+0xe>
     ffa:	46 95       	lsr	r20
     ffc:	f1 df       	rcall	.-30     	; 0xfe0 <__fp_splitA>
     ffe:	08 c0       	rjmp	.+16     	; 0x1010 <__fp_splitA+0x30>
    1000:	16 16       	cp	r1, r22
    1002:	17 06       	cpc	r1, r23
    1004:	18 06       	cpc	r1, r24
    1006:	99 1f       	adc	r25, r25
    1008:	f1 cf       	rjmp	.-30     	; 0xfec <__fp_splitA+0xc>
    100a:	86 95       	lsr	r24
    100c:	71 05       	cpc	r23, r1
    100e:	61 05       	cpc	r22, r1
    1010:	08 94       	sec
    1012:	08 95       	ret

00001014 <__fp_zero>:
    1014:	e8 94       	clt

00001016 <__fp_szero>:
    1016:	bb 27       	eor	r27, r27
    1018:	66 27       	eor	r22, r22
    101a:	77 27       	eor	r23, r23
    101c:	cb 01       	movw	r24, r22
    101e:	97 f9       	bld	r25, 7
    1020:	08 95       	ret

00001022 <__mulsf3>:
    1022:	0e 94 24 08 	call	0x1048	; 0x1048 <__mulsf3x>
    1026:	0c 94 95 08 	jmp	0x112a	; 0x112a <__fp_round>
    102a:	0e 94 87 08 	call	0x110e	; 0x110e <__fp_pscA>
    102e:	38 f0       	brcs	.+14     	; 0x103e <__mulsf3+0x1c>
    1030:	0e 94 8e 08 	call	0x111c	; 0x111c <__fp_pscB>
    1034:	20 f0       	brcs	.+8      	; 0x103e <__mulsf3+0x1c>
    1036:	95 23       	and	r25, r21
    1038:	11 f0       	breq	.+4      	; 0x103e <__mulsf3+0x1c>
    103a:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__fp_inf>
    103e:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__fp_nan>
    1042:	11 24       	eor	r1, r1
    1044:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__fp_szero>

00001048 <__mulsf3x>:
    1048:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fp_split3>
    104c:	70 f3       	brcs	.-36     	; 0x102a <__mulsf3+0x8>

0000104e <__mulsf3_pse>:
    104e:	95 9f       	mul	r25, r21
    1050:	c1 f3       	breq	.-16     	; 0x1042 <__mulsf3+0x20>
    1052:	95 0f       	add	r25, r21
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	55 1f       	adc	r21, r21
    1058:	62 9f       	mul	r22, r18
    105a:	f0 01       	movw	r30, r0
    105c:	72 9f       	mul	r23, r18
    105e:	bb 27       	eor	r27, r27
    1060:	f0 0d       	add	r31, r0
    1062:	b1 1d       	adc	r27, r1
    1064:	63 9f       	mul	r22, r19
    1066:	aa 27       	eor	r26, r26
    1068:	f0 0d       	add	r31, r0
    106a:	b1 1d       	adc	r27, r1
    106c:	aa 1f       	adc	r26, r26
    106e:	64 9f       	mul	r22, r20
    1070:	66 27       	eor	r22, r22
    1072:	b0 0d       	add	r27, r0
    1074:	a1 1d       	adc	r26, r1
    1076:	66 1f       	adc	r22, r22
    1078:	82 9f       	mul	r24, r18
    107a:	22 27       	eor	r18, r18
    107c:	b0 0d       	add	r27, r0
    107e:	a1 1d       	adc	r26, r1
    1080:	62 1f       	adc	r22, r18
    1082:	73 9f       	mul	r23, r19
    1084:	b0 0d       	add	r27, r0
    1086:	a1 1d       	adc	r26, r1
    1088:	62 1f       	adc	r22, r18
    108a:	83 9f       	mul	r24, r19
    108c:	a0 0d       	add	r26, r0
    108e:	61 1d       	adc	r22, r1
    1090:	22 1f       	adc	r18, r18
    1092:	74 9f       	mul	r23, r20
    1094:	33 27       	eor	r19, r19
    1096:	a0 0d       	add	r26, r0
    1098:	61 1d       	adc	r22, r1
    109a:	23 1f       	adc	r18, r19
    109c:	84 9f       	mul	r24, r20
    109e:	60 0d       	add	r22, r0
    10a0:	21 1d       	adc	r18, r1
    10a2:	82 2f       	mov	r24, r18
    10a4:	76 2f       	mov	r23, r22
    10a6:	6a 2f       	mov	r22, r26
    10a8:	11 24       	eor	r1, r1
    10aa:	9f 57       	subi	r25, 0x7F	; 127
    10ac:	50 40       	sbci	r21, 0x00	; 0
    10ae:	9a f0       	brmi	.+38     	; 0x10d6 <__mulsf3_pse+0x88>
    10b0:	f1 f0       	breq	.+60     	; 0x10ee <__mulsf3_pse+0xa0>
    10b2:	88 23       	and	r24, r24
    10b4:	4a f0       	brmi	.+18     	; 0x10c8 <__mulsf3_pse+0x7a>
    10b6:	ee 0f       	add	r30, r30
    10b8:	ff 1f       	adc	r31, r31
    10ba:	bb 1f       	adc	r27, r27
    10bc:	66 1f       	adc	r22, r22
    10be:	77 1f       	adc	r23, r23
    10c0:	88 1f       	adc	r24, r24
    10c2:	91 50       	subi	r25, 0x01	; 1
    10c4:	50 40       	sbci	r21, 0x00	; 0
    10c6:	a9 f7       	brne	.-22     	; 0x10b2 <__mulsf3_pse+0x64>
    10c8:	9e 3f       	cpi	r25, 0xFE	; 254
    10ca:	51 05       	cpc	r21, r1
    10cc:	80 f0       	brcs	.+32     	; 0x10ee <__mulsf3_pse+0xa0>
    10ce:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__fp_inf>
    10d2:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__fp_szero>
    10d6:	5f 3f       	cpi	r21, 0xFF	; 255
    10d8:	e4 f3       	brlt	.-8      	; 0x10d2 <__mulsf3_pse+0x84>
    10da:	98 3e       	cpi	r25, 0xE8	; 232
    10dc:	d4 f3       	brlt	.-12     	; 0x10d2 <__mulsf3_pse+0x84>
    10de:	86 95       	lsr	r24
    10e0:	77 95       	ror	r23
    10e2:	67 95       	ror	r22
    10e4:	b7 95       	ror	r27
    10e6:	f7 95       	ror	r31
    10e8:	e7 95       	ror	r30
    10ea:	9f 5f       	subi	r25, 0xFF	; 255
    10ec:	c1 f7       	brne	.-16     	; 0x10de <__mulsf3_pse+0x90>
    10ee:	fe 2b       	or	r31, r30
    10f0:	88 0f       	add	r24, r24
    10f2:	91 1d       	adc	r25, r1
    10f4:	96 95       	lsr	r25
    10f6:	87 95       	ror	r24
    10f8:	97 f9       	bld	r25, 7
    10fa:	08 95       	ret

000010fc <__fp_inf>:
    10fc:	97 f9       	bld	r25, 7
    10fe:	9f 67       	ori	r25, 0x7F	; 127
    1100:	80 e8       	ldi	r24, 0x80	; 128
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	08 95       	ret

00001108 <__fp_nan>:
    1108:	9f ef       	ldi	r25, 0xFF	; 255
    110a:	80 ec       	ldi	r24, 0xC0	; 192
    110c:	08 95       	ret

0000110e <__fp_pscA>:
    110e:	00 24       	eor	r0, r0
    1110:	0a 94       	dec	r0
    1112:	16 16       	cp	r1, r22
    1114:	17 06       	cpc	r1, r23
    1116:	18 06       	cpc	r1, r24
    1118:	09 06       	cpc	r0, r25
    111a:	08 95       	ret

0000111c <__fp_pscB>:
    111c:	00 24       	eor	r0, r0
    111e:	0a 94       	dec	r0
    1120:	12 16       	cp	r1, r18
    1122:	13 06       	cpc	r1, r19
    1124:	14 06       	cpc	r1, r20
    1126:	05 06       	cpc	r0, r21
    1128:	08 95       	ret

0000112a <__fp_round>:
    112a:	09 2e       	mov	r0, r25
    112c:	03 94       	inc	r0
    112e:	00 0c       	add	r0, r0
    1130:	11 f4       	brne	.+4      	; 0x1136 <__fp_round+0xc>
    1132:	88 23       	and	r24, r24
    1134:	52 f0       	brmi	.+20     	; 0x114a <__fp_round+0x20>
    1136:	bb 0f       	add	r27, r27
    1138:	40 f4       	brcc	.+16     	; 0x114a <__fp_round+0x20>
    113a:	bf 2b       	or	r27, r31
    113c:	11 f4       	brne	.+4      	; 0x1142 <__fp_round+0x18>
    113e:	60 ff       	sbrs	r22, 0
    1140:	04 c0       	rjmp	.+8      	; 0x114a <__fp_round+0x20>
    1142:	6f 5f       	subi	r22, 0xFF	; 255
    1144:	7f 4f       	sbci	r23, 0xFF	; 255
    1146:	8f 4f       	sbci	r24, 0xFF	; 255
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	08 95       	ret

0000114c <__divmodsi4>:
    114c:	05 2e       	mov	r0, r21
    114e:	97 fb       	bst	r25, 7
    1150:	1e f4       	brtc	.+6      	; 0x1158 <__divmodsi4+0xc>
    1152:	00 94       	com	r0
    1154:	0e 94 bd 08 	call	0x117a	; 0x117a <__negsi2>
    1158:	57 fd       	sbrc	r21, 7
    115a:	07 d0       	rcall	.+14     	; 0x116a <__divmodsi4_neg2>
    115c:	0e 94 cb 08 	call	0x1196	; 0x1196 <__udivmodsi4>
    1160:	07 fc       	sbrc	r0, 7
    1162:	03 d0       	rcall	.+6      	; 0x116a <__divmodsi4_neg2>
    1164:	4e f4       	brtc	.+18     	; 0x1178 <__divmodsi4_exit>
    1166:	0c 94 bd 08 	jmp	0x117a	; 0x117a <__negsi2>

0000116a <__divmodsi4_neg2>:
    116a:	50 95       	com	r21
    116c:	40 95       	com	r20
    116e:	30 95       	com	r19
    1170:	21 95       	neg	r18
    1172:	3f 4f       	sbci	r19, 0xFF	; 255
    1174:	4f 4f       	sbci	r20, 0xFF	; 255
    1176:	5f 4f       	sbci	r21, 0xFF	; 255

00001178 <__divmodsi4_exit>:
    1178:	08 95       	ret

0000117a <__negsi2>:
    117a:	90 95       	com	r25
    117c:	80 95       	com	r24
    117e:	70 95       	com	r23
    1180:	61 95       	neg	r22
    1182:	7f 4f       	sbci	r23, 0xFF	; 255
    1184:	8f 4f       	sbci	r24, 0xFF	; 255
    1186:	9f 4f       	sbci	r25, 0xFF	; 255
    1188:	08 95       	ret

0000118a <__tablejump2__>:
    118a:	ee 0f       	add	r30, r30
    118c:	ff 1f       	adc	r31, r31
    118e:	05 90       	lpm	r0, Z+
    1190:	f4 91       	lpm	r31, Z
    1192:	e0 2d       	mov	r30, r0
    1194:	09 94       	ijmp

00001196 <__udivmodsi4>:
    1196:	a1 e2       	ldi	r26, 0x21	; 33
    1198:	1a 2e       	mov	r1, r26
    119a:	aa 1b       	sub	r26, r26
    119c:	bb 1b       	sub	r27, r27
    119e:	fd 01       	movw	r30, r26
    11a0:	0d c0       	rjmp	.+26     	; 0x11bc <__udivmodsi4_ep>

000011a2 <__udivmodsi4_loop>:
    11a2:	aa 1f       	adc	r26, r26
    11a4:	bb 1f       	adc	r27, r27
    11a6:	ee 1f       	adc	r30, r30
    11a8:	ff 1f       	adc	r31, r31
    11aa:	a2 17       	cp	r26, r18
    11ac:	b3 07       	cpc	r27, r19
    11ae:	e4 07       	cpc	r30, r20
    11b0:	f5 07       	cpc	r31, r21
    11b2:	20 f0       	brcs	.+8      	; 0x11bc <__udivmodsi4_ep>
    11b4:	a2 1b       	sub	r26, r18
    11b6:	b3 0b       	sbc	r27, r19
    11b8:	e4 0b       	sbc	r30, r20
    11ba:	f5 0b       	sbc	r31, r21

000011bc <__udivmodsi4_ep>:
    11bc:	66 1f       	adc	r22, r22
    11be:	77 1f       	adc	r23, r23
    11c0:	88 1f       	adc	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	1a 94       	dec	r1
    11c6:	69 f7       	brne	.-38     	; 0x11a2 <__udivmodsi4_loop>
    11c8:	60 95       	com	r22
    11ca:	70 95       	com	r23
    11cc:	80 95       	com	r24
    11ce:	90 95       	com	r25
    11d0:	9b 01       	movw	r18, r22
    11d2:	ac 01       	movw	r20, r24
    11d4:	bd 01       	movw	r22, r26
    11d6:	cf 01       	movw	r24, r30
    11d8:	08 95       	ret

000011da <malloc>:
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	91 05       	cpc	r25, r1
    11e6:	10 f4       	brcc	.+4      	; 0x11ec <malloc+0x12>
    11e8:	82 e0       	ldi	r24, 0x02	; 2
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	e0 91 3e 06 	lds	r30, 0x063E	; 0x80063e <__flp>
    11f0:	f0 91 3f 06 	lds	r31, 0x063F	; 0x80063f <__flp+0x1>
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	a0 e0       	ldi	r26, 0x00	; 0
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	30 97       	sbiw	r30, 0x00	; 0
    11fe:	19 f1       	breq	.+70     	; 0x1246 <malloc+0x6c>
    1200:	40 81       	ld	r20, Z
    1202:	51 81       	ldd	r21, Z+1	; 0x01
    1204:	02 81       	ldd	r16, Z+2	; 0x02
    1206:	13 81       	ldd	r17, Z+3	; 0x03
    1208:	48 17       	cp	r20, r24
    120a:	59 07       	cpc	r21, r25
    120c:	c8 f0       	brcs	.+50     	; 0x1240 <malloc+0x66>
    120e:	84 17       	cp	r24, r20
    1210:	95 07       	cpc	r25, r21
    1212:	69 f4       	brne	.+26     	; 0x122e <malloc+0x54>
    1214:	10 97       	sbiw	r26, 0x00	; 0
    1216:	31 f0       	breq	.+12     	; 0x1224 <malloc+0x4a>
    1218:	12 96       	adiw	r26, 0x02	; 2
    121a:	0c 93       	st	X, r16
    121c:	12 97       	sbiw	r26, 0x02	; 2
    121e:	13 96       	adiw	r26, 0x03	; 3
    1220:	1c 93       	st	X, r17
    1222:	27 c0       	rjmp	.+78     	; 0x1272 <malloc+0x98>
    1224:	00 93 3e 06 	sts	0x063E, r16	; 0x80063e <__flp>
    1228:	10 93 3f 06 	sts	0x063F, r17	; 0x80063f <__flp+0x1>
    122c:	22 c0       	rjmp	.+68     	; 0x1272 <malloc+0x98>
    122e:	21 15       	cp	r18, r1
    1230:	31 05       	cpc	r19, r1
    1232:	19 f0       	breq	.+6      	; 0x123a <malloc+0x60>
    1234:	42 17       	cp	r20, r18
    1236:	53 07       	cpc	r21, r19
    1238:	18 f4       	brcc	.+6      	; 0x1240 <malloc+0x66>
    123a:	9a 01       	movw	r18, r20
    123c:	bd 01       	movw	r22, r26
    123e:	ef 01       	movw	r28, r30
    1240:	df 01       	movw	r26, r30
    1242:	f8 01       	movw	r30, r16
    1244:	db cf       	rjmp	.-74     	; 0x11fc <malloc+0x22>
    1246:	21 15       	cp	r18, r1
    1248:	31 05       	cpc	r19, r1
    124a:	f9 f0       	breq	.+62     	; 0x128a <malloc+0xb0>
    124c:	28 1b       	sub	r18, r24
    124e:	39 0b       	sbc	r19, r25
    1250:	24 30       	cpi	r18, 0x04	; 4
    1252:	31 05       	cpc	r19, r1
    1254:	80 f4       	brcc	.+32     	; 0x1276 <malloc+0x9c>
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	9b 81       	ldd	r25, Y+3	; 0x03
    125a:	61 15       	cp	r22, r1
    125c:	71 05       	cpc	r23, r1
    125e:	21 f0       	breq	.+8      	; 0x1268 <malloc+0x8e>
    1260:	fb 01       	movw	r30, r22
    1262:	93 83       	std	Z+3, r25	; 0x03
    1264:	82 83       	std	Z+2, r24	; 0x02
    1266:	04 c0       	rjmp	.+8      	; 0x1270 <malloc+0x96>
    1268:	90 93 3f 06 	sts	0x063F, r25	; 0x80063f <__flp+0x1>
    126c:	80 93 3e 06 	sts	0x063E, r24	; 0x80063e <__flp>
    1270:	fe 01       	movw	r30, r28
    1272:	32 96       	adiw	r30, 0x02	; 2
    1274:	44 c0       	rjmp	.+136    	; 0x12fe <malloc+0x124>
    1276:	fe 01       	movw	r30, r28
    1278:	e2 0f       	add	r30, r18
    127a:	f3 1f       	adc	r31, r19
    127c:	81 93       	st	Z+, r24
    127e:	91 93       	st	Z+, r25
    1280:	22 50       	subi	r18, 0x02	; 2
    1282:	31 09       	sbc	r19, r1
    1284:	39 83       	std	Y+1, r19	; 0x01
    1286:	28 83       	st	Y, r18
    1288:	3a c0       	rjmp	.+116    	; 0x12fe <malloc+0x124>
    128a:	20 91 3c 06 	lds	r18, 0x063C	; 0x80063c <__brkval>
    128e:	30 91 3d 06 	lds	r19, 0x063D	; 0x80063d <__brkval+0x1>
    1292:	23 2b       	or	r18, r19
    1294:	41 f4       	brne	.+16     	; 0x12a6 <malloc+0xcc>
    1296:	20 91 0e 03 	lds	r18, 0x030E	; 0x80030e <__malloc_heap_start>
    129a:	30 91 0f 03 	lds	r19, 0x030F	; 0x80030f <__malloc_heap_start+0x1>
    129e:	30 93 3d 06 	sts	0x063D, r19	; 0x80063d <__brkval+0x1>
    12a2:	20 93 3c 06 	sts	0x063C, r18	; 0x80063c <__brkval>
    12a6:	20 91 0c 03 	lds	r18, 0x030C	; 0x80030c <__malloc_heap_end>
    12aa:	30 91 0d 03 	lds	r19, 0x030D	; 0x80030d <__malloc_heap_end+0x1>
    12ae:	21 15       	cp	r18, r1
    12b0:	31 05       	cpc	r19, r1
    12b2:	41 f4       	brne	.+16     	; 0x12c4 <malloc+0xea>
    12b4:	2d b7       	in	r18, 0x3d	; 61
    12b6:	3e b7       	in	r19, 0x3e	; 62
    12b8:	40 91 10 03 	lds	r20, 0x0310	; 0x800310 <__malloc_margin>
    12bc:	50 91 11 03 	lds	r21, 0x0311	; 0x800311 <__malloc_margin+0x1>
    12c0:	24 1b       	sub	r18, r20
    12c2:	35 0b       	sbc	r19, r21
    12c4:	e0 91 3c 06 	lds	r30, 0x063C	; 0x80063c <__brkval>
    12c8:	f0 91 3d 06 	lds	r31, 0x063D	; 0x80063d <__brkval+0x1>
    12cc:	e2 17       	cp	r30, r18
    12ce:	f3 07       	cpc	r31, r19
    12d0:	a0 f4       	brcc	.+40     	; 0x12fa <malloc+0x120>
    12d2:	2e 1b       	sub	r18, r30
    12d4:	3f 0b       	sbc	r19, r31
    12d6:	28 17       	cp	r18, r24
    12d8:	39 07       	cpc	r19, r25
    12da:	78 f0       	brcs	.+30     	; 0x12fa <malloc+0x120>
    12dc:	ac 01       	movw	r20, r24
    12de:	4e 5f       	subi	r20, 0xFE	; 254
    12e0:	5f 4f       	sbci	r21, 0xFF	; 255
    12e2:	24 17       	cp	r18, r20
    12e4:	35 07       	cpc	r19, r21
    12e6:	48 f0       	brcs	.+18     	; 0x12fa <malloc+0x120>
    12e8:	4e 0f       	add	r20, r30
    12ea:	5f 1f       	adc	r21, r31
    12ec:	50 93 3d 06 	sts	0x063D, r21	; 0x80063d <__brkval+0x1>
    12f0:	40 93 3c 06 	sts	0x063C, r20	; 0x80063c <__brkval>
    12f4:	81 93       	st	Z+, r24
    12f6:	91 93       	st	Z+, r25
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <malloc+0x124>
    12fa:	e0 e0       	ldi	r30, 0x00	; 0
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	cf 01       	movw	r24, r30
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	08 95       	ret

0000130a <free>:
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	09 f4       	brne	.+2      	; 0x1314 <free+0xa>
    1312:	81 c0       	rjmp	.+258    	; 0x1416 <free+0x10c>
    1314:	fc 01       	movw	r30, r24
    1316:	32 97       	sbiw	r30, 0x02	; 2
    1318:	13 82       	std	Z+3, r1	; 0x03
    131a:	12 82       	std	Z+2, r1	; 0x02
    131c:	a0 91 3e 06 	lds	r26, 0x063E	; 0x80063e <__flp>
    1320:	b0 91 3f 06 	lds	r27, 0x063F	; 0x80063f <__flp+0x1>
    1324:	10 97       	sbiw	r26, 0x00	; 0
    1326:	81 f4       	brne	.+32     	; 0x1348 <free+0x3e>
    1328:	20 81       	ld	r18, Z
    132a:	31 81       	ldd	r19, Z+1	; 0x01
    132c:	82 0f       	add	r24, r18
    132e:	93 1f       	adc	r25, r19
    1330:	20 91 3c 06 	lds	r18, 0x063C	; 0x80063c <__brkval>
    1334:	30 91 3d 06 	lds	r19, 0x063D	; 0x80063d <__brkval+0x1>
    1338:	28 17       	cp	r18, r24
    133a:	39 07       	cpc	r19, r25
    133c:	51 f5       	brne	.+84     	; 0x1392 <free+0x88>
    133e:	f0 93 3d 06 	sts	0x063D, r31	; 0x80063d <__brkval+0x1>
    1342:	e0 93 3c 06 	sts	0x063C, r30	; 0x80063c <__brkval>
    1346:	67 c0       	rjmp	.+206    	; 0x1416 <free+0x10c>
    1348:	ed 01       	movw	r28, r26
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	ce 17       	cp	r28, r30
    1350:	df 07       	cpc	r29, r31
    1352:	40 f4       	brcc	.+16     	; 0x1364 <free+0x5a>
    1354:	4a 81       	ldd	r20, Y+2	; 0x02
    1356:	5b 81       	ldd	r21, Y+3	; 0x03
    1358:	9e 01       	movw	r18, r28
    135a:	41 15       	cp	r20, r1
    135c:	51 05       	cpc	r21, r1
    135e:	f1 f0       	breq	.+60     	; 0x139c <free+0x92>
    1360:	ea 01       	movw	r28, r20
    1362:	f5 cf       	rjmp	.-22     	; 0x134e <free+0x44>
    1364:	d3 83       	std	Z+3, r29	; 0x03
    1366:	c2 83       	std	Z+2, r28	; 0x02
    1368:	40 81       	ld	r20, Z
    136a:	51 81       	ldd	r21, Z+1	; 0x01
    136c:	84 0f       	add	r24, r20
    136e:	95 1f       	adc	r25, r21
    1370:	c8 17       	cp	r28, r24
    1372:	d9 07       	cpc	r29, r25
    1374:	59 f4       	brne	.+22     	; 0x138c <free+0x82>
    1376:	88 81       	ld	r24, Y
    1378:	99 81       	ldd	r25, Y+1	; 0x01
    137a:	84 0f       	add	r24, r20
    137c:	95 1f       	adc	r25, r21
    137e:	02 96       	adiw	r24, 0x02	; 2
    1380:	91 83       	std	Z+1, r25	; 0x01
    1382:	80 83       	st	Z, r24
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	9b 81       	ldd	r25, Y+3	; 0x03
    1388:	93 83       	std	Z+3, r25	; 0x03
    138a:	82 83       	std	Z+2, r24	; 0x02
    138c:	21 15       	cp	r18, r1
    138e:	31 05       	cpc	r19, r1
    1390:	29 f4       	brne	.+10     	; 0x139c <free+0x92>
    1392:	f0 93 3f 06 	sts	0x063F, r31	; 0x80063f <__flp+0x1>
    1396:	e0 93 3e 06 	sts	0x063E, r30	; 0x80063e <__flp>
    139a:	3d c0       	rjmp	.+122    	; 0x1416 <free+0x10c>
    139c:	e9 01       	movw	r28, r18
    139e:	fb 83       	std	Y+3, r31	; 0x03
    13a0:	ea 83       	std	Y+2, r30	; 0x02
    13a2:	49 91       	ld	r20, Y+
    13a4:	59 91       	ld	r21, Y+
    13a6:	c4 0f       	add	r28, r20
    13a8:	d5 1f       	adc	r29, r21
    13aa:	ec 17       	cp	r30, r28
    13ac:	fd 07       	cpc	r31, r29
    13ae:	61 f4       	brne	.+24     	; 0x13c8 <free+0xbe>
    13b0:	80 81       	ld	r24, Z
    13b2:	91 81       	ldd	r25, Z+1	; 0x01
    13b4:	84 0f       	add	r24, r20
    13b6:	95 1f       	adc	r25, r21
    13b8:	02 96       	adiw	r24, 0x02	; 2
    13ba:	e9 01       	movw	r28, r18
    13bc:	99 83       	std	Y+1, r25	; 0x01
    13be:	88 83       	st	Y, r24
    13c0:	82 81       	ldd	r24, Z+2	; 0x02
    13c2:	93 81       	ldd	r25, Z+3	; 0x03
    13c4:	9b 83       	std	Y+3, r25	; 0x03
    13c6:	8a 83       	std	Y+2, r24	; 0x02
    13c8:	e0 e0       	ldi	r30, 0x00	; 0
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	12 96       	adiw	r26, 0x02	; 2
    13ce:	8d 91       	ld	r24, X+
    13d0:	9c 91       	ld	r25, X
    13d2:	13 97       	sbiw	r26, 0x03	; 3
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	19 f0       	breq	.+6      	; 0x13de <free+0xd4>
    13d8:	fd 01       	movw	r30, r26
    13da:	dc 01       	movw	r26, r24
    13dc:	f7 cf       	rjmp	.-18     	; 0x13cc <free+0xc2>
    13de:	8d 91       	ld	r24, X+
    13e0:	9c 91       	ld	r25, X
    13e2:	11 97       	sbiw	r26, 0x01	; 1
    13e4:	9d 01       	movw	r18, r26
    13e6:	2e 5f       	subi	r18, 0xFE	; 254
    13e8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ea:	82 0f       	add	r24, r18
    13ec:	93 1f       	adc	r25, r19
    13ee:	20 91 3c 06 	lds	r18, 0x063C	; 0x80063c <__brkval>
    13f2:	30 91 3d 06 	lds	r19, 0x063D	; 0x80063d <__brkval+0x1>
    13f6:	28 17       	cp	r18, r24
    13f8:	39 07       	cpc	r19, r25
    13fa:	69 f4       	brne	.+26     	; 0x1416 <free+0x10c>
    13fc:	30 97       	sbiw	r30, 0x00	; 0
    13fe:	29 f4       	brne	.+10     	; 0x140a <free+0x100>
    1400:	10 92 3f 06 	sts	0x063F, r1	; 0x80063f <__flp+0x1>
    1404:	10 92 3e 06 	sts	0x063E, r1	; 0x80063e <__flp>
    1408:	02 c0       	rjmp	.+4      	; 0x140e <free+0x104>
    140a:	13 82       	std	Z+3, r1	; 0x03
    140c:	12 82       	std	Z+2, r1	; 0x02
    140e:	b0 93 3d 06 	sts	0x063D, r27	; 0x80063d <__brkval+0x1>
    1412:	a0 93 3c 06 	sts	0x063C, r26	; 0x80063c <__brkval>
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	08 95       	ret

0000141c <_exit>:
    141c:	f8 94       	cli

0000141e <__stop_program>:
    141e:	ff cf       	rjmp	.-2      	; 0x141e <__stop_program>
